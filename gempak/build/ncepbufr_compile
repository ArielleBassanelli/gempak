#!/bin/sh

if  [ $# != 0 ]
then
    ver=$1
    dir=$NAWIPS/extlibs/ncepBUFR/$ver
    if  [ -d $dir ]
    then
	echo "COMPILING NCEPBUFR LIBRARY $ver"
	echo "INSTALLING as \"$OS_LIB/libncepBUFR.a\""
	$RM $OS_LIB/libncepBUFR.a $OS_LIB/ncepBUFR_*

	cd $dir

#-------------------------------------------------------------------------------
#     Determine the byte-ordering scheme used by the local machine.

cat > endiantest.c << ENDIANTEST
#include <stdio.h>
void fill(char *p, int size);
void endian(int byte_size);
int cprop(void);

#define Order(x)\
        fill((char *)&x, sizeof(x)); \
        for (i=1; i<=sizeof(x); i++) { \
            c=((x>>(byte_size*(sizeof(x)-i)))&mask); \
            putchar(c==0 ? '?' : (char)c); \
        } \
        printf("\n");

void fill(char *p, int size) {
        char *ab= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int i;

        for (i=0; i<size; i++) p[i]= ab[i];
}

void endian(int byte_size) {
        int j=0;
        unsigned int mask, i, c;

        mask=0;
        for (i=1; i<=(unsigned)byte_size; i++) mask= (mask<<1)|1;
        Order(j);
}

int cprop(void) {
        /* Properties of type char */
        char c;
        int byte_size;

        c=1; byte_size=0;
        do { c<<=1; byte_size++; } while(c!=0);

        return byte_size;
}

int main(void)
{
        int byte_size;

        byte_size= cprop();
        endian(byte_size);
	return(0);
}
ENDIANTEST

	$CC $CFLAGS -o endiantest endiantest.c

	if [ `./endiantest | cut -c1` = "A" ]
	then
	  byte_order=BIG_ENDIAN
	else
	  byte_order=LITTLE_ENDIAN
	fi

	rm -f endiantest.c endiantest

#-------------------------------------------------------------------------------
#     Preprocess any Fortran *.F files into corresponding *.f files.

	BNFS=""

	if [ $OS = "Linux" ]
	then
	  /usr/bin/cpp -P bufrlib.PRM.template bufrlib.prm
	  for i in `ls *.F`
	    do
	      bn=`basename $i .F`
	      bnf=${bn}.f
	      BNFS="$BNFS $bnf"
	      /usr/bin/cpp -P -traditional -Wall -D$byte_order $i $bnf
	    done
	else
	  /usr/lib/cpp -P bufrlib.PRM.template bufrlib.prm
	  for i in `ls *.F`
	    do
	      bn=`basename $i .F`
	      bnf=${bn}.f
	      BNFS="$BNFS $bnf"
	      /usr/lib/cpp -P -D$byte_order $i $bnf
	    done
	fi

	$CC $CFLAGS -c *.c
	$FC $FFLAGS -c *.f
	$AR $ARFLAGS $OS_LIB/libncepBUFR.a *.o
	$RM *.o bufrlib.prm $BNFS

	touch $OS_LIB/ncepBUFR_$ver

##########################################################################
	echo "COMPILATION OF ncepBUFR LIBRARY ${ver} IS COMPLETE."
	echo "====================================================="
    else
	echo "Directory \"$dir\" does not exist!"
    fi
else
    echo "Please include a valid ncepBUFR library version; e.g., 20041221"
fi
