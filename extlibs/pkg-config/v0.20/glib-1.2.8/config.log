This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.59.  Invocation command line was

  $ ./configure --prefix=/export-1/cdbsrv/nawopr/os/aix5 --prefix=/export-1/cdbsrv/nawopr/os/aix5 --disable-shared --disable-dependency-tracking CC=cc CFLAGS= CPPFLAGS=-DNDEBUG CPP= CXXCPP= CXXFLAGS= CXX= F77= FFLAGS= LDFLAGS= --cache-file=/dev/null --srcdir=.

## --------- ##
## Platform. ##
## --------- ##

hostname = ibm7.ncep.noaa.gov
uname -m = 000775264C00
uname -r = 1
uname -s = AIX
uname -v = 5

/usr/bin/uname -p = powerpc
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
hostinfo               = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = 5.1.0.0
/bin/universe          = unknown

PATH: /etc
PATH: /usr/bin
PATH: /usr/sbin
PATH: /bin
PATH: /usr/ucb
PATH: /usr/etc
PATH: /usr/bin/X11
PATH: /sbin
PATH: .
PATH: /export-1/cdbsrv/nawopr/bin
PATH: /export-1/cdbsrv/nawopr/os/aix5/bin
PATH: /export-1/cdbsrv/nawopr/bin
PATH: /export-1/cdbsrv/nawopr/scripts/ez
PATH: /export-1/cdbsrv/nawopr/scripts/nawips
PATH: /export-1/cdbsrv/nawopr/scripts/prnt


## ----------- ##
## Core tests. ##
## ----------- ##

configure:1602: checking for a BSD-compatible install
configure:1657: result: ./install-sh -c
configure:1668: checking whether build environment is sane
configure:1711: result: yes
configure:1744: checking for gawk
configure:1773: result: no
configure:1744: checking for mawk
configure:1773: result: no
configure:1744: checking for nawk
configure:1760: found /usr/bin/nawk
configure:1770: result: nawk
configure:1780: checking whether make sets $(MAKE)
configure:1800: result: yes
configure:2059: checking build system type
configure:2077: result: powerpc-ibm-aix5.1.0.0
configure:2085: checking host system type
configure:2099: result: powerpc-ibm-aix5.1.0.0
configure:2119: checking for style of include used by make
configure:2147: result: GNU
configure:2218: checking for gcc
configure:2244: result: cc
configure:2488: checking for C compiler version
configure:2491: cc --version </dev/null >&5
cc: 1501-216 command option -version is not recognized - passed to ld
  C for AIX Compiler, Version 6

  Usage:
     xlc [ option | inputfile ]...
     cc [ option | inputfile ]...
     c89 [ option | inputfile ]...
     xlc128 [ option | inputfile ]...
     cc128 [ option | inputfile ]...
     xlc_r [ option | inputfile ]...
     cc_r [ option | inputfile ]...
     xlc_r4 [ option | inputfile ]...
     cc_r4 [ option | inputfile ]...
     xlc_r7 [ option | inputfile ]...
     cc_r7 [ option | inputfile ]...

  Description:
     The xlC and related commands compile C and C++ source files.
     They also processes assembler source files and object files. Unless the
     -c option is specified, xlC calls the linkage editor to produce a
     single object file. Input files may be any of the following:
       1. file name with .c suffix: C source file
       2. file name with .i suffix: preprocessed C or C++ source file
       3. file name with .o suffix: object file for ld command
       4. file name with .s suffix: assembler source file
       5. file name with .so suffix: shared object file

  Options:
     Options can be flag options or keyword options:

       1. Flag options:

        -#        Display language processing commands but do
                  not invoke them; output goes to stdout.
        -bdynamic, -bstatic
                  Determines which types of library files are searched by
                  the linkage editor.
        -brtl     Tells the linkage editor to accept both .so and .a
                  library file types.
        -B<prefix>
                  Construct alternate compiler/assembler/linkage editor
                  program names. <prefix> is added to the beginning of
                  the standard program names.
        -c        Do not send object files to the linkage editor.
        -C        Write comments to output when doing preprocessing,
                  used with -E and -P.
        -D<name>[=<def>]
                  Define <name> as in #define directive. If <def> is
                  not specified, 1 is assumed.
        -E        Preprocess but do not compile; output goes to stdout
        -f<filename>
                  Passes to the linkage editor the filename of a file
                  containing a list of input files to be processed.
        -F<x>[:<stanza>]
                  Use alternate configuration file <x> with optional
                  <stanza>. If <stanza> is not specified, the assumed stanza
                  is the name of the command used to invoke the compiler.
        -g        Produce information for the debugger.
        -G        Tells the linkage editor to create a dynamic library.
        -I<dir>   Search in directory <dir> for include files that
                  do not start with an absolute path.
        -l<key>   Search the specified library file,
                  where <key> selects the file lib<key>.a.
        -L<dir>   Search in directory <dir> for files specified by -l<key>.
        -ma       Generate inline calls to the "alloca" function as if
                  "#pragma alloca" directives were in the source file.
        -M        Generate information to be included in a "make"
                  description file; output goes to .u file.
        -o<name>  Name the executable file <name> instead of a.out.
                  When used with the -c option and one source file,
                  name the object file <name> instead of filename.o.
                  If <name> is the name of a directory, files generated by
                  the compiler will be placed into that directory.
        -O        Optimize generated code.
        -O2       Same as -O.
        -O3       Perform some memory and compile time intensive
                  optimizations in addition to those executed with -O2.
                  The -O3 specific optimizations have the potential to
                  alter the semantics of a user's program.
                  The compiler guards against these optimizations at -O2
                  and the option -qstrict is provided at -O3 to turn off
                  these aggressive optimizations.
        -O4       Equivalent to -O3 -qipa with automatic generation of
                  architecture and tuning option ideal for that platform.
        -O5       Equivalent to -O3 -qipa=level=2 with automatic
                  generation of architecture and tuning option ideal for
                  that platform.
        -p        Generate profiling support code.  Same as -qprofile=p.
        -pg       Generate profiling support code including BSD
                  profiling support.  Same as -qprofile=pg.
        -P        Preprocess but do not compile; output goes to .i file.
        -Q<x>, -qinline<x>
                  Inline all appropriate functions where x can be
                  one of the following:
                    !       Not inline any function (equivalent to -qnoinline)
                    =<lc>   Inline if number of source statement in
                            function is less than the number specified
                            in <lc>.
                    -<nm>   Not inline function listed by names in <nm>
                    +<nm>   Attempt to inline function listed by names
                            in <nm>.
        -r        Produce the output file without linking any library.
        -S        Produce a .s file for any source file processed by the
                  compiler.
        -t<x>     Apply prefix from the -B option to the specified program <x>,
                  where x can be one or more of the following:
                    a = assembler
                    b = compiler backend
                    c = compiler frontend
                    i = compiler inliner
                    I = inter-procedural analysis - compile phase
                    l = linkage editor
                    L = inter-procedural analysis - link phase.
                    p = preprocessor
        -U<name>  Undefine name as in #undef directive.
        -v        Displays language processing commands as they
                  are invoked by xlc; output goes to stdout.
        -V        Displays commands as they are invoked by xlC;
                  output goes to stdout.
        -w        Suppress informational, language-level, and
                  warning messages.
        -W<x,y>   Give the options <y> to the compiler program <x>
                  where x can be one or more of the following:
                    <a,b,c,f,I,l,L,p>
        -y<x>     Specify compile-time rounding of constant floating-point
                  expressions, where <x> can be one of the following:
                    m = round toward minus infinity
                    n = round to nearest
                    p = round toward positive infinity
                    z = round toward zero.

       2. Keyword options:

          Keyword options are specified in one of the following ways:

          -q<option>
          -q<option>=<parameter>
          -q<option>=<parameter>:<parameter>

          where <option> is an option name and <parameter> is a
          parameter value.
          Keyword options with no parameters represent switches
          that may be either on or off. The keyword by itself turns
          the switch on, and the keyword preceded by the letters NO
          turns the switch off. For example, -qLIST tells the
          compiler to produce a listing and -qNOLIST tells the
          compiler not to produce a listing. If an option that
          represents a switch is set more than once, the compiler
          uses the last setting.

          Keyword option and parameter names may appear in either
          UPPER CASE or lower case letters in the xlc command.


          Options without parameters:

          32          Selects 32-bit compiler mode.
          64          Selects 64-bit compiler mode.
          ansialias   Use type-based aliasing during optimization.
          compact     Reduce code size where possible, at the expense
                      of execution speed.  Code size is reduced by
                      inhibiting optimizations that replicate or expand
                      code inline.
          cpluscmt    Permit "//" to introduce a comment that lasts
                      until the end of the current source line, as in C++.
          dbcs        String literals and comments can contain DBCS
                      characters (same as mbcs option).
          dbxextra    Generate symbol table information for unreferenced
                      variables. By default such information is not generated
                      thus reducing the size of the executable compiled with
                      the "-g" option.  Same as -qsymtab=unref.
          digraph     Allow special digraph
          dollar      Allow '$' as an identifier character
          dpcl        Generates symbols for tools based on the Dynamic
                      Probe Class Library (DPCL)
          extchk      Perform external name type-checking and function
                      call checking.
          fdpr        Collect information about programs for use with
                      the AIX fdpr (Feedback Directed Program Restructuring)
                      performance-tuning utility.
          flttrap     Generate instructions to trap floating-point
                      exceptions.
          fold        Specifies that constant floating-point expressions
                      are to be evaluated at compile time.
          fullpath    Specifies the path information stored for files when
                      you use "-g" and the symbolic debugger.
          funcsect    Place instructions for each function in a separate csect.
          heapdebug   Enables debug versions of memory management functions.
          hot         Determines whether or not to perform high-order
                      transformations on loops during optimization.
          idirfirst   Specify the search order for files included with
                      the #include "file_name" directive.  Use -qidirfirst
                      with the -Idirectory option.  If -qidirfirst option
                      is specified, the directories specified by the
                      -Idirectory option are searched before the directory
                      where the current file resides.
          ignerrno    Tell the optimizer that the program will never
                      refer to or set errno.  This allows additional
                      optimizations.
          inlglue     Generate fast external linkage by inlining the
                      code (pointer glue code) necessary at calls
                      via a function pointer and calls to external
                      procedures.
          largepage   Take advantage of 16M pages, which will allow for
                      reduced TLB entries and allow hardware prefetching
                      to be done more efficiently.
          ldbl128     Increase long double size from 64 to 128 bits.
          libansi     Assumes that all functions with the name of an
                      ANSI C library functions are in fact the system functions.
          linedebug   Generates abbreviated line number and source file name
                      information for the debugger.
          list        Produce an object listing; output goes to .lst file.
          listopt     Display the settings of all options; output goes
                      to .lst file.
          longdouble  Increase long double size from 64 to 128 bits.
          longlit     Changes implicit type selection for integer constants in
                      64-bit mode.
          longlong    Allow long long integers.
          macpstr     Allow '\p' as the first character of a string constant
                      which will be replaced by the length in bytes.
          makedep     Creates an output file that contains targets suitable for
                      inclusion in a description file for the AIX make command.
          mbcs        String literals and comments can contain DBCS
                      characters (same as dbcs option).
          mkshrobj    Create a shared object from generated object files.
          noprint     Direct listing to /dev/null.
          nostdinc    Specify which files are included with the #include
                      "file_name" and #include <file_name> directives.
                      If -qnostdinc is specified, the /usr/include directory
                      is not searched.
          optimize    Same as O and O2. Perform optimization that is the
                      mix between speed and size.  (If -qnooptimize is
                      specified, it is equivalent to -qoptimize=0.)
          pascal      Accept and ignore the keyword 'pascal' as a
                      type modifier.
          pdf1, pdf2  Perform aggressive optimizations with profile
                      directed feedback.
          phsinfo     Produce compiler phase information; output goes to
                      stdout.
          proto       Assert that procedure call points agree
                      with their declarations even if the procedure has
                      not been prototyped. This allows the caller to
                      pass floating point arguments in floating point
                      registers instead of general purpose registers.
          report      Adds information to the listing file on the loop
                      transformations that have been carried out.
                      This option requires either -qhot or -qsmp
                      in order to have effect.
          ro          Put string literals in read only area.
          roconst     Put constant values in read only area.
          showinc     Include the source of all included files in the
                      source listing, if the SOURCE option is in effect.
          smallstack  Reduce the size of the stack frame, allowing better use
                      of a limited stack size.
          source      Produce a source listing; output goes to .lst file.
          srcmsg      Reconstruct source lines in error along with the
                      diagnostic messages in the stderr file.
          statsym     Adds user-defined, nonexternal names that have a
                      persistent storage class, such as initialized and
                      uninitialized static variables, to the name list
                      (the symbol table of xcoff objects).  Same as
                      -qsymtab=static.
          strict      Turns off aggressive optimizations which have the
                      potential to alter the semantics of a user's program.
                      This option also sets -qfloat=nofltint:norsqrt.
          strict_induction
                      Turns off induction variable optimizations
                      that have the potential to alter the semantics of a
                      user's program. The default is "nostrict_induction" at
                      -O2 or higher and "strict_induction" otherwise.
                      "nostrict_induction" is recomended if your program does
                      not have overflows or wrap arounds of loop induction
                      variables.
          syntaxonly  Causes the compiler to perform syntax checking without
                      generating an object file.
          threaded    Indicates to the compiler that the program will execute
                      in multi-threaded environment.
          tocmerge    Read from the file specified in -bImportfile linker
                      option and merge the address information to access
                      ranges of external addresses using a single Table Of
                      Content entry.
          upconv      Preserves the unsigned specification when performing
                      integral promotions.
          warn64      Enables checking for possible long-to-integer or
                      pointer-to-integer truncation.
          unwind      Enables stack unwinding.  The optimization prologue
                      tailoring reduces the number of saves and restores
                      of non-volatile registers, but is enabled only when
                      stack unwinding is disabled.
          xcall       Generate code to static routines within a compilation
                      unit as if they were external routines.
          xref        Produce a cross-reference listing containing
                      only referenced names.



          Options with parameters:
          aggrcopy=[no]overlap
                      Asserts whether source and destination of aggregate
                      assignments overlap.
          alias=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
                      allp    Pointers are never aliased.
                      ansi    Pointers can only point to an object of the
                              same type. Require -O option.
                      typ     Pointers to different types are never aliased.
          align=<algnopt>
                      bit_packed
                              Similar to packed, except bit-fields are
                              packed as tightly as possible.
                      full    The compiler uses the RISC System/6000
                              alignment rules. This is the same as power.
                      mac68k  The compiler uses the Macintosh**
                              alignment rules.
                      natural The compiler maps structure members to
                              their natural boundaries.
                      packed  The compiler uses the packed alignment rules.
                      power   The compiler uses the RISC System/6000
                              alignment rules.
                      twobyte The compiler uses the Macintosh alignment rules.
                              The mac68k option is the same as twobyte.
          arch=<option>
                      Specifies the architecture on which the executable
                      program will be run.
                      The available options are:
                      com     Produce an object that contains instructions
                              that will run on all the POWER and PowerPC
                              hardware platforms.
                      pwr     Produce an object that contains instructions
                              that will run on the POWER hardware
                              platform.
                      pwr2    Produce an object that contains instructions
                              that will run on the POWER2 hardware
                              platform.
                      pwrx    Same as pwr2.
                      ppc     Produce an object that contains instructions
                              that will run on any of the 32-bit PowerPC
                              hardware platforms.
                      ppcgr   Produce an object that contains optional
                              graphics instructions for PowerPC processors.
                      pwr2s   Produce an object that contains instructions
                              that will run on a pwr2s chip.
                      p2sc    Produce an object that contains instructions
                              that will run on a p2sc chip.
                      601     Produce an object that contains instructions
                              that will run on a 601 chip.
                      602     Produce an object that contains instructions
                              that will run on a 602 chip.
                      603     Produce an object that contains instructions
                              that will run on a 603 chip.
                      604     Produce an object that contains instructions
                              that will run on a 604 chip.
                      403     Produce an object that contains instructions
                              that will run on a 403 chip.
                      rs64a   Produce an object that contains instructions
                              that will run on a rs64a chip.
                      rs64b   Produce an object that contains instructions
                              that will run on a rs64b chip.
                      rs64c   Produce an object that contains instructions
                              that will run on a rs64c chip.
                      pwr3    Produce an object that contains instructions
                              that will run on a POWER3 chip.
                      pwr4    Produce an object that contains instructions
                              that will run on a POWER4 chip.
                      The default is -qarch=com.  If the -qarch option is
                      specified without the -qtune=<option>, the compiler
                      uses the default -qtune value for the specified
                      architecture. Refer to online documentation to find
                      actual default setting of -qtune  for a given -qarch.
          assert=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      typ     Pointers to different types are never aliased.
                      allp    Pointers are never aliased.
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
          attr        Produce an attribute listing containing only
                      referenced names; output goes to .lst file.
          attr=full   Produce an attribute listing containing all names,
                      whether referenced or not; output goes to .lst file.
          bitfields=signed
          bitfields=unsigned
                      Specify whether bitfields will be signed or unsigned.
          cache=<suboption>:<suboption>...
                      Describe the cache configuration for a specific target
                      execution machine. See online documentation for details.
          chars=signed
          chars=unsigned
                      Specify whether the data type char will be signed
                      or unsigned.
          check=<option>
                      Generate code to check for run-time checks.
                      bounds  Runtime checking of addresses when
                              subscripting within an object of known size.
                      divzero Runtime checking of integer division.
                              A trap will occur if an attempt is made to
                              divide by zero.
                      nullptr Runtime checking of addresses
                              contained in pointer variables used to
                              reference storage.
                      all     Switches on all the above suboptions.
          dataimported=<name1>:<name2>: ...
                      Specify which data items are imported.  If no names are
                      specified, all data items are assumed to be imported.
                      This is the default.
          datalocal=<name1>:<name2>: ...
                      Specify which data items are local.  If no names are
                      specified, all data items are assumed to be local.
          enum=<enumopt>
                      Specify whether minimum-sized enumerated types will be
                      produced or not. <enumopt> can be either small, int,
                      1, 2, 4 or 8.
                      small denotes that either one, two, four or eight (valid
                      in 64-bit mode only) bytes of storage will be allocated
                      for enum variables based on the range of the enum
                      constants.
                      int is the default, and causes enum variables to be
                      treated as though they were of type signed int
                      depending on the range of the enum constants.
                      1 will cause enum variables to be packed into 1 byte.
                      2 will cause enum variables to be packed into 2 bytes.
                      4 will cause enum variables to be packed into 4 bytes.
                      8 will cause enum variables to be packed into 8 bytes.
                        (enum=8 is valid in 64-bit mode only)
          flag=<sev1>
                      Specify severity level of diagnostics to be reported
                      in source listing and stderr; the severity level
                      is one of <i,w,e,s,u>.
          flag=<sev1>:<sev2>
                      Specify severity level of diagnostics to be reported
                      in source listing (<sev1>), and stderr (<sev2>);
                      the severity levels are one of <i,w,e,s,u>.
          float=<opt1>:<opt2>:...:<optN>
                      The available options are:
                      emulate Function calls are emitted in place of
                              PowerPC floating-point instructions.
                              Use this option only in a single-threaded
                              stand-alone environment, targeting the
                              PowerPC 403 processor.
                              Do not use this suboption with any of the
                              following:
                              o  -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                              o  -qlongdouble, -qldbl128
                              o  128-bit long double invocation commands
                      fltint  Specify whether range checking of floating
                              point to integer conversions is done.
                              Default at -O2: -qfloat=nofltint.
                              Default at -O3: -qfloat=fltint.
                      hsflt   Never round single-precision expressions,
                              and don't perform range checking for
                              floating-point to integer conversions.
                      hssngl  Round single-precision expressions only
                              when the results are stored into float memory
                              locations.
                      nans    Detect conversion of single-precision NaNS to
                              double precision call checking.
                      nomaf   Suppress generation of multiply-add
                              instructions.
                      nofold  Suppress compile-time evaluation of constant
                              floating-point expressions.
                      rndsngl Ensure strict adherence to IEEE standard.
                              all operations on single-precision values
                              produce results that remain in single
                              precision.
                      rrm     Specify run-time rounding mode. Compile with
                              this option if the run-time rounding mode
                              is round toward minus infinity, round toward
                              positive infinity, or not known.
                      rsqrt   Specify whether a division by the result of a
                              square root can be replaced with a multiply
                              by the reciprocal of the square root.
                              Default at -O2: -qfloat=norsqrt.
                              Default at -O3: -qfloat=rsqrt.
                      spnans  Generate extra instructions to detect signaling
                              NaN on conversion from single precision to
                              double precision.  Obsolete; use the equivalent
                              -qfloat=nans option.
          flttrap=<opt1>:<opt2>:...:<optN>
                      Generate instructions to detect and trap floating-point.
                      The available options are:  overflow, underflow,
                      zerodivide, invalid, inexact, enable, imprecise.
          halt=<sev>  Stop compiler after first phase if severity of errors
                      detected equals or exceeds <sev>; the severity
                      level is one of i, w, e, s, u.
          genproto=<parmnames>
                      Produces ANSI prototypes from K&R function definitions.
          hot=<suboption>
                      Determines whether or not to perform high-order
                      transformations on loops and array language during
                      optimization, and whether or not to pad array dimensions
                      and data objects to avoid cache misses. Suboptions
                      include:
                        arraypad   - The compiler will pad any arrays where it
                                     infers there may be a benefit.  Make sure
                                     that you have not used equivalence
                                     association for any arrays in files
                                     compiled with this option as the compiler
                                     does not perform any checking before
                                     padding arrays.
                        arraypad=n - The compiler will pad every array in the
                                     code.  The pad amount must be a positive
                                     integer value.
                        novector   - The compiler will avoid replacing code by
                                     calls to vector library routines.
                        vector     - Allows the compiler to optimize by
                                     replacing code with calls to vector
                                     library routines.
          ignprag=<option>
                      The available options are:
                      disjoint
                              Ignore pragma disjoint.
                      isolated
                              Ignore pragma isolated_call.
                      omp     Ignore OpenMP parallel processing pragmas.
                      ibm     Ignore IBM parallel processing pragmas.
                      all     Ignore all the above pragmas.
          info
          info=all
                      Produce additional lint-like messages.  For C, it turns
                      on all diagnostic messages for all groups.  For C++, it
                      turns on all diagnostic messages for all groups, except
                      ppt.
          info=<group>
                      Produce additional lint-like messages based on <group>.
                      c99     Code that might behave differently between
                              C89 and C99 language levels
                      cls     Possible problems with generation of classes
                      cmp     Possible redundancies in unsigned comparisons
                      cnd     Possible redundancies or problems in conditional
                              expressions
                      cns     Operations involving constants.
                      cnv     Conversions
                      dcl     Consistency of declarations
                      eff     Statements with no effect
                      enu     Consistency of enum variables
                      ext     Unused external definitions
                      gen     General diagnostic messages
                      gnr     Generation of temporary variables
                      got     Use of goto statements
                      ini     Possible problems with initialization
                      inl     Functions not inlined
                      lan     Language level effects
                      obs     Obsolete features
                      ord     Unspecified order of evaluation
                      par     Unused parameters
                      por     Nonportable language constructs
                      ppc     Possible problems with using the preprocessor
                      ppt     Trace of preprocessor actions
                      private Lists shared variables made private to a
                              parallel loop.
                      pro     Missing function prototypes
                      rea     Code that cannot be reached
                      reduction
                              Lists all variables that are recognized as
                              reduction variables inside a parallel loop.
                      ret     Consistency of return statements
                      trd     Possible truncation or loss of data or precision
                      tru     Variable names truncated by the compiler
                      trx     Hexadecimal floating-point constants that cannot
                              be represented exactly in its evaluation format
                      uni     Unitialized variables
                      use     Unused auto and static variables
          initauto=<hh>
                      Initialialize automatic storage to <hh>. <hh> is a
                      hexadecimal value.  This generates extra code and
                      should only be used for error determination.
          inline[=<x>]
                      This is functionally equivalent to the -Q option.
          ipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                      Enhances -O optimization by doing detailed analysis
                      across procedures.  One of -O, -O2, or -O3 is required
                      when using -qipa.  Regular expressions are supported
                      when specifying <procedure_names> on the -qipa=exits,
                      -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                      -qipa=safe and -qipa=unknown suboptions.
                      Suboptions include:
                        exits=<procedure_names>
                                   - Specifies a selected set of procedures
                                     which always end the program.
                        inline=<inline-options>
                          The "ipa=inline=" command can take a colon-separated
                          list of inline options, which are as follows:
                            inline={auto|noauto}
                                        - Specifies whether or not to
                                          automatically inline expansion.
                            inline=<procedure_names>
                                        - Specifies a comma-separated list of
                                          procedures to try to inline.
                            inline=limit=<num>
                                        - Changes the size limits that deter-
                                          mine how much inline expansion to do.
                                          <num> is the optimizer's approximation
                                          of the number of bytes of code which
                                          will be generated.
                            inline=threshold=<num>
                                        - Specifies the upper size limit on
                                          procedures to inline.  <num> is
                                          defined as for inline=limit.
                        isolated=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not directly refer to any global
                                     variable.
                        level=<level>
                                   - Determines the amount of IPA analysis
                                     and optimization performed:
                                       0 = Does only minimal interprocedural
                                           analysis and optimization.
                                       1 = Turns on inlining, limited alias
                                           analysis, and limited call-site
                                           tailoring.
                                       2 = Full interprocedural data flow and
                                           alias analysis.
                        list=[filename|short|long]
                                   - Specifies an output listing file name
                                     during the link phase, in the event that
                                     an object listing has been requested
                                     using the -qlist option.  The default
                                     name is "a.lst".  The suboptions short and
                                     long determine which listing sections will
                                     be included.
                        lowfreq=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures that are likely to be
                                     called infrequently during the course
                                     of a typical program run.
                        missing={unknown|safe|isolated|pure}
                                   - Specifies the default assumption for
                                     procedures not compiled with -qipa.
                        noinline=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures which are not to be inlined.
                        noobject   - Speeds up compilation, but the object
                                     files cannot be used in non-IPA
                                     compilations.  This option is ignored if
                                     -S has been specified.
                        partition={small|medium|large}
                                   - Specifies the size of program sections
                                     that are analyzed together.  Larger
                                     partitions may produce better analysis but
                                     require more storage.
                        pure=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that are "isolated", "safe", and do not
                                     modify any data objects that are visible
                                     to the caller.
                        safe=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not call any other part of the
                                     program.
                        stdexits   - Specifies that compiler-defined exit
                                     routines can be optimized as with the
                                     "exits" suboption.  The procedures are
                                     abort, exit, _exit, and _assert.
                        nothreads    Single threaded invocation of the compiler
                                     backend.
                        threads      Compiler decides the number of threads
                                     used to invoke the compiler backend.
                        threads=<n>  Up to 'n' threads can be used to invoke
                                     the compiler backend.
                        unknown=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that may update global variables and
                                     dummy arguments and call other parts of
                                     the program compiled with -qipa.
                        The following options are intended for use by the
                        link-time phase of -qipa:
                        -qlibansi  - Assumes that all functions with the name
                                     of an ANSI C defined library function are,
                                     in fact, the library functions.
                                     -qnolibansi is the default.
                        -qlibessl  - Assumes that all functions with the name
                                     of an ESSL defined library functions are,
                                     in fact, the library functions.
                                     -qnolibessl is the default.
                        -qlibposix - Assumes that all functions with the name
                                     of a POSIX 1003.1 defined library function
                                     are, in fact, the system functions.
                                     -qnolibposix is the default.
          isolated_call=<name1>:<name2>: ...
                      Specify that the calls to the functions listed have no
                      side effects. <name1> and <name2> are function names.
                      The user may specify as many function names as
                      necessary.
          keyword=<keywords>
                      Enables the use of specific keywords.
          langlvl={<langlvl>|<feature>}[:<langlvl>|<feature>]...
                      Specify language level and/or features to be enabled
                      during compilation.
                      <langlvl>
                              can be extc89, stdc89, extc99, stdc99,
                              ansi, saal2, saa, extended, or classic.
                      <feature>
                              can be:
                              [no]ucs   enables or disables support for
                                        universal character names.
          maxerr=<num>[:<sev>]
                      Instructs the compiler to halt compilation when <num>
                      errors of <sev> or greater severity is reached.  The
                      default for <sev> is current value of the -qhalt option.
          maxmem=<num>
                      Limit the amount of memory used by space intensive
                      optimizations to <num>.  <num> specified in kilobytes.
          optimize=<level>
                      Enables different levels of optimization.
                      2       Same as -O and -qoptimize.
                      3       Same as -O3. Aggressive optimization.
                      4       Same as -O4. Internally generates -O3 -qipa
                              with automatic architecture and tuning option
                              generation.
                      5       Same as -O5. Internally generates -O3
                              -qipa=level=2 with automatic architecture and
                              tuning option generation.
          procimported=<name1>:<name2>: ...
                      Specify which functions are imported.  If no filenames
                      are specified, all invoked functions are assumed to be
                      defined outside the current file.  The last explicit
                      specification for a function takes precedence.
          proclocal=<name1>:<name2>: ...
                      Specify which functions are local.
                      If no filenames are specified, all invoked functions
                      are assumed to be defined within the current file.
                      The last explicit specification for a function takes
                      precedence.
          procunknown=<name1>:<name2>: ...
                      Specify which functions are unknown to be local or
                      imported.  If no filenames are specified, all functions
                      called are assumed to be unknown. This is the default
                      when no user options are specified. The last explicit
                      specification for a function takes precedence.
          profile=<option>
                      Sets up the object files produced by the compiler for
                      profiling.
                      The available options are:
                      ibm     Generate profiling support code for use with the
                              Performance Analysis tool in VisualAge C++.
                      p       Generate profiling support code.  Same as -p.
                      pg      Generate profiling support code including BSD
                              profiling support.  Same as -pq.
          smp[=suboption[:suboption] [ ... ]]
                      Controls acceptance of OpenMP directives and
                      automatic parallelization.  The auto and omp suboptions
                      are opposites. i.e. -qsmp=omp means strict adherance
                      to the OpenMP standard with no automatic parallelization.
                      [no]auto
                              Enables or disables automatic parallelization.
                      [no]explicit
                              Enables or disables explicit parallelization.
                      [no]opt
                              Turns off the implied optimization to allow
                              simpler debugging.
                      schedule=<sched_type>[=n]
                              Specifies what kind of scheduling algorithms
                              and chunking are used for loops to which no
                              other scheduling algorithm has been explicitly
                              assigned in the source code.
                              Valid options for <sched_type> are:
                                         * dynamic[=n]
                                         * guided[=n]
                                         * static[=n]
                                         * affinity[=n]
                                         * runtime
                              For more information, see online documentation.
                      [no]nested_par
                              Enables or disables parallelization of nested
                              parallel constructs.
                      [no]rec_locks
                              Specifies whether recursive or regular locks
                              should be used to implement critical sections.
                      [no]omp Enables or disables strict OpenMP mode.
          spill=<size>
                      Specify the size of the register allocation spill area.
          suppress=<msg_num>:<msg_num>...
                      Suppress compiler messages.
          nosuppress
                      Don't suppress compiler messages.
          symtab=<options>
                      Controls symbol table.
                      The available options are:
                      unref   Specifies that all typedef declarations, struct,
                              union, and enum type definitions are included
                              for processing by the debugger.  Same as
                              -qdbxextra.
                      static  Adds user-defined, nonexternal names that have a
                              persistent storage class, such as initialized
                              and uninitialized static variables, to the name
                              list (the symbol table of xcoff objects).  Same
                              as -qstatsym.
          tabsize=<size>
                      Changes the length of tabs in your source file.
          tbtable=<option>
                      Generate a traceback table for each function and
                      place it in the text segment at the end of the
                      function code.
                      The available options are:
                      none    No traceback table is generated.
                      full    A full traceback table is generated.
                              This is the default with -g specified.
                      small   A traceback table is generated with no name or
                              parameter information.
                              This is the default when -g is NOT specified.
          tune=<option>
                      Specifies the architecture system for which the
                      executable program is optimized.
                      The available options are:
                      403     Produce an object optimized for all the
                              PowerPC 403 processors.
                              Use -qfloat=emulate to emulate the floating-point
                              instructions omitted by the 403 processor.
                      601     Produce an object optimized for all the
                              PowerPC 601 processors.
                      602     Produce an object optimized for all the
                              PowerPC 602 processors.
                      603     Produce an object optimized for all the
                              PowerPC 603 processors.
                      604     Produce an object optimized for all the
                              PowerPC 604 processors.
                      p2sc    Produce an object optimized for all the
                              p2sc processors.
                      pwr     Produce an object optimized for the POWER
                              hardware platform.
                      pwr2    Produce an object optimized for the
                              POWER2 hardware platform.
                      pwr2s   Produce an object optimized for the
                              POWER2 hardware platform, avoiding certain
                              quadruple-precision instructions that would
                              slow program performance.
                      pwrx    Same as pwr2.
                      rs64a   Produce an object optimized for the rs64a
                              processor.
                      rs64b   Produce an object optimized for the rs64b
                              processor.
                      rs64c   Produce an object optimized for the rs64c
                              processor.
                      pwr3    Produce an object optimized for the POWER3
                              processor.
                      pwr4    Produce an object optimized for the POWER4
                              processor.
          unroll={yes|no|auto}
                      yes     Hint for the compiler to try to unroll loops.
                      no      Force the compiler not to unroll any loops.
                      auto    Let the compiler decide whether to unroll loops.
          unroll      same as unroll=yes
          nounroll    same as unroll=no
          xref=full   Produce a cross-reference listing containing all names,
                      whether referenced or not; output goes to .lst file.

  Environment Variables
     1.OBJECT_MODE changes the compilation-mode behavior, unless overridden by
                   configuration file or command-line options

        Setting

         not set   32-bit compiler mode.
          32       32-bit compiler mode.
          64       64-bit compiler mode.
         32_64     Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.
        any other  Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.

  For a detailed description of each option, please refer to the online
  documentation.
configure:2494: $? = 249
configure:2496: cc -v </dev/null >&5
exec: /usr/bin/pg(/usr/bin/pg,/usr/vac/exe/default_msg/vac.help,NULL) 
  C for AIX Compiler, Version 6

  Usage:
     xlc [ option | inputfile ]...
     cc [ option | inputfile ]...
     c89 [ option | inputfile ]...
     xlc128 [ option | inputfile ]...
     cc128 [ option | inputfile ]...
     xlc_r [ option | inputfile ]...
     cc_r [ option | inputfile ]...
     xlc_r4 [ option | inputfile ]...
     cc_r4 [ option | inputfile ]...
     xlc_r7 [ option | inputfile ]...
     cc_r7 [ option | inputfile ]...

  Description:
     The xlC and related commands compile C and C++ source files.
     They also processes assembler source files and object files. Unless the
     -c option is specified, xlC calls the linkage editor to produce a
     single object file. Input files may be any of the following:
       1. file name with .c suffix: C source file
       2. file name with .i suffix: preprocessed C or C++ source file
       3. file name with .o suffix: object file for ld command
       4. file name with .s suffix: assembler source file
       5. file name with .so suffix: shared object file

  Options:
     Options can be flag options or keyword options:

       1. Flag options:

        -#        Display language processing commands but do
                  not invoke them; output goes to stdout.
        -bdynamic, -bstatic
                  Determines which types of library files are searched by
                  the linkage editor.
        -brtl     Tells the linkage editor to accept both .so and .a
                  library file types.
        -B<prefix>
                  Construct alternate compiler/assembler/linkage editor
                  program names. <prefix> is added to the beginning of
                  the standard program names.
        -c        Do not send object files to the linkage editor.
        -C        Write comments to output when doing preprocessing,
                  used with -E and -P.
        -D<name>[=<def>]
                  Define <name> as in #define directive. If <def> is
                  not specified, 1 is assumed.
        -E        Preprocess but do not compile; output goes to stdout
        -f<filename>
                  Passes to the linkage editor the filename of a file
                  containing a list of input files to be processed.
        -F<x>[:<stanza>]
                  Use alternate configuration file <x> with optional
                  <stanza>. If <stanza> is not specified, the assumed stanza
                  is the name of the command used to invoke the compiler.
        -g        Produce information for the debugger.
        -G        Tells the linkage editor to create a dynamic library.
        -I<dir>   Search in directory <dir> for include files that
                  do not start with an absolute path.
        -l<key>   Search the specified library file,
                  where <key> selects the file lib<key>.a.
        -L<dir>   Search in directory <dir> for files specified by -l<key>.
        -ma       Generate inline calls to the "alloca" function as if
                  "#pragma alloca" directives were in the source file.
        -M        Generate information to be included in a "make"
                  description file; output goes to .u file.
        -o<name>  Name the executable file <name> instead of a.out.
                  When used with the -c option and one source file,
                  name the object file <name> instead of filename.o.
                  If <name> is the name of a directory, files generated by
                  the compiler will be placed into that directory.
        -O        Optimize generated code.
        -O2       Same as -O.
        -O3       Perform some memory and compile time intensive
                  optimizations in addition to those executed with -O2.
                  The -O3 specific optimizations have the potential to
                  alter the semantics of a user's program.
                  The compiler guards against these optimizations at -O2
                  and the option -qstrict is provided at -O3 to turn off
                  these aggressive optimizations.
        -O4       Equivalent to -O3 -qipa with automatic generation of
                  architecture and tuning option ideal for that platform.
        -O5       Equivalent to -O3 -qipa=level=2 with automatic
                  generation of architecture and tuning option ideal for
                  that platform.
        -p        Generate profiling support code.  Same as -qprofile=p.
        -pg       Generate profiling support code including BSD
                  profiling support.  Same as -qprofile=pg.
        -P        Preprocess but do not compile; output goes to .i file.
        -Q<x>, -qinline<x>
                  Inline all appropriate functions where x can be
                  one of the following:
                    !       Not inline any function (equivalent to -qnoinline)
                    =<lc>   Inline if number of source statement in
                            function is less than the number specified
                            in <lc>.
                    -<nm>   Not inline function listed by names in <nm>
                    +<nm>   Attempt to inline function listed by names
                            in <nm>.
        -r        Produce the output file without linking any library.
        -S        Produce a .s file for any source file processed by the
                  compiler.
        -t<x>     Apply prefix from the -B option to the specified program <x>,
                  where x can be one or more of the following:
                    a = assembler
                    b = compiler backend
                    c = compiler frontend
                    i = compiler inliner
                    I = inter-procedural analysis - compile phase
                    l = linkage editor
                    L = inter-procedural analysis - link phase.
                    p = preprocessor
        -U<name>  Undefine name as in #undef directive.
        -v        Displays language processing commands as they
                  are invoked by xlc; output goes to stdout.
        -V        Displays commands as they are invoked by xlC;
                  output goes to stdout.
        -w        Suppress informational, language-level, and
                  warning messages.
        -W<x,y>   Give the options <y> to the compiler program <x>
                  where x can be one or more of the following:
                    <a,b,c,f,I,l,L,p>
        -y<x>     Specify compile-time rounding of constant floating-point
                  expressions, where <x> can be one of the following:
                    m = round toward minus infinity
                    n = round to nearest
                    p = round toward positive infinity
                    z = round toward zero.

       2. Keyword options:

          Keyword options are specified in one of the following ways:

          -q<option>
          -q<option>=<parameter>
          -q<option>=<parameter>:<parameter>

          where <option> is an option name and <parameter> is a
          parameter value.
          Keyword options with no parameters represent switches
          that may be either on or off. The keyword by itself turns
          the switch on, and the keyword preceded by the letters NO
          turns the switch off. For example, -qLIST tells the
          compiler to produce a listing and -qNOLIST tells the
          compiler not to produce a listing. If an option that
          represents a switch is set more than once, the compiler
          uses the last setting.

          Keyword option and parameter names may appear in either
          UPPER CASE or lower case letters in the xlc command.


          Options without parameters:

          32          Selects 32-bit compiler mode.
          64          Selects 64-bit compiler mode.
          ansialias   Use type-based aliasing during optimization.
          compact     Reduce code size where possible, at the expense
                      of execution speed.  Code size is reduced by
                      inhibiting optimizations that replicate or expand
                      code inline.
          cpluscmt    Permit "//" to introduce a comment that lasts
                      until the end of the current source line, as in C++.
          dbcs        String literals and comments can contain DBCS
                      characters (same as mbcs option).
          dbxextra    Generate symbol table information for unreferenced
                      variables. By default such information is not generated
                      thus reducing the size of the executable compiled with
                      the "-g" option.  Same as -qsymtab=unref.
          digraph     Allow special digraph
          dollar      Allow '$' as an identifier character
          dpcl        Generates symbols for tools based on the Dynamic
                      Probe Class Library (DPCL)
          extchk      Perform external name type-checking and function
                      call checking.
          fdpr        Collect information about programs for use with
                      the AIX fdpr (Feedback Directed Program Restructuring)
                      performance-tuning utility.
          flttrap     Generate instructions to trap floating-point
                      exceptions.
          fold        Specifies that constant floating-point expressions
                      are to be evaluated at compile time.
          fullpath    Specifies the path information stored for files when
                      you use "-g" and the symbolic debugger.
          funcsect    Place instructions for each function in a separate csect.
          heapdebug   Enables debug versions of memory management functions.
          hot         Determines whether or not to perform high-order
                      transformations on loops during optimization.
          idirfirst   Specify the search order for files included with
                      the #include "file_name" directive.  Use -qidirfirst
                      with the -Idirectory option.  If -qidirfirst option
                      is specified, the directories specified by the
                      -Idirectory option are searched before the directory
                      where the current file resides.
          ignerrno    Tell the optimizer that the program will never
                      refer to or set errno.  This allows additional
                      optimizations.
          inlglue     Generate fast external linkage by inlining the
                      code (pointer glue code) necessary at calls
                      via a function pointer and calls to external
                      procedures.
          largepage   Take advantage of 16M pages, which will allow for
                      reduced TLB entries and allow hardware prefetching
                      to be done more efficiently.
          ldbl128     Increase long double size from 64 to 128 bits.
          libansi     Assumes that all functions with the name of an
                      ANSI C library functions are in fact the system functions.
          linedebug   Generates abbreviated line number and source file name
                      information for the debugger.
          list        Produce an object listing; output goes to .lst file.
          listopt     Display the settings of all options; output goes
                      to .lst file.
          longdouble  Increase long double size from 64 to 128 bits.
          longlit     Changes implicit type selection for integer constants in
                      64-bit mode.
          longlong    Allow long long integers.
          macpstr     Allow '\p' as the first character of a string constant
                      which will be replaced by the length in bytes.
          makedep     Creates an output file that contains targets suitable for
                      inclusion in a description file for the AIX make command.
          mbcs        String literals and comments can contain DBCS
                      characters (same as dbcs option).
          mkshrobj    Create a shared object from generated object files.
          noprint     Direct listing to /dev/null.
          nostdinc    Specify which files are included with the #include
                      "file_name" and #include <file_name> directives.
                      If -qnostdinc is specified, the /usr/include directory
                      is not searched.
          optimize    Same as O and O2. Perform optimization that is the
                      mix between speed and size.  (If -qnooptimize is
                      specified, it is equivalent to -qoptimize=0.)
          pascal      Accept and ignore the keyword 'pascal' as a
                      type modifier.
          pdf1, pdf2  Perform aggressive optimizations with profile
                      directed feedback.
          phsinfo     Produce compiler phase information; output goes to
                      stdout.
          proto       Assert that procedure call points agree
                      with their declarations even if the procedure has
                      not been prototyped. This allows the caller to
                      pass floating point arguments in floating point
                      registers instead of general purpose registers.
          report      Adds information to the listing file on the loop
                      transformations that have been carried out.
                      This option requires either -qhot or -qsmp
                      in order to have effect.
          ro          Put string literals in read only area.
          roconst     Put constant values in read only area.
          showinc     Include the source of all included files in the
                      source listing, if the SOURCE option is in effect.
          smallstack  Reduce the size of the stack frame, allowing better use
                      of a limited stack size.
          source      Produce a source listing; output goes to .lst file.
          srcmsg      Reconstruct source lines in error along with the
                      diagnostic messages in the stderr file.
          statsym     Adds user-defined, nonexternal names that have a
                      persistent storage class, such as initialized and
                      uninitialized static variables, to the name list
                      (the symbol table of xcoff objects).  Same as
                      -qsymtab=static.
          strict      Turns off aggressive optimizations which have the
                      potential to alter the semantics of a user's program.
                      This option also sets -qfloat=nofltint:norsqrt.
          strict_induction
                      Turns off induction variable optimizations
                      that have the potential to alter the semantics of a
                      user's program. The default is "nostrict_induction" at
                      -O2 or higher and "strict_induction" otherwise.
                      "nostrict_induction" is recomended if your program does
                      not have overflows or wrap arounds of loop induction
                      variables.
          syntaxonly  Causes the compiler to perform syntax checking without
                      generating an object file.
          threaded    Indicates to the compiler that the program will execute
                      in multi-threaded environment.
          tocmerge    Read from the file specified in -bImportfile linker
                      option and merge the address information to access
                      ranges of external addresses using a single Table Of
                      Content entry.
          upconv      Preserves the unsigned specification when performing
                      integral promotions.
          warn64      Enables checking for possible long-to-integer or
                      pointer-to-integer truncation.
          unwind      Enables stack unwinding.  The optimization prologue
                      tailoring reduces the number of saves and restores
                      of non-volatile registers, but is enabled only when
                      stack unwinding is disabled.
          xcall       Generate code to static routines within a compilation
                      unit as if they were external routines.
          xref        Produce a cross-reference listing containing
                      only referenced names.



          Options with parameters:
          aggrcopy=[no]overlap
                      Asserts whether source and destination of aggregate
                      assignments overlap.
          alias=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
                      allp    Pointers are never aliased.
                      ansi    Pointers can only point to an object of the
                              same type. Require -O option.
                      typ     Pointers to different types are never aliased.
          align=<algnopt>
                      bit_packed
                              Similar to packed, except bit-fields are
                              packed as tightly as possible.
                      full    The compiler uses the RISC System/6000
                              alignment rules. This is the same as power.
                      mac68k  The compiler uses the Macintosh**
                              alignment rules.
                      natural The compiler maps structure members to
                              their natural boundaries.
                      packed  The compiler uses the packed alignment rules.
                      power   The compiler uses the RISC System/6000
                              alignment rules.
                      twobyte The compiler uses the Macintosh alignment rules.
                              The mac68k option is the same as twobyte.
          arch=<option>
                      Specifies the architecture on which the executable
                      program will be run.
                      The available options are:
                      com     Produce an object that contains instructions
                              that will run on all the POWER and PowerPC
                              hardware platforms.
                      pwr     Produce an object that contains instructions
                              that will run on the POWER hardware
                              platform.
                      pwr2    Produce an object that contains instructions
                              that will run on the POWER2 hardware
                              platform.
                      pwrx    Same as pwr2.
                      ppc     Produce an object that contains instructions
                              that will run on any of the 32-bit PowerPC
                              hardware platforms.
                      ppcgr   Produce an object that contains optional
                              graphics instructions for PowerPC processors.
                      pwr2s   Produce an object that contains instructions
                              that will run on a pwr2s chip.
                      p2sc    Produce an object that contains instructions
                              that will run on a p2sc chip.
                      601     Produce an object that contains instructions
                              that will run on a 601 chip.
                      602     Produce an object that contains instructions
                              that will run on a 602 chip.
                      603     Produce an object that contains instructions
                              that will run on a 603 chip.
                      604     Produce an object that contains instructions
                              that will run on a 604 chip.
                      403     Produce an object that contains instructions
                              that will run on a 403 chip.
                      rs64a   Produce an object that contains instructions
                              that will run on a rs64a chip.
                      rs64b   Produce an object that contains instructions
                              that will run on a rs64b chip.
                      rs64c   Produce an object that contains instructions
                              that will run on a rs64c chip.
                      pwr3    Produce an object that contains instructions
                              that will run on a POWER3 chip.
                      pwr4    Produce an object that contains instructions
                              that will run on a POWER4 chip.
                      The default is -qarch=com.  If the -qarch option is
                      specified without the -qtune=<option>, the compiler
                      uses the default -qtune value for the specified
                      architecture. Refer to online documentation to find
                      actual default setting of -qtune  for a given -qarch.
          assert=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      typ     Pointers to different types are never aliased.
                      allp    Pointers are never aliased.
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
          attr        Produce an attribute listing containing only
                      referenced names; output goes to .lst file.
          attr=full   Produce an attribute listing containing all names,
                      whether referenced or not; output goes to .lst file.
          bitfields=signed
          bitfields=unsigned
                      Specify whether bitfields will be signed or unsigned.
          cache=<suboption>:<suboption>...
                      Describe the cache configuration for a specific target
                      execution machine. See online documentation for details.
          chars=signed
          chars=unsigned
                      Specify whether the data type char will be signed
                      or unsigned.
          check=<option>
                      Generate code to check for run-time checks.
                      bounds  Runtime checking of addresses when
                              subscripting within an object of known size.
                      divzero Runtime checking of integer division.
                              A trap will occur if an attempt is made to
                              divide by zero.
                      nullptr Runtime checking of addresses
                              contained in pointer variables used to
                              reference storage.
                      all     Switches on all the above suboptions.
          dataimported=<name1>:<name2>: ...
                      Specify which data items are imported.  If no names are
                      specified, all data items are assumed to be imported.
                      This is the default.
          datalocal=<name1>:<name2>: ...
                      Specify which data items are local.  If no names are
                      specified, all data items are assumed to be local.
          enum=<enumopt>
                      Specify whether minimum-sized enumerated types will be
                      produced or not. <enumopt> can be either small, int,
                      1, 2, 4 or 8.
                      small denotes that either one, two, four or eight (valid
                      in 64-bit mode only) bytes of storage will be allocated
                      for enum variables based on the range of the enum
                      constants.
                      int is the default, and causes enum variables to be
                      treated as though they were of type signed int
                      depending on the range of the enum constants.
                      1 will cause enum variables to be packed into 1 byte.
                      2 will cause enum variables to be packed into 2 bytes.
                      4 will cause enum variables to be packed into 4 bytes.
                      8 will cause enum variables to be packed into 8 bytes.
                        (enum=8 is valid in 64-bit mode only)
          flag=<sev1>
                      Specify severity level of diagnostics to be reported
                      in source listing and stderr; the severity level
                      is one of <i,w,e,s,u>.
          flag=<sev1>:<sev2>
                      Specify severity level of diagnostics to be reported
                      in source listing (<sev1>), and stderr (<sev2>);
                      the severity levels are one of <i,w,e,s,u>.
          float=<opt1>:<opt2>:...:<optN>
                      The available options are:
                      emulate Function calls are emitted in place of
                              PowerPC floating-point instructions.
                              Use this option only in a single-threaded
                              stand-alone environment, targeting the
                              PowerPC 403 processor.
                              Do not use this suboption with any of the
                              following:
                              o  -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                              o  -qlongdouble, -qldbl128
                              o  128-bit long double invocation commands
                      fltint  Specify whether range checking of floating
                              point to integer conversions is done.
                              Default at -O2: -qfloat=nofltint.
                              Default at -O3: -qfloat=fltint.
                      hsflt   Never round single-precision expressions,
                              and don't perform range checking for
                              floating-point to integer conversions.
                      hssngl  Round single-precision expressions only
                              when the results are stored into float memory
                              locations.
                      nans    Detect conversion of single-precision NaNS to
                              double precision call checking.
                      nomaf   Suppress generation of multiply-add
                              instructions.
                      nofold  Suppress compile-time evaluation of constant
                              floating-point expressions.
                      rndsngl Ensure strict adherence to IEEE standard.
                              all operations on single-precision values
                              produce results that remain in single
                              precision.
                      rrm     Specify run-time rounding mode. Compile with
                              this option if the run-time rounding mode
                              is round toward minus infinity, round toward
                              positive infinity, or not known.
                      rsqrt   Specify whether a division by the result of a
                              square root can be replaced with a multiply
                              by the reciprocal of the square root.
                              Default at -O2: -qfloat=norsqrt.
                              Default at -O3: -qfloat=rsqrt.
                      spnans  Generate extra instructions to detect signaling
                              NaN on conversion from single precision to
                              double precision.  Obsolete; use the equivalent
                              -qfloat=nans option.
          flttrap=<opt1>:<opt2>:...:<optN>
                      Generate instructions to detect and trap floating-point.
                      The available options are:  overflow, underflow,
                      zerodivide, invalid, inexact, enable, imprecise.
          halt=<sev>  Stop compiler after first phase if severity of errors
                      detected equals or exceeds <sev>; the severity
                      level is one of i, w, e, s, u.
          genproto=<parmnames>
                      Produces ANSI prototypes from K&R function definitions.
          hot=<suboption>
                      Determines whether or not to perform high-order
                      transformations on loops and array language during
                      optimization, and whether or not to pad array dimensions
                      and data objects to avoid cache misses. Suboptions
                      include:
                        arraypad   - The compiler will pad any arrays where it
                                     infers there may be a benefit.  Make sure
                                     that you have not used equivalence
                                     association for any arrays in files
                                     compiled with this option as the compiler
                                     does not perform any checking before
                                     padding arrays.
                        arraypad=n - The compiler will pad every array in the
                                     code.  The pad amount must be a positive
                                     integer value.
                        novector   - The compiler will avoid replacing code by
                                     calls to vector library routines.
                        vector     - Allows the compiler to optimize by
                                     replacing code with calls to vector
                                     library routines.
          ignprag=<option>
                      The available options are:
                      disjoint
                              Ignore pragma disjoint.
                      isolated
                              Ignore pragma isolated_call.
                      omp     Ignore OpenMP parallel processing pragmas.
                      ibm     Ignore IBM parallel processing pragmas.
                      all     Ignore all the above pragmas.
          info
          info=all
                      Produce additional lint-like messages.  For C, it turns
                      on all diagnostic messages for all groups.  For C++, it
                      turns on all diagnostic messages for all groups, except
                      ppt.
          info=<group>
                      Produce additional lint-like messages based on <group>.
                      c99     Code that might behave differently between
                              C89 and C99 language levels
                      cls     Possible problems with generation of classes
                      cmp     Possible redundancies in unsigned comparisons
                      cnd     Possible redundancies or problems in conditional
                              expressions
                      cns     Operations involving constants.
                      cnv     Conversions
                      dcl     Consistency of declarations
                      eff     Statements with no effect
                      enu     Consistency of enum variables
                      ext     Unused external definitions
                      gen     General diagnostic messages
                      gnr     Generation of temporary variables
                      got     Use of goto statements
                      ini     Possible problems with initialization
                      inl     Functions not inlined
                      lan     Language level effects
                      obs     Obsolete features
                      ord     Unspecified order of evaluation
                      par     Unused parameters
                      por     Nonportable language constructs
                      ppc     Possible problems with using the preprocessor
                      ppt     Trace of preprocessor actions
                      private Lists shared variables made private to a
                              parallel loop.
                      pro     Missing function prototypes
                      rea     Code that cannot be reached
                      reduction
                              Lists all variables that are recognized as
                              reduction variables inside a parallel loop.
                      ret     Consistency of return statements
                      trd     Possible truncation or loss of data or precision
                      tru     Variable names truncated by the compiler
                      trx     Hexadecimal floating-point constants that cannot
                              be represented exactly in its evaluation format
                      uni     Unitialized variables
                      use     Unused auto and static variables
          initauto=<hh>
                      Initialialize automatic storage to <hh>. <hh> is a
                      hexadecimal value.  This generates extra code and
                      should only be used for error determination.
          inline[=<x>]
                      This is functionally equivalent to the -Q option.
          ipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                      Enhances -O optimization by doing detailed analysis
                      across procedures.  One of -O, -O2, or -O3 is required
                      when using -qipa.  Regular expressions are supported
                      when specifying <procedure_names> on the -qipa=exits,
                      -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                      -qipa=safe and -qipa=unknown suboptions.
                      Suboptions include:
                        exits=<procedure_names>
                                   - Specifies a selected set of procedures
                                     which always end the program.
                        inline=<inline-options>
                          The "ipa=inline=" command can take a colon-separated
                          list of inline options, which are as follows:
                            inline={auto|noauto}
                                        - Specifies whether or not to
                                          automatically inline expansion.
                            inline=<procedure_names>
                                        - Specifies a comma-separated list of
                                          procedures to try to inline.
                            inline=limit=<num>
                                        - Changes the size limits that deter-
                                          mine how much inline expansion to do.
                                          <num> is the optimizer's approximation
                                          of the number of bytes of code which
                                          will be generated.
                            inline=threshold=<num>
                                        - Specifies the upper size limit on
                                          procedures to inline.  <num> is
                                          defined as for inline=limit.
                        isolated=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not directly refer to any global
                                     variable.
                        level=<level>
                                   - Determines the amount of IPA analysis
                                     and optimization performed:
                                       0 = Does only minimal interprocedural
                                           analysis and optimization.
                                       1 = Turns on inlining, limited alias
                                           analysis, and limited call-site
                                           tailoring.
                                       2 = Full interprocedural data flow and
                                           alias analysis.
                        list=[filename|short|long]
                                   - Specifies an output listing file name
                                     during the link phase, in the event that
                                     an object listing has been requested
                                     using the -qlist option.  The default
                                     name is "a.lst".  The suboptions short and
                                     long determine which listing sections will
                                     be included.
                        lowfreq=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures that are likely to be
                                     called infrequently during the course
                                     of a typical program run.
                        missing={unknown|safe|isolated|pure}
                                   - Specifies the default assumption for
                                     procedures not compiled with -qipa.
                        noinline=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures which are not to be inlined.
                        noobject   - Speeds up compilation, but the object
                                     files cannot be used in non-IPA
                                     compilations.  This option is ignored if
                                     -S has been specified.
                        partition={small|medium|large}
                                   - Specifies the size of program sections
                                     that are analyzed together.  Larger
                                     partitions may produce better analysis but
                                     require more storage.
                        pure=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that are "isolated", "safe", and do not
                                     modify any data objects that are visible
                                     to the caller.
                        safe=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not call any other part of the
                                     program.
                        stdexits   - Specifies that compiler-defined exit
                                     routines can be optimized as with the
                                     "exits" suboption.  The procedures are
                                     abort, exit, _exit, and _assert.
                        nothreads    Single threaded invocation of the compiler
                                     backend.
                        threads      Compiler decides the number of threads
                                     used to invoke the compiler backend.
                        threads=<n>  Up to 'n' threads can be used to invoke
                                     the compiler backend.
                        unknown=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that may update global variables and
                                     dummy arguments and call other parts of
                                     the program compiled with -qipa.
                        The following options are intended for use by the
                        link-time phase of -qipa:
                        -qlibansi  - Assumes that all functions with the name
                                     of an ANSI C defined library function are,
                                     in fact, the library functions.
                                     -qnolibansi is the default.
                        -qlibessl  - Assumes that all functions with the name
                                     of an ESSL defined library functions are,
                                     in fact, the library functions.
                                     -qnolibessl is the default.
                        -qlibposix - Assumes that all functions with the name
                                     of a POSIX 1003.1 defined library function
                                     are, in fact, the system functions.
                                     -qnolibposix is the default.
          isolated_call=<name1>:<name2>: ...
                      Specify that the calls to the functions listed have no
                      side effects. <name1> and <name2> are function names.
                      The user may specify as many function names as
                      necessary.
          keyword=<keywords>
                      Enables the use of specific keywords.
          langlvl={<langlvl>|<feature>}[:<langlvl>|<feature>]...
                      Specify language level and/or features to be enabled
                      during compilation.
                      <langlvl>
                              can be extc89, stdc89, extc99, stdc99,
                              ansi, saal2, saa, extended, or classic.
                      <feature>
                              can be:
                              [no]ucs   enables or disables support for
                                        universal character names.
          maxerr=<num>[:<sev>]
                      Instructs the compiler to halt compilation when <num>
                      errors of <sev> or greater severity is reached.  The
                      default for <sev> is current value of the -qhalt option.
          maxmem=<num>
                      Limit the amount of memory used by space intensive
                      optimizations to <num>.  <num> specified in kilobytes.
          optimize=<level>
                      Enables different levels of optimization.
                      2       Same as -O and -qoptimize.
                      3       Same as -O3. Aggressive optimization.
                      4       Same as -O4. Internally generates -O3 -qipa
                              with automatic architecture and tuning option
                              generation.
                      5       Same as -O5. Internally generates -O3
                              -qipa=level=2 with automatic architecture and
                              tuning option generation.
          procimported=<name1>:<name2>: ...
                      Specify which functions are imported.  If no filenames
                      are specified, all invoked functions are assumed to be
                      defined outside the current file.  The last explicit
                      specification for a function takes precedence.
          proclocal=<name1>:<name2>: ...
                      Specify which functions are local.
                      If no filenames are specified, all invoked functions
                      are assumed to be defined within the current file.
                      The last explicit specification for a function takes
                      precedence.
          procunknown=<name1>:<name2>: ...
                      Specify which functions are unknown to be local or
                      imported.  If no filenames are specified, all functions
                      called are assumed to be unknown. This is the default
                      when no user options are specified. The last explicit
                      specification for a function takes precedence.
          profile=<option>
                      Sets up the object files produced by the compiler for
                      profiling.
                      The available options are:
                      ibm     Generate profiling support code for use with the
                              Performance Analysis tool in VisualAge C++.
                      p       Generate profiling support code.  Same as -p.
                      pg      Generate profiling support code including BSD
                              profiling support.  Same as -pq.
          smp[=suboption[:suboption] [ ... ]]
                      Controls acceptance of OpenMP directives and
                      automatic parallelization.  The auto and omp suboptions
                      are opposites. i.e. -qsmp=omp means strict adherance
                      to the OpenMP standard with no automatic parallelization.
                      [no]auto
                              Enables or disables automatic parallelization.
                      [no]explicit
                              Enables or disables explicit parallelization.
                      [no]opt
                              Turns off the implied optimization to allow
                              simpler debugging.
                      schedule=<sched_type>[=n]
                              Specifies what kind of scheduling algorithms
                              and chunking are used for loops to which no
                              other scheduling algorithm has been explicitly
                              assigned in the source code.
                              Valid options for <sched_type> are:
                                         * dynamic[=n]
                                         * guided[=n]
                                         * static[=n]
                                         * affinity[=n]
                                         * runtime
                              For more information, see online documentation.
                      [no]nested_par
                              Enables or disables parallelization of nested
                              parallel constructs.
                      [no]rec_locks
                              Specifies whether recursive or regular locks
                              should be used to implement critical sections.
                      [no]omp Enables or disables strict OpenMP mode.
          spill=<size>
                      Specify the size of the register allocation spill area.
          suppress=<msg_num>:<msg_num>...
                      Suppress compiler messages.
          nosuppress
                      Don't suppress compiler messages.
          symtab=<options>
                      Controls symbol table.
                      The available options are:
                      unref   Specifies that all typedef declarations, struct,
                              union, and enum type definitions are included
                              for processing by the debugger.  Same as
                              -qdbxextra.
                      static  Adds user-defined, nonexternal names that have a
                              persistent storage class, such as initialized
                              and uninitialized static variables, to the name
                              list (the symbol table of xcoff objects).  Same
                              as -qstatsym.
          tabsize=<size>
                      Changes the length of tabs in your source file.
          tbtable=<option>
                      Generate a traceback table for each function and
                      place it in the text segment at the end of the
                      function code.
                      The available options are:
                      none    No traceback table is generated.
                      full    A full traceback table is generated.
                              This is the default with -g specified.
                      small   A traceback table is generated with no name or
                              parameter information.
                              This is the default when -g is NOT specified.
          tune=<option>
                      Specifies the architecture system for which the
                      executable program is optimized.
                      The available options are:
                      403     Produce an object optimized for all the
                              PowerPC 403 processors.
                              Use -qfloat=emulate to emulate the floating-point
                              instructions omitted by the 403 processor.
                      601     Produce an object optimized for all the
                              PowerPC 601 processors.
                      602     Produce an object optimized for all the
                              PowerPC 602 processors.
                      603     Produce an object optimized for all the
                              PowerPC 603 processors.
                      604     Produce an object optimized for all the
                              PowerPC 604 processors.
                      p2sc    Produce an object optimized for all the
                              p2sc processors.
                      pwr     Produce an object optimized for the POWER
                              hardware platform.
                      pwr2    Produce an object optimized for the
                              POWER2 hardware platform.
                      pwr2s   Produce an object optimized for the
                              POWER2 hardware platform, avoiding certain
                              quadruple-precision instructions that would
                              slow program performance.
                      pwrx    Same as pwr2.
                      rs64a   Produce an object optimized for the rs64a
                              processor.
                      rs64b   Produce an object optimized for the rs64b
                              processor.
                      rs64c   Produce an object optimized for the rs64c
                              processor.
                      pwr3    Produce an object optimized for the POWER3
                              processor.
                      pwr4    Produce an object optimized for the POWER4
                              processor.
          unroll={yes|no|auto}
                      yes     Hint for the compiler to try to unroll loops.
                      no      Force the compiler not to unroll any loops.
                      auto    Let the compiler decide whether to unroll loops.
          unroll      same as unroll=yes
          nounroll    same as unroll=no
          xref=full   Produce a cross-reference listing containing all names,
                      whether referenced or not; output goes to .lst file.

  Environment Variables
     1.OBJECT_MODE changes the compilation-mode behavior, unless overridden by
                   configuration file or command-line options

        Setting

         not set   32-bit compiler mode.
          32       32-bit compiler mode.
          64       64-bit compiler mode.
         32_64     Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.
        any other  Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.

  For a detailed description of each option, please refer to the online
  documentation.
unlink: /tmp/xlcW0LVswUa
unlink: /tmp/xlcW1LVswUb
unlink: /tmp/xlcW2LVswUc
configure:2499: $? = 249
configure:2501: cc -V </dev/null >&5
/usr/bin/pg /usr/vac/exe/default_msg/vac.help 
  C for AIX Compiler, Version 6

  Usage:
     xlc [ option | inputfile ]...
     cc [ option | inputfile ]...
     c89 [ option | inputfile ]...
     xlc128 [ option | inputfile ]...
     cc128 [ option | inputfile ]...
     xlc_r [ option | inputfile ]...
     cc_r [ option | inputfile ]...
     xlc_r4 [ option | inputfile ]...
     cc_r4 [ option | inputfile ]...
     xlc_r7 [ option | inputfile ]...
     cc_r7 [ option | inputfile ]...

  Description:
     The xlC and related commands compile C and C++ source files.
     They also processes assembler source files and object files. Unless the
     -c option is specified, xlC calls the linkage editor to produce a
     single object file. Input files may be any of the following:
       1. file name with .c suffix: C source file
       2. file name with .i suffix: preprocessed C or C++ source file
       3. file name with .o suffix: object file for ld command
       4. file name with .s suffix: assembler source file
       5. file name with .so suffix: shared object file

  Options:
     Options can be flag options or keyword options:

       1. Flag options:

        -#        Display language processing commands but do
                  not invoke them; output goes to stdout.
        -bdynamic, -bstatic
                  Determines which types of library files are searched by
                  the linkage editor.
        -brtl     Tells the linkage editor to accept both .so and .a
                  library file types.
        -B<prefix>
                  Construct alternate compiler/assembler/linkage editor
                  program names. <prefix> is added to the beginning of
                  the standard program names.
        -c        Do not send object files to the linkage editor.
        -C        Write comments to output when doing preprocessing,
                  used with -E and -P.
        -D<name>[=<def>]
                  Define <name> as in #define directive. If <def> is
                  not specified, 1 is assumed.
        -E        Preprocess but do not compile; output goes to stdout
        -f<filename>
                  Passes to the linkage editor the filename of a file
                  containing a list of input files to be processed.
        -F<x>[:<stanza>]
                  Use alternate configuration file <x> with optional
                  <stanza>. If <stanza> is not specified, the assumed stanza
                  is the name of the command used to invoke the compiler.
        -g        Produce information for the debugger.
        -G        Tells the linkage editor to create a dynamic library.
        -I<dir>   Search in directory <dir> for include files that
                  do not start with an absolute path.
        -l<key>   Search the specified library file,
                  where <key> selects the file lib<key>.a.
        -L<dir>   Search in directory <dir> for files specified by -l<key>.
        -ma       Generate inline calls to the "alloca" function as if
                  "#pragma alloca" directives were in the source file.
        -M        Generate information to be included in a "make"
                  description file; output goes to .u file.
        -o<name>  Name the executable file <name> instead of a.out.
                  When used with the -c option and one source file,
                  name the object file <name> instead of filename.o.
                  If <name> is the name of a directory, files generated by
                  the compiler will be placed into that directory.
        -O        Optimize generated code.
        -O2       Same as -O.
        -O3       Perform some memory and compile time intensive
                  optimizations in addition to those executed with -O2.
                  The -O3 specific optimizations have the potential to
                  alter the semantics of a user's program.
                  The compiler guards against these optimizations at -O2
                  and the option -qstrict is provided at -O3 to turn off
                  these aggressive optimizations.
        -O4       Equivalent to -O3 -qipa with automatic generation of
                  architecture and tuning option ideal for that platform.
        -O5       Equivalent to -O3 -qipa=level=2 with automatic
                  generation of architecture and tuning option ideal for
                  that platform.
        -p        Generate profiling support code.  Same as -qprofile=p.
        -pg       Generate profiling support code including BSD
                  profiling support.  Same as -qprofile=pg.
        -P        Preprocess but do not compile; output goes to .i file.
        -Q<x>, -qinline<x>
                  Inline all appropriate functions where x can be
                  one of the following:
                    !       Not inline any function (equivalent to -qnoinline)
                    =<lc>   Inline if number of source statement in
                            function is less than the number specified
                            in <lc>.
                    -<nm>   Not inline function listed by names in <nm>
                    +<nm>   Attempt to inline function listed by names
                            in <nm>.
        -r        Produce the output file without linking any library.
        -S        Produce a .s file for any source file processed by the
                  compiler.
        -t<x>     Apply prefix from the -B option to the specified program <x>,
                  where x can be one or more of the following:
                    a = assembler
                    b = compiler backend
                    c = compiler frontend
                    i = compiler inliner
                    I = inter-procedural analysis - compile phase
                    l = linkage editor
                    L = inter-procedural analysis - link phase.
                    p = preprocessor
        -U<name>  Undefine name as in #undef directive.
        -v        Displays language processing commands as they
                  are invoked by xlc; output goes to stdout.
        -V        Displays commands as they are invoked by xlC;
                  output goes to stdout.
        -w        Suppress informational, language-level, and
                  warning messages.
        -W<x,y>   Give the options <y> to the compiler program <x>
                  where x can be one or more of the following:
                    <a,b,c,f,I,l,L,p>
        -y<x>     Specify compile-time rounding of constant floating-point
                  expressions, where <x> can be one of the following:
                    m = round toward minus infinity
                    n = round to nearest
                    p = round toward positive infinity
                    z = round toward zero.

       2. Keyword options:

          Keyword options are specified in one of the following ways:

          -q<option>
          -q<option>=<parameter>
          -q<option>=<parameter>:<parameter>

          where <option> is an option name and <parameter> is a
          parameter value.
          Keyword options with no parameters represent switches
          that may be either on or off. The keyword by itself turns
          the switch on, and the keyword preceded by the letters NO
          turns the switch off. For example, -qLIST tells the
          compiler to produce a listing and -qNOLIST tells the
          compiler not to produce a listing. If an option that
          represents a switch is set more than once, the compiler
          uses the last setting.

          Keyword option and parameter names may appear in either
          UPPER CASE or lower case letters in the xlc command.


          Options without parameters:

          32          Selects 32-bit compiler mode.
          64          Selects 64-bit compiler mode.
          ansialias   Use type-based aliasing during optimization.
          compact     Reduce code size where possible, at the expense
                      of execution speed.  Code size is reduced by
                      inhibiting optimizations that replicate or expand
                      code inline.
          cpluscmt    Permit "//" to introduce a comment that lasts
                      until the end of the current source line, as in C++.
          dbcs        String literals and comments can contain DBCS
                      characters (same as mbcs option).
          dbxextra    Generate symbol table information for unreferenced
                      variables. By default such information is not generated
                      thus reducing the size of the executable compiled with
                      the "-g" option.  Same as -qsymtab=unref.
          digraph     Allow special digraph
          dollar      Allow '$' as an identifier character
          dpcl        Generates symbols for tools based on the Dynamic
                      Probe Class Library (DPCL)
          extchk      Perform external name type-checking and function
                      call checking.
          fdpr        Collect information about programs for use with
                      the AIX fdpr (Feedback Directed Program Restructuring)
                      performance-tuning utility.
          flttrap     Generate instructions to trap floating-point
                      exceptions.
          fold        Specifies that constant floating-point expressions
                      are to be evaluated at compile time.
          fullpath    Specifies the path information stored for files when
                      you use "-g" and the symbolic debugger.
          funcsect    Place instructions for each function in a separate csect.
          heapdebug   Enables debug versions of memory management functions.
          hot         Determines whether or not to perform high-order
                      transformations on loops during optimization.
          idirfirst   Specify the search order for files included with
                      the #include "file_name" directive.  Use -qidirfirst
                      with the -Idirectory option.  If -qidirfirst option
                      is specified, the directories specified by the
                      -Idirectory option are searched before the directory
                      where the current file resides.
          ignerrno    Tell the optimizer that the program will never
                      refer to or set errno.  This allows additional
                      optimizations.
          inlglue     Generate fast external linkage by inlining the
                      code (pointer glue code) necessary at calls
                      via a function pointer and calls to external
                      procedures.
          largepage   Take advantage of 16M pages, which will allow for
                      reduced TLB entries and allow hardware prefetching
                      to be done more efficiently.
          ldbl128     Increase long double size from 64 to 128 bits.
          libansi     Assumes that all functions with the name of an
                      ANSI C library functions are in fact the system functions.
          linedebug   Generates abbreviated line number and source file name
                      information for the debugger.
          list        Produce an object listing; output goes to .lst file.
          listopt     Display the settings of all options; output goes
                      to .lst file.
          longdouble  Increase long double size from 64 to 128 bits.
          longlit     Changes implicit type selection for integer constants in
                      64-bit mode.
          longlong    Allow long long integers.
          macpstr     Allow '\p' as the first character of a string constant
                      which will be replaced by the length in bytes.
          makedep     Creates an output file that contains targets suitable for
                      inclusion in a description file for the AIX make command.
          mbcs        String literals and comments can contain DBCS
                      characters (same as dbcs option).
          mkshrobj    Create a shared object from generated object files.
          noprint     Direct listing to /dev/null.
          nostdinc    Specify which files are included with the #include
                      "file_name" and #include <file_name> directives.
                      If -qnostdinc is specified, the /usr/include directory
                      is not searched.
          optimize    Same as O and O2. Perform optimization that is the
                      mix between speed and size.  (If -qnooptimize is
                      specified, it is equivalent to -qoptimize=0.)
          pascal      Accept and ignore the keyword 'pascal' as a
                      type modifier.
          pdf1, pdf2  Perform aggressive optimizations with profile
                      directed feedback.
          phsinfo     Produce compiler phase information; output goes to
                      stdout.
          proto       Assert that procedure call points agree
                      with their declarations even if the procedure has
                      not been prototyped. This allows the caller to
                      pass floating point arguments in floating point
                      registers instead of general purpose registers.
          report      Adds information to the listing file on the loop
                      transformations that have been carried out.
                      This option requires either -qhot or -qsmp
                      in order to have effect.
          ro          Put string literals in read only area.
          roconst     Put constant values in read only area.
          showinc     Include the source of all included files in the
                      source listing, if the SOURCE option is in effect.
          smallstack  Reduce the size of the stack frame, allowing better use
                      of a limited stack size.
          source      Produce a source listing; output goes to .lst file.
          srcmsg      Reconstruct source lines in error along with the
                      diagnostic messages in the stderr file.
          statsym     Adds user-defined, nonexternal names that have a
                      persistent storage class, such as initialized and
                      uninitialized static variables, to the name list
                      (the symbol table of xcoff objects).  Same as
                      -qsymtab=static.
          strict      Turns off aggressive optimizations which have the
                      potential to alter the semantics of a user's program.
                      This option also sets -qfloat=nofltint:norsqrt.
          strict_induction
                      Turns off induction variable optimizations
                      that have the potential to alter the semantics of a
                      user's program. The default is "nostrict_induction" at
                      -O2 or higher and "strict_induction" otherwise.
                      "nostrict_induction" is recomended if your program does
                      not have overflows or wrap arounds of loop induction
                      variables.
          syntaxonly  Causes the compiler to perform syntax checking without
                      generating an object file.
          threaded    Indicates to the compiler that the program will execute
                      in multi-threaded environment.
          tocmerge    Read from the file specified in -bImportfile linker
                      option and merge the address information to access
                      ranges of external addresses using a single Table Of
                      Content entry.
          upconv      Preserves the unsigned specification when performing
                      integral promotions.
          warn64      Enables checking for possible long-to-integer or
                      pointer-to-integer truncation.
          unwind      Enables stack unwinding.  The optimization prologue
                      tailoring reduces the number of saves and restores
                      of non-volatile registers, but is enabled only when
                      stack unwinding is disabled.
          xcall       Generate code to static routines within a compilation
                      unit as if they were external routines.
          xref        Produce a cross-reference listing containing
                      only referenced names.



          Options with parameters:
          aggrcopy=[no]overlap
                      Asserts whether source and destination of aggregate
                      assignments overlap.
          alias=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
                      allp    Pointers are never aliased.
                      ansi    Pointers can only point to an object of the
                              same type. Require -O option.
                      typ     Pointers to different types are never aliased.
          align=<algnopt>
                      bit_packed
                              Similar to packed, except bit-fields are
                              packed as tightly as possible.
                      full    The compiler uses the RISC System/6000
                              alignment rules. This is the same as power.
                      mac68k  The compiler uses the Macintosh**
                              alignment rules.
                      natural The compiler maps structure members to
                              their natural boundaries.
                      packed  The compiler uses the packed alignment rules.
                      power   The compiler uses the RISC System/6000
                              alignment rules.
                      twobyte The compiler uses the Macintosh alignment rules.
                              The mac68k option is the same as twobyte.
          arch=<option>
                      Specifies the architecture on which the executable
                      program will be run.
                      The available options are:
                      com     Produce an object that contains instructions
                              that will run on all the POWER and PowerPC
                              hardware platforms.
                      pwr     Produce an object that contains instructions
                              that will run on the POWER hardware
                              platform.
                      pwr2    Produce an object that contains instructions
                              that will run on the POWER2 hardware
                              platform.
                      pwrx    Same as pwr2.
                      ppc     Produce an object that contains instructions
                              that will run on any of the 32-bit PowerPC
                              hardware platforms.
                      ppcgr   Produce an object that contains optional
                              graphics instructions for PowerPC processors.
                      pwr2s   Produce an object that contains instructions
                              that will run on a pwr2s chip.
                      p2sc    Produce an object that contains instructions
                              that will run on a p2sc chip.
                      601     Produce an object that contains instructions
                              that will run on a 601 chip.
                      602     Produce an object that contains instructions
                              that will run on a 602 chip.
                      603     Produce an object that contains instructions
                              that will run on a 603 chip.
                      604     Produce an object that contains instructions
                              that will run on a 604 chip.
                      403     Produce an object that contains instructions
                              that will run on a 403 chip.
                      rs64a   Produce an object that contains instructions
                              that will run on a rs64a chip.
                      rs64b   Produce an object that contains instructions
                              that will run on a rs64b chip.
                      rs64c   Produce an object that contains instructions
                              that will run on a rs64c chip.
                      pwr3    Produce an object that contains instructions
                              that will run on a POWER3 chip.
                      pwr4    Produce an object that contains instructions
                              that will run on a POWER4 chip.
                      The default is -qarch=com.  If the -qarch option is
                      specified without the -qtune=<option>, the compiler
                      uses the default -qtune value for the specified
                      architecture. Refer to online documentation to find
                      actual default setting of -qtune  for a given -qarch.
          assert=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      typ     Pointers to different types are never aliased.
                      allp    Pointers are never aliased.
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
          attr        Produce an attribute listing containing only
                      referenced names; output goes to .lst file.
          attr=full   Produce an attribute listing containing all names,
                      whether referenced or not; output goes to .lst file.
          bitfields=signed
          bitfields=unsigned
                      Specify whether bitfields will be signed or unsigned.
          cache=<suboption>:<suboption>...
                      Describe the cache configuration for a specific target
                      execution machine. See online documentation for details.
          chars=signed
          chars=unsigned
                      Specify whether the data type char will be signed
                      or unsigned.
          check=<option>
                      Generate code to check for run-time checks.
                      bounds  Runtime checking of addresses when
                              subscripting within an object of known size.
                      divzero Runtime checking of integer division.
                              A trap will occur if an attempt is made to
                              divide by zero.
                      nullptr Runtime checking of addresses
                              contained in pointer variables used to
                              reference storage.
                      all     Switches on all the above suboptions.
          dataimported=<name1>:<name2>: ...
                      Specify which data items are imported.  If no names are
                      specified, all data items are assumed to be imported.
                      This is the default.
          datalocal=<name1>:<name2>: ...
                      Specify which data items are local.  If no names are
                      specified, all data items are assumed to be local.
          enum=<enumopt>
                      Specify whether minimum-sized enumerated types will be
                      produced or not. <enumopt> can be either small, int,
                      1, 2, 4 or 8.
                      small denotes that either one, two, four or eight (valid
                      in 64-bit mode only) bytes of storage will be allocated
                      for enum variables based on the range of the enum
                      constants.
                      int is the default, and causes enum variables to be
                      treated as though they were of type signed int
                      depending on the range of the enum constants.
                      1 will cause enum variables to be packed into 1 byte.
                      2 will cause enum variables to be packed into 2 bytes.
                      4 will cause enum variables to be packed into 4 bytes.
                      8 will cause enum variables to be packed into 8 bytes.
                        (enum=8 is valid in 64-bit mode only)
          flag=<sev1>
                      Specify severity level of diagnostics to be reported
                      in source listing and stderr; the severity level
                      is one of <i,w,e,s,u>.
          flag=<sev1>:<sev2>
                      Specify severity level of diagnostics to be reported
                      in source listing (<sev1>), and stderr (<sev2>);
                      the severity levels are one of <i,w,e,s,u>.
          float=<opt1>:<opt2>:...:<optN>
                      The available options are:
                      emulate Function calls are emitted in place of
                              PowerPC floating-point instructions.
                              Use this option only in a single-threaded
                              stand-alone environment, targeting the
                              PowerPC 403 processor.
                              Do not use this suboption with any of the
                              following:
                              o  -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                              o  -qlongdouble, -qldbl128
                              o  128-bit long double invocation commands
                      fltint  Specify whether range checking of floating
                              point to integer conversions is done.
                              Default at -O2: -qfloat=nofltint.
                              Default at -O3: -qfloat=fltint.
                      hsflt   Never round single-precision expressions,
                              and don't perform range checking for
                              floating-point to integer conversions.
                      hssngl  Round single-precision expressions only
                              when the results are stored into float memory
                              locations.
                      nans    Detect conversion of single-precision NaNS to
                              double precision call checking.
                      nomaf   Suppress generation of multiply-add
                              instructions.
                      nofold  Suppress compile-time evaluation of constant
                              floating-point expressions.
                      rndsngl Ensure strict adherence to IEEE standard.
                              all operations on single-precision values
                              produce results that remain in single
                              precision.
                      rrm     Specify run-time rounding mode. Compile with
                              this option if the run-time rounding mode
                              is round toward minus infinity, round toward
                              positive infinity, or not known.
                      rsqrt   Specify whether a division by the result of a
                              square root can be replaced with a multiply
                              by the reciprocal of the square root.
                              Default at -O2: -qfloat=norsqrt.
                              Default at -O3: -qfloat=rsqrt.
                      spnans  Generate extra instructions to detect signaling
                              NaN on conversion from single precision to
                              double precision.  Obsolete; use the equivalent
                              -qfloat=nans option.
          flttrap=<opt1>:<opt2>:...:<optN>
                      Generate instructions to detect and trap floating-point.
                      The available options are:  overflow, underflow,
                      zerodivide, invalid, inexact, enable, imprecise.
          halt=<sev>  Stop compiler after first phase if severity of errors
                      detected equals or exceeds <sev>; the severity
                      level is one of i, w, e, s, u.
          genproto=<parmnames>
                      Produces ANSI prototypes from K&R function definitions.
          hot=<suboption>
                      Determines whether or not to perform high-order
                      transformations on loops and array language during
                      optimization, and whether or not to pad array dimensions
                      and data objects to avoid cache misses. Suboptions
                      include:
                        arraypad   - The compiler will pad any arrays where it
                                     infers there may be a benefit.  Make sure
                                     that you have not used equivalence
                                     association for any arrays in files
                                     compiled with this option as the compiler
                                     does not perform any checking before
                                     padding arrays.
                        arraypad=n - The compiler will pad every array in the
                                     code.  The pad amount must be a positive
                                     integer value.
                        novector   - The compiler will avoid replacing code by
                                     calls to vector library routines.
                        vector     - Allows the compiler to optimize by
                                     replacing code with calls to vector
                                     library routines.
          ignprag=<option>
                      The available options are:
                      disjoint
                              Ignore pragma disjoint.
                      isolated
                              Ignore pragma isolated_call.
                      omp     Ignore OpenMP parallel processing pragmas.
                      ibm     Ignore IBM parallel processing pragmas.
                      all     Ignore all the above pragmas.
          info
          info=all
                      Produce additional lint-like messages.  For C, it turns
                      on all diagnostic messages for all groups.  For C++, it
                      turns on all diagnostic messages for all groups, except
                      ppt.
          info=<group>
                      Produce additional lint-like messages based on <group>.
                      c99     Code that might behave differently between
                              C89 and C99 language levels
                      cls     Possible problems with generation of classes
                      cmp     Possible redundancies in unsigned comparisons
                      cnd     Possible redundancies or problems in conditional
                              expressions
                      cns     Operations involving constants.
                      cnv     Conversions
                      dcl     Consistency of declarations
                      eff     Statements with no effect
                      enu     Consistency of enum variables
                      ext     Unused external definitions
                      gen     General diagnostic messages
                      gnr     Generation of temporary variables
                      got     Use of goto statements
                      ini     Possible problems with initialization
                      inl     Functions not inlined
                      lan     Language level effects
                      obs     Obsolete features
                      ord     Unspecified order of evaluation
                      par     Unused parameters
                      por     Nonportable language constructs
                      ppc     Possible problems with using the preprocessor
                      ppt     Trace of preprocessor actions
                      private Lists shared variables made private to a
                              parallel loop.
                      pro     Missing function prototypes
                      rea     Code that cannot be reached
                      reduction
                              Lists all variables that are recognized as
                              reduction variables inside a parallel loop.
                      ret     Consistency of return statements
                      trd     Possible truncation or loss of data or precision
                      tru     Variable names truncated by the compiler
                      trx     Hexadecimal floating-point constants that cannot
                              be represented exactly in its evaluation format
                      uni     Unitialized variables
                      use     Unused auto and static variables
          initauto=<hh>
                      Initialialize automatic storage to <hh>. <hh> is a
                      hexadecimal value.  This generates extra code and
                      should only be used for error determination.
          inline[=<x>]
                      This is functionally equivalent to the -Q option.
          ipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                      Enhances -O optimization by doing detailed analysis
                      across procedures.  One of -O, -O2, or -O3 is required
                      when using -qipa.  Regular expressions are supported
                      when specifying <procedure_names> on the -qipa=exits,
                      -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                      -qipa=safe and -qipa=unknown suboptions.
                      Suboptions include:
                        exits=<procedure_names>
                                   - Specifies a selected set of procedures
                                     which always end the program.
                        inline=<inline-options>
                          The "ipa=inline=" command can take a colon-separated
                          list of inline options, which are as follows:
                            inline={auto|noauto}
                                        - Specifies whether or not to
                                          automatically inline expansion.
                            inline=<procedure_names>
                                        - Specifies a comma-separated list of
                                          procedures to try to inline.
                            inline=limit=<num>
                                        - Changes the size limits that deter-
                                          mine how much inline expansion to do.
                                          <num> is the optimizer's approximation
                                          of the number of bytes of code which
                                          will be generated.
                            inline=threshold=<num>
                                        - Specifies the upper size limit on
                                          procedures to inline.  <num> is
                                          defined as for inline=limit.
                        isolated=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not directly refer to any global
                                     variable.
                        level=<level>
                                   - Determines the amount of IPA analysis
                                     and optimization performed:
                                       0 = Does only minimal interprocedural
                                           analysis and optimization.
                                       1 = Turns on inlining, limited alias
                                           analysis, and limited call-site
                                           tailoring.
                                       2 = Full interprocedural data flow and
                                           alias analysis.
                        list=[filename|short|long]
                                   - Specifies an output listing file name
                                     during the link phase, in the event that
                                     an object listing has been requested
                                     using the -qlist option.  The default
                                     name is "a.lst".  The suboptions short and
                                     long determine which listing sections will
                                     be included.
                        lowfreq=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures that are likely to be
                                     called infrequently during the course
                                     of a typical program run.
                        missing={unknown|safe|isolated|pure}
                                   - Specifies the default assumption for
                                     procedures not compiled with -qipa.
                        noinline=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures which are not to be inlined.
                        noobject   - Speeds up compilation, but the object
                                     files cannot be used in non-IPA
                                     compilations.  This option is ignored if
                                     -S has been specified.
                        partition={small|medium|large}
                                   - Specifies the size of program sections
                                     that are analyzed together.  Larger
                                     partitions may produce better analysis but
                                     require more storage.
                        pure=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that are "isolated", "safe", and do not
                                     modify any data objects that are visible
                                     to the caller.
                        safe=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not call any other part of the
                                     program.
                        stdexits   - Specifies that compiler-defined exit
                                     routines can be optimized as with the
                                     "exits" suboption.  The procedures are
                                     abort, exit, _exit, and _assert.
                        nothreads    Single threaded invocation of the compiler
                                     backend.
                        threads      Compiler decides the number of threads
                                     used to invoke the compiler backend.
                        threads=<n>  Up to 'n' threads can be used to invoke
                                     the compiler backend.
                        unknown=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that may update global variables and
                                     dummy arguments and call other parts of
                                     the program compiled with -qipa.
                        The following options are intended for use by the
                        link-time phase of -qipa:
                        -qlibansi  - Assumes that all functions with the name
                                     of an ANSI C defined library function are,
                                     in fact, the library functions.
                                     -qnolibansi is the default.
                        -qlibessl  - Assumes that all functions with the name
                                     of an ESSL defined library functions are,
                                     in fact, the library functions.
                                     -qnolibessl is the default.
                        -qlibposix - Assumes that all functions with the name
                                     of a POSIX 1003.1 defined library function
                                     are, in fact, the system functions.
                                     -qnolibposix is the default.
          isolated_call=<name1>:<name2>: ...
                      Specify that the calls to the functions listed have no
                      side effects. <name1> and <name2> are function names.
                      The user may specify as many function names as
                      necessary.
          keyword=<keywords>
                      Enables the use of specific keywords.
          langlvl={<langlvl>|<feature>}[:<langlvl>|<feature>]...
                      Specify language level and/or features to be enabled
                      during compilation.
                      <langlvl>
                              can be extc89, stdc89, extc99, stdc99,
                              ansi, saal2, saa, extended, or classic.
                      <feature>
                              can be:
                              [no]ucs   enables or disables support for
                                        universal character names.
          maxerr=<num>[:<sev>]
                      Instructs the compiler to halt compilation when <num>
                      errors of <sev> or greater severity is reached.  The
                      default for <sev> is current value of the -qhalt option.
          maxmem=<num>
                      Limit the amount of memory used by space intensive
                      optimizations to <num>.  <num> specified in kilobytes.
          optimize=<level>
                      Enables different levels of optimization.
                      2       Same as -O and -qoptimize.
                      3       Same as -O3. Aggressive optimization.
                      4       Same as -O4. Internally generates -O3 -qipa
                              with automatic architecture and tuning option
                              generation.
                      5       Same as -O5. Internally generates -O3
                              -qipa=level=2 with automatic architecture and
                              tuning option generation.
          procimported=<name1>:<name2>: ...
                      Specify which functions are imported.  If no filenames
                      are specified, all invoked functions are assumed to be
                      defined outside the current file.  The last explicit
                      specification for a function takes precedence.
          proclocal=<name1>:<name2>: ...
                      Specify which functions are local.
                      If no filenames are specified, all invoked functions
                      are assumed to be defined within the current file.
                      The last explicit specification for a function takes
                      precedence.
          procunknown=<name1>:<name2>: ...
                      Specify which functions are unknown to be local or
                      imported.  If no filenames are specified, all functions
                      called are assumed to be unknown. This is the default
                      when no user options are specified. The last explicit
                      specification for a function takes precedence.
          profile=<option>
                      Sets up the object files produced by the compiler for
                      profiling.
                      The available options are:
                      ibm     Generate profiling support code for use with the
                              Performance Analysis tool in VisualAge C++.
                      p       Generate profiling support code.  Same as -p.
                      pg      Generate profiling support code including BSD
                              profiling support.  Same as -pq.
          smp[=suboption[:suboption] [ ... ]]
                      Controls acceptance of OpenMP directives and
                      automatic parallelization.  The auto and omp suboptions
                      are opposites. i.e. -qsmp=omp means strict adherance
                      to the OpenMP standard with no automatic parallelization.
                      [no]auto
                              Enables or disables automatic parallelization.
                      [no]explicit
                              Enables or disables explicit parallelization.
                      [no]opt
                              Turns off the implied optimization to allow
                              simpler debugging.
                      schedule=<sched_type>[=n]
                              Specifies what kind of scheduling algorithms
                              and chunking are used for loops to which no
                              other scheduling algorithm has been explicitly
                              assigned in the source code.
                              Valid options for <sched_type> are:
                                         * dynamic[=n]
                                         * guided[=n]
                                         * static[=n]
                                         * affinity[=n]
                                         * runtime
                              For more information, see online documentation.
                      [no]nested_par
                              Enables or disables parallelization of nested
                              parallel constructs.
                      [no]rec_locks
                              Specifies whether recursive or regular locks
                              should be used to implement critical sections.
                      [no]omp Enables or disables strict OpenMP mode.
          spill=<size>
                      Specify the size of the register allocation spill area.
          suppress=<msg_num>:<msg_num>...
                      Suppress compiler messages.
          nosuppress
                      Don't suppress compiler messages.
          symtab=<options>
                      Controls symbol table.
                      The available options are:
                      unref   Specifies that all typedef declarations, struct,
                              union, and enum type definitions are included
                              for processing by the debugger.  Same as
                              -qdbxextra.
                      static  Adds user-defined, nonexternal names that have a
                              persistent storage class, such as initialized
                              and uninitialized static variables, to the name
                              list (the symbol table of xcoff objects).  Same
                              as -qstatsym.
          tabsize=<size>
                      Changes the length of tabs in your source file.
          tbtable=<option>
                      Generate a traceback table for each function and
                      place it in the text segment at the end of the
                      function code.
                      The available options are:
                      none    No traceback table is generated.
                      full    A full traceback table is generated.
                              This is the default with -g specified.
                      small   A traceback table is generated with no name or
                              parameter information.
                              This is the default when -g is NOT specified.
          tune=<option>
                      Specifies the architecture system for which the
                      executable program is optimized.
                      The available options are:
                      403     Produce an object optimized for all the
                              PowerPC 403 processors.
                              Use -qfloat=emulate to emulate the floating-point
                              instructions omitted by the 403 processor.
                      601     Produce an object optimized for all the
                              PowerPC 601 processors.
                      602     Produce an object optimized for all the
                              PowerPC 602 processors.
                      603     Produce an object optimized for all the
                              PowerPC 603 processors.
                      604     Produce an object optimized for all the
                              PowerPC 604 processors.
                      p2sc    Produce an object optimized for all the
                              p2sc processors.
                      pwr     Produce an object optimized for the POWER
                              hardware platform.
                      pwr2    Produce an object optimized for the
                              POWER2 hardware platform.
                      pwr2s   Produce an object optimized for the
                              POWER2 hardware platform, avoiding certain
                              quadruple-precision instructions that would
                              slow program performance.
                      pwrx    Same as pwr2.
                      rs64a   Produce an object optimized for the rs64a
                              processor.
                      rs64b   Produce an object optimized for the rs64b
                              processor.
                      rs64c   Produce an object optimized for the rs64c
                              processor.
                      pwr3    Produce an object optimized for the POWER3
                              processor.
                      pwr4    Produce an object optimized for the POWER4
                              processor.
          unroll={yes|no|auto}
                      yes     Hint for the compiler to try to unroll loops.
                      no      Force the compiler not to unroll any loops.
                      auto    Let the compiler decide whether to unroll loops.
          unroll      same as unroll=yes
          nounroll    same as unroll=no
          xref=full   Produce a cross-reference listing containing all names,
                      whether referenced or not; output goes to .lst file.

  Environment Variables
     1.OBJECT_MODE changes the compilation-mode behavior, unless overridden by
                   configuration file or command-line options

        Setting

         not set   32-bit compiler mode.
          32       32-bit compiler mode.
          64       64-bit compiler mode.
         32_64     Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.
        any other  Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.

  For a detailed description of each option, please refer to the online
  documentation.
rm /tmp/xlcW0LZsxaa
rm /tmp/xlcW1L_sxab
rm /tmp/xlcW2L_sxac
configure:2504: $? = 249
configure:2527: checking for C compiler default output file name
configure:2530: cc  -DNDEBUG  conftest.c  >&5
configure:2533: $? = 0
configure:2579: result: a.out
configure:2584: checking whether the C compiler works
configure:2590: ./a.out
configure:2593: $? = 0
configure:2610: result: yes
configure:2617: checking whether we are cross compiling
configure:2619: result: no
configure:2622: checking for suffix of executables
configure:2624: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:2627: $? = 0
configure:2652: result: 
configure:2658: checking for suffix of object files
configure:2679: cc -c  -DNDEBUG conftest.c >&5
configure:2682: $? = 0
configure:2704: result: o
configure:2708: checking whether we are using the GNU C compiler
configure:2732: cc -c  -DNDEBUG conftest.c >&5
"conftest.c", line 19.14: 1506-275 (S) Unexpected text me encountered.
"conftest.c", line 19.8: 1506-045 (S) Undeclared identifier choke.
configure:2738: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| 
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define GLIB_MAJOR_VERSION 1
| #define GLIB_MINOR_VERSION 2
| #define GLIB_MICRO_VERSION 8
| #define GLIB_INTERFACE_AGE 8
| #define GLIB_BINARY_AGE 8
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:2763: result: no
configure:2769: checking whether cc accepts -g
configure:2790: cc -c -g -DNDEBUG conftest.c >&5
configure:2796: $? = 0
configure:2799: test -z 			 || test ! -s conftest.err
configure:2802: $? = 0
configure:2805: test -s conftest.o
configure:2808: $? = 0
configure:2819: result: yes
configure:2836: checking for cc option to accept ANSI C
configure:2906: cc  -c  -DNDEBUG conftest.c >&5
configure:2912: $? = 0
configure:2915: test -z 			 || test ! -s conftest.err
configure:2918: $? = 0
configure:2921: test -s conftest.o
configure:2924: $? = 0
configure:2942: result: none needed
configure:2960: cc -c  -DNDEBUG conftest.c >&5
"conftest.c", line 2.3: 1506-166 (S) Definition of function choke requires parentheses.
"conftest.c", line 2.9: 1506-046 (S) Syntax error.
configure:2966: $? = 1
configure: failed program was:
| #ifndef __cplusplus
|   choke me
| #endif
configure:3098: checking dependency style of cc
configure:3181: result: none
configure:3198: checking for a sed that does not truncate output
configure:3252: result: /usr/bin/sed
configure:3255: checking for egrep
configure:3265: result: grep -E
configure:3314: checking for non-GNU ld
configure:3348: result: ld
configure:3357: checking if the linker (ld) is GNU ld
configure:3372: result: no
configure:3377: checking for ld option to reload object files
configure:3384: result: -r
configure:3393: checking for BSD-compatible nm
configure:3435: result: /usr/bin/nm -B
configure:3439: checking whether ln -s works
configure:3443: result: yes
configure:3450: checking how to recognise dependent libraries
configure:3624: result: pass_all
configure:3837: checking how to run the C preprocessor
configure:3872: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:3878: $? = 0
configure:3910: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
"conftest.c", line 14.10: 1506-296 (S) #include file <ac_nonexistent.h> not found.
configure:3916: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| 
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define GLIB_MAJOR_VERSION 1
| #define GLIB_MINOR_VERSION 2
| #define GLIB_MICRO_VERSION 8
| #define GLIB_INTERFACE_AGE 8
| #define GLIB_BINARY_AGE 8
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:3955: result: cc -E
configure:3979: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:3985: $? = 0
configure:4017: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
"conftest.c", line 14.10: 1506-296 (S) #include file <ac_nonexistent.h> not found.
configure:4023: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| 
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define GLIB_MAJOR_VERSION 1
| #define GLIB_MINOR_VERSION 2
| #define GLIB_MICRO_VERSION 8
| #define GLIB_INTERFACE_AGE 8
| #define GLIB_BINARY_AGE 8
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4067: checking for ANSI C header files
configure:4092: cc -c  -DNDEBUG conftest.c >&5
configure:4098: $? = 0
configure:4101: test -z 			 || test ! -s conftest.err
configure:4104: $? = 0
configure:4107: test -s conftest.o
configure:4110: $? = 0
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:4199: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:4202: $? = 0
configure:4204: ./conftest
configure:4207: $? = 0
configure:4222: result: yes
configure:4246: checking for sys/types.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for sys/stat.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for stdlib.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for string.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for memory.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for strings.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for inttypes.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4246: checking for stdint.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
"conftest.c", line 57.10: 1506-296 (S) #include file <stdint.h> not found.
configure:4268: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| 
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define GLIB_MAJOR_VERSION 1
| #define GLIB_MINOR_VERSION 2
| #define GLIB_MICRO_VERSION 8
| #define GLIB_INTERFACE_AGE 8
| #define GLIB_BINARY_AGE 8
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #if HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #if HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #if STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # if HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #if HAVE_STRING_H
| # if !STDC_HEADERS && HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #if HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #if HAVE_INTTYPES_H
| # include <inttypes.h>
| #else
| # if HAVE_STDINT_H
| #  include <stdint.h>
| # endif
| #endif
| #if HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <stdint.h>
configure:4291: result: no
configure:4246: checking for unistd.h
configure:4262: cc -c  -DNDEBUG conftest.c >&5
configure:4268: $? = 0
configure:4271: test -z 			 || test ! -s conftest.err
configure:4274: $? = 0
configure:4277: test -s conftest.o
configure:4280: $? = 0
configure:4291: result: yes
configure:4317: checking dlfcn.h usability
configure:4329: cc -c  -DNDEBUG conftest.c >&5
configure:4335: $? = 0
configure:4338: test -z 			 || test ! -s conftest.err
configure:4341: $? = 0
configure:4344: test -s conftest.o
configure:4347: $? = 0
configure:4357: result: yes
configure:4361: checking dlfcn.h presence
configure:4371: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:4377: $? = 0
configure:4397: result: yes
configure:4432: checking for dlfcn.h
configure:4439: result: yes
configure:4504: checking for g++
configure:4520: found /usr/bin/g++
configure:4530: result: g++
configure:4546: checking for C++ compiler version
configure:4549: g++ --version </dev/null >&5
2.9-aix51-020209
configure:4552: $? = 0
configure:4554: g++ -v </dev/null >&5
Reading specs from /usr/bin/../lib/gcc-lib/powerpc-ibm-aix5.1.0.0/2.9-aix51-020209/specs
gcc version 2.9-aix51-020209
configure:4557: $? = 0
configure:4559: g++ -V </dev/null >&5
g++: argument to `-V' missing

configure:4562: $? = 1
configure:4565: checking whether we are using the GNU C++ compiler
configure:4589: g++ -c  -DNDEBUG conftest.cc >&5
configure:4595: $? = 0
configure:4598: test -z 			 || test ! -s conftest.err
configure:4601: $? = 0
configure:4604: test -s conftest.o
configure:4607: $? = 0
configure:4620: result: yes
configure:4626: checking whether g++ accepts -g
configure:4647: g++ -c -g -DNDEBUG conftest.cc >&5
configure:4653: $? = 0
configure:4656: test -z 			 || test ! -s conftest.err
configure:4659: $? = 0
configure:4662: test -s conftest.o
configure:4665: $? = 0
configure:4676: result: yes
configure:4718: g++ -c  -DNDEBUG conftest.cc >&5
configure:4724: $? = 0
configure:4727: test -z 			 || test ! -s conftest.err
configure:4730: $? = 0
configure:4733: test -s conftest.o
configure:4736: $? = 0
configure:4762: g++ -c  -DNDEBUG conftest.cc >&5
configure:4768: $? = 0
configure:4771: test -z 			 || test ! -s conftest.err
configure:4774: $? = 0
configure:4777: test -s conftest.o
configure:4780: $? = 0
configure:4805: checking dependency style of g++
configure:4888: result: none
configure:4910: checking how to run the C++ preprocessor
configure:4941: g++ -E -DNDEBUG conftest.cc
configure:4947: $? = 0
configure:4979: g++ -E -DNDEBUG conftest.cc
conftest.cc:24: ac_nonexistent.h: No such file or directory
configure:4985: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| 
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define GLIB_MAJOR_VERSION 1
| #define GLIB_MINOR_VERSION 2
| #define GLIB_MICRO_VERSION 8
| #define GLIB_INTERFACE_AGE 8
| #define GLIB_BINARY_AGE 8
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_DLFCN_H 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5024: result: g++ -E
configure:5048: g++ -E -DNDEBUG conftest.cc
configure:5054: $? = 0
configure:5086: g++ -E -DNDEBUG conftest.cc
conftest.cc:24: ac_nonexistent.h: No such file or directory
configure:5092: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| 
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define GLIB_MAJOR_VERSION 1
| #define GLIB_MINOR_VERSION 2
| #define GLIB_MICRO_VERSION 8
| #define GLIB_INTERFACE_AGE 8
| #define GLIB_BINARY_AGE 8
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_DLFCN_H 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5187: checking for g77
configure:5216: result: no
configure:5187: checking for f77
configure:5203: found /usr/bin/f77
configure:5213: result: f77
configure:5228: checking for Fortran 77 compiler version
configure:5231: f77 --version </dev/null >&5
f77: 1501-216 command option -version is not recognized - passed to ld
  XL Fortran for AIX

 Usage:
    xlf       [ option | file ] ...
    f77       [ option | file ] ...
    fort77    [ option | file ] ...
    xlf90     [ option | file ] ...
    xlf_r     [ option | file ] ...
    xlf90_r   [ option | file ] ...
    xlf_r7    [ option | file ] ...
    xlf90_r7  [ option | file ] ...
    xlf95     [ option | file ] ...
    xlf95_r   [ option | file ] ...
    xlf95_r7  [ option | file ] ...

 Description:
   The xlf, f77, fort77, xlf90, xlf_r, xlf90_r, xlf_r7, xlf90_r7, xlf95,
   xlf95_r and xlf95_r7 invocation commands compile XL Fortran source files.
   They also process assembler source files and object files. Unless you
   specify the -c option, these commands call the linkage editor to produce
   a single object file. The name of an input file indicates the type of file,
   as follows:
     -.f suffix: Fortran source file
     -.o or .a suffix: object file for ld command
     -.s suffix: assembler source file
     -.F suffix: Fortran source file with cpp preprocessor directives

   The main difference between these commands is that they use different
   default options (which are set in the configuration file /etc/xlf.cfg).
   See the XL Fortran User's Guide for more information on these invocation
   commands.

 Options:
   You can select compiler behavior by using compiler options on the
   command line.

   For a detailed description of each option, see the XL Fortran User's Guide.

   Options can be one or more of the following:

     1. flag options:

       -#        Displays verbose information on the compiler's progress
                 without invoking anything.
       -1        Executes DO loops at least once, if reached.
       -B<prefix>
                 Constructs alternate names for preprocessor, compiler,
                 assembler, linkage editor and other components.  <prefix>
                 is added to the beginning of the standard program names.
       -b64      The option is only available on AIX 4.3 and above.  In 64-bit
                 mode, the -b64 linker option is used to instruct the ld
                 command to bind with 64-bit objects.
       -bdynamic This option is only available on AIX 4.2 and above.  It is
                 used to control the processing of -l options and the way
                 that shared objects are processed.  When this option, the
                 default, is in effect, shared objects are linked dynamically.
                 See also -bstatic.
       -bhalt:<error_level>
                 Specifies the maximum error level for linker (ld) command
                 processing to continue.  The default value is 4, as specified
                 in the configuration file.
       -bloadmap:<name>
                 Requests that a log of linker actions and messages be saved
                 in file <name>.
       -bmaxdata:<bytes>
                 Specifies the maximum amount of space to reserve for the
                 program data segment for programs where the size of these
                 regions is a constraint.
       -bmaxstack:<bytes>
                 Specifies the maximum amount of space to reserve for the
                 program stack segment for programs where the size of these
                 regions is a constraint.
       -brtl     This option is only available on AIX 4.2 and above.  It
                 determines which algorithm will be used to find libraries
                 (specified with the -l option).  If -brtl is specified,
                 run-time linking is enabled.
       -bshared  Synonymous with -bdynamic.
       -bstatic  This option is only available on AIX 4.2 and above.  It is
                 used to control the processing of -l options and the way
                 that shared objects are processed.  Shared objects are
                 statically linked into the output file.  See also -bdynamic.
       -C        Performs run-time checking of array bounds and character
                 substring expressions.
       -c        Compile only; do not call the linkage editor.
       -D        Compiles lines of fixed source form Fortran code that have
                 a D in column 1.
       -d        Leaves temporary files produced by cpp, instead of deleting
                 them.
       -F[<x>][:<stanza>]
                 Uses alternative configuration file <x> and/or stanza
                 <stanza>.
       -g        Produces debug information.
       -I<dir>   Searches in directory <dir> for INCLUDE files that
                 do not start with an absolute path, and for the .mod
                 files of any modules used.
       -k        States that Fortran code is in free source form input format.
       -L<dir>   Searches in directory <dir> for files specified by -l<key>.
       -l<key>   Search the specified library file,
                 where <key> selects the file lib<key>.a.
       -N<x><num>
                 Specifies internal program storage areas where <x> can be S
                 and <num> is used to calculate the size of the areas.
       -O        Optimizes code generated by the compiler.
       -O0       Performs no optimizations. (It is the same as -qnoopt.)
       -O2       Optimizes code (this is the same as -O).
       -O3       Performs the -O level optimizations and performs additional
                 optimizations that are memory or compile time intensive.
       -O4       Aggressively optimizes the source program, trading off
                 additional compile time for potential improvements in the
                 generated code.  This option implies the following options:
                 -qarch=auto -qtune=auto -qcache=auto -qhot -qipa.
       -O5       Same as -O4, but also implies the -qipa=level=2 option.
       -o<name>  Names the executable file <name> instead of a.out.
       -P        Invokes the -Pv preprocessor before the compiler.
       -Pv       Invokes the -Pv preprocessor before the compiler.
       -Pk       Invokes the -Pk preprocessor before the compiler.
       -P!       Invokes the -Pv preprocessor only.
       -Pv!      Invokes the -Pv preprocessor only.
       -Pk!      Invokes the -Pk preprocessor only.
       -p        Generates simple profiling support code.
       -pg       Generates profiling support code.  Provides more extensive
                 profiling than -p.
       -Q        Inlines all appropriate subprograms.
       -Q<x>     Inlines specified subprograms where <x> can be one of
                 the following:
                   !        = Do not inline.
                   -<names> = Do not inline the list of subprograms, <names>.
                   +<names> = Inline the list of subprograms, <names>.
       -S        Produces one or more .s files, showing equivalent assembler
                 source for each Fortran source file.
       -t<x>     Applies prefix from the -B option to the specified program
                 <x>, where <x> can be one or more of the following:
                 Component           -t Mnemonic     Standard Program Name
                 C preprocessor            F                   cpp
                 VAST-2 preprocessor       p                   fpp
                 KAP preprocessor          p                   fppk
                 compiler front end        c                   xlfentry
                 loop optimizer            h                   xlfhot
                 IPA processor             I (upper case i)    ipa
                 assembler                 a                   as
                 code generator            b                   xlfcode
                 linker                    l (lower case L)    ld
                 -S disassembler           d                   dis
                 binder                    z                   bolt
       -U        Suppresses lowercase folding of Fortran code.
       -u        Specifies undefined (no) implicit data typing.
       -V        Displays verbose information on the compiler's progress in
                 shell-executable format.
       -v        Displays verbose information on the compiler's progress.
       -W<x>,<option1>[,<option2>[, ... [,<optionN>] ... ]]
                 Sends options to component <x> that is executed during
                 compilation.  The suboptions are defined as <x> for -t<x>.
       -w        Suppresses informational, language-level, and warning
                 messages.
       -y<x>     Specifies compile-time rounding of constant floating-point
                 expressions, where <x> can be one of the following:
                   n = Round to nearest.  This is the default.
                   m = Round toward minus infinity.
                   p = Round toward positive infinity.
                   z = Round toward zero.

     2. other options:

        Other options may be on/off or have suboptions and are specified in
        one of two ways:

        i)  -q<option>
           where <option> is an on/off switch such that, if x is the
           option, -qx turns the option on, and -qnox turns the
           option off.  For example, -qsource tells the compiler
           to produce a source listing, and -qnosource tells the compiler
           not to produce a source listing.

           The following override the initial compiler settings:

       -q32          Indicates the compilation bit mode, and together with
                     the -qarch option, determines the target machine that a
                     32-bit executable will run on.
       -q64          Indicates the compilation bit mode, and together with
                     the -qarch option, determines the target machine that a
                     64-bit executable will run on.
       -qattr        Produces attribute listing (only referenced names).
       -qcclines     Enables recognition of conditional compilation lines.
                     Note that -qcclines is the default if the -qsmp=omp
                     option is specified.
       -qcheck       The long form of the -C option.
       -qcompact     Reduces optimizations that increase code size.
       -qctyplss     Indicates that character constant expressions are
                     treated as Hollerith constants.
       -qdbg         The long form of the -g option.
       -qddim        Indicates that dimension declarators for pointees
                     can contain variable names for dynamic dimensioning.
       -qdlines      The long form of the -D option.
       -qdpc         Promotes basic floating-point constants to
                     double precision.
       -qdpcl        Generates symbols that tools based on the
                     Dynamic Probe Class Library (DPCL) API can use
                     to see the structure of an executable file.
       -qessl        Specifies that, if either -lessl or -lesslsmp are also
                     specified, then Engineering and Scientific Subroutine
                     Library (ESSL) routines should be used in place of some
                     Fortran 90 intrinsic procedures when there is a safe
                     opportunity to do so.
       -qextchk      Performs procedure interface checking as well as
                     detection of mismatched common blocks.
       -qextname     Suffixes an underscore to all external names
                     (except for main program names).
       -qfdpr        Instruments object files with information needed for
                     the AIX fdpr (Feedback Directed Program Restructuring)
                     performance-tuning utility to optimize the resulting
                     executable file.
       -qfixed       States that Fortran code is in fixed format.
       -qfree        States that Fortran code is in Fortran 90 free form.
       -qfullpath    Generates absolute source and include file names for
                     debugging.
       -qhot         Determines whether or not to perform high-order
                     transformations on loops during optimization.
       -qinitauto    Initializes each byte of storage for automatic
                     variables to zero.
       -qintlog      Allows mixture of INTEGER and LOGICAL values in
                     expressions and statements.
       -qkeepparm    Prevents flushing of the register, even if it could
                     improve performance.
       -qlibansi     See -qlibansi linktime option under -qipa.
       -qlibessl     See -qlibessl linktime option under -qipa.
       -qlibposix    See -qlibposix linktime option under -qipa.
       -qlist        Produces object listing.
       -qlistopt     Prints settings of all options in listing.
       -qlog4        Logical expressions that have a LOGICAL result are
                     of type LOGICAL(4).
       -qmbcs        Indicates that character or Hollerith constants, H edit
                     or character string edit descriptors can contain Multi-
                     Byte Character Set (MBCS) or Unicode characters.
       -qmixed       The long form of the -U option.
       -qnocclines   Turns off recognition of conditional compilation lines.
                     Note that -qnocclines is the default if the -qsmp=omp
                     option is not specified.
       -qnodirective Turns off all previously specified directive identifiers.
       -qnoescape    Specifies that the backslash is treated as the backslash
                     character, as opposed to an escape character, in character
                     strings, Hollerith constants, H edit descriptors, and
                     character string edit descriptors.
       -qnolm        Disables license management.
       -qnoobj       Suppresses production of an object file.
       -qnoprint     Directs listing to /dev/null.
       -qnosave      Sets the storage class of local variables to
                     AUTOMATIC.
       -qnoswapomp   Specifies that the compiler should not substitute the XL
                     Fortran versions of OpenMP routines.
       -qnounroll    Disables unrolling of DO loops.
       -qnozerosize  Improves performance of some programs by preventing
                     checking for zero-sized character strings and arrays.
       -qnullterm    Character constant actual arguments are null terminated.
       -qonetrip     The long form of the -1 option.
       -qoptimize    The long form of the -O option.
       -qpdf1        Produces an object that is instrumented to collect
                     run-time execution information.  This is phase 1 of the
                     profile-directed feedback optimization process.
       -qpdf2        Tunes application performance using the data generated
                     by running a program compiled with -qpdf1.  This is
                     phase 2 of the profile-directed feedback optimization
                     process.
       -qphsinfo     Displays phase information on the screen.
       -qqcount      Interprets both extended precision and character
                     count Q edit descriptors.
       -qrecur       Not recommended.  Allows recursive subprograms.
       -qreport      Produces a loop transformation listing.
       -qsaa         Performs SAA Fortran flagging.
       -qsave        Sets the default storage class for local variables to
                     STATIC.
       -qsigtrap     Installs xl__trce trap handler in a main program.
       -qsmp         Indicates that code should be produced for an SMP system.
                     All directives with the trigger constants SMP$, $OMP, and
                     IBMP are recognized.
       -qsource      Produces source listing.
       -qstrict      Ensures that optimizations done by the -O3 option
                     do not alter the semantics of a program.
       -qstrictieeemod
                     Causes the compiler to adhere to the Fortran 2000 IEEE
                     arithmetic rules for the ieee_arithmetic and
                     ieee_exceptions intrinsic modules. Using this option
                     can result in a slower executable.
                     -noqstrictieeemod relaxes these rules.
       -qstrict_induction
                     Prevents the compiler from performing induction
                     (loop counter) variable optimizations that could
                     alter the semantics of a program.
       -qthreaded    The compiler must ensure that all internally-generated
                     temporaries have automatic storage (thread-safe).
       -qundef       The long form of the -u Option.
       -qunroll      Allows the compiler to perform loop unrolling
                     optimizations, but the compiler is not required to do so.
       -qunwind      Preserves the default behavior for saves and restores
                     to volatile registers during a procedure call.
                     -noqunwind rearranges subprograms to minimize saves and
                     restores to volatile registers.
       -qwarn64      Aids in porting code from a 32-bit environment to a
                     64-bit environment by detecting the truncation of an
                     8 byte integer to 4 bytes.  Statements which may cause
                     problems will be identified through informational
                     messages.
       -qxflag=oldtab
                     For fixed-form programs, interprets a tab in
                     columns 1 to 5 as a single character.  This option
                     exists for compatibility with XL Fortran Version 1.
       -qxflag=xalias
                     Obsolete.  Replaced with -qalias=nostd.  See the
                     -qalias option.
       -qxlines      Compiles lines of fixed source form Fortran code that
                     have a X in column 1.
       -qxref        Produces cross-reference listing (only referenced names).

       ii)  -q<option>=<suboption>
            -q<option>=<suboption1>:<suboption2>:...:<suboptionN>
            where <option> is assigned a specific suboption value or list
            of suboption values as follows:

       -q64=<suboption>
                     Indicates that a 64-bit object file will be generated.
                       largetype   - The object file will use the new 64-bit
                                     Large Data Type (LDT) ABI.  This object
                                     file may only be used on versions of AIX
                                     greater than or equal to 5.0.
                       nolargetype - The object file will use the old 64-bit
                                     non-LDT ABI.  This object file may only
                                     be used on versions of AIX less than 5.0.
       -qalias=<suboption>
                     Indicates whether a program contains certain
                     categories of aliasing, to determine whether
                     certain optimizations are performed.  Suboptions include:
                       aryovrlp   - Program contains array assignments of
                                    overlapping or storage-associated arrays.
                                    This is the default.
                       noaryovrlp - Program does not contain array
                                    assignments of overlapping or
                                    storage-associated arrays; can produce
                                    significant performance improvements for
                                    array language.
                       intptr     - Program contains integer pointer
                                    declarations.
                       nointptr   - Program does not contain integer pointer
                                    declarations.
                       pteovrlp   - Program contains pointee variables that
                                    refer to non-pointee variables or two
                                    pointee variables that refer to the same
                                    storage location.
                       nopteovrlp - Program does not contain pointee variables
                                    that refer to non-pointee variables or two
                                    pointee variables that refer to the same
                                    storage location.
                       std        - Program contains only standard-conforming
                                    aliasing.
                       nostd      - Program contains some non-standard
                                    aliasing.
       -qalign=<suboption>
                     Specifies the alignment of data objects in storage,
                     to avoid performance problems with misaligned data.
                     Suboptions include:
                       4k             -  Indicates that large arrays and
                                         structures (at least 4096 bytes in
                                         size) will be aligned on a 4K
                                         (4096-byte or page) boundary.  Use
                                         of this option may help to improve
                                         the performance of programs using
                                         data striping.
                       no4k           -  Indicates not to align large data
                                         objects on page (4k) boundary.
                       struct=natural -  Objects of a derived type
                                         declared using a STRUCTURE
                                         declaration are stored such that
                                         each component of each element is
                                         stored on its natural alignment
                                         boundary, unless storage association
                                         requires otherwise.
                       struct=packed  -  Objects of a derived type
                                         declared using a STRUCTURE
                                         declaration are stored with no space
                                         between components, other than any
                                         padding represented by %FILL
                                         components.
                       struct=port    -  Storage padding is the same as
                                         described above for the
                                         struct=natural suboption, except that
                                         the alignment of components of type
                                         complex is the same as the alignment
                                         of components of type real of the
                                         same kind; and that the padding
                                         inserted to align members of a union
                                         map is affected: The number of pad
                                         bytes inserted to align each union
                                         map member varies with the natural
                                         alignment boundary of each member.
                                         In natural alignment mode, the number
                                         of pad bytes is the same for each
                                         union map member, and is determined
                                         by the most strictly aligned member
                                         of the union.
       -qarch=<suboption>
                     Specifies what types of RISC systems the application
                     program may be executed on.  Suboptions include:
                       auto       - Automatically detects the specific
                                    architecture of the compiling machine.
                                    It assumes that the execution environment
                                    will be the same as the compilation
                                    environment.
                       com        - Produces an object that contains
                                    instructions that run on all POWER,
                                    and PowerPC hardware platforms.
                                    This is the default.
                       p2sc       - The executable file can be executed on
                                    any POWER2 Super Chip hardware platform.
                       ppc        - Produces an object that contains
                                    instructions that run on any of the
                                    32-bit PowerPC hardware platforms.  If
                                    -q64 has been specified, then the target
                                    platform will be 64-bit PowerPC.
                       pwr        - Produces an object that contains
                                    instructions that run on any of the
                                    POWER or POWER2 hardware platforms.
                       pwr2s      - The executable file can be executed on
                                    any desktop implementation of the POWER2
                                    chip.
                       pwr2/pwrx  - Produces an object that contains
                                    instructions that run on the POWER2
                                    hardware platforms.
                       pwr3       - Produces an object that contains
                                    instructions that run on the POWER3
                                    hardware platforms.
                       pwr4       - Produces an object that contains
                                    instructions that run on the POWER4
                                    hardware platforms.
                       rs64a      - Produces an object that contains
                                    instructions that run on an RS64I
                                    hardware platform.
                       rs64b      - Produces an object that contains
                                    instructions that run on an RS64II
                                    hardware platform.
                       601        - Produces an object that contains
                                    instructions that run on PowerPC 601
                                    systems.
                       603        - Produces an object that contains
                                    instructions that run on PowerPC 603
                                    systems.
                       604        - Produces an object that contains
                                    instructions that run on PowerPC 604
                                    systems.
       -qassert=<suboption> ...
                     Provides information about the program to help fine-tune
                     optimizations.  Suboptions include:
                     nodeps      - No loops contain any loop-carried
                                   dependencies.
                     itercnt=<n> - The iteration count of a typical loop is
                     <n>.
       -qattr=full   Produces attribute listing (all names, whether
                     referenced or not).
       -qautodbl=<setting>
                     Allows programs to perform REAL(4) calculations
                     using longer data types and the full speed
                     and precision of the POWER and POWER2 floating-point
                     hardware.  Settings include:
                       none       - Does not promote or pad any objects that
                                    share storage.  This is the default.
                       dbl4       - Promotes floating-point objects that are
                                    single precision or are composed of such
                                    objects.
                       dbl8       - Promotes floating-point objects that are
                                    double precision or are composed of such
                                    objects.
                       dbl        - Combines the promotions done by dbl4 and
                                    dbl8.
                       dblpad4    - Performs the same promotions as dbl4,
                                    and also pads objects of other types
                                    (except CHARACTER) if they could
                                    possibly share storage with promoted
                                    objects.
                       dblpad8    - Performs the same promotions as dbl8,
                                    and also pads objects of other types
                                    (except CHARACTER) if they could
                                    possibly share storage with promoted
                                    objects.
                       dblpad     - Combines the promotions done by dblpad4
                                    and dblpad8, and also pads objects of
                                    other types (except CHARACTER) if they
                                    could possibly share storage with
                                    promoted objects.
       -qcache=<subopt1>=<val1>[:<subopt2>=<val2>[:...:<suboptN>=<valN>]]
                     Specifies the cache configuration for a specific
                     execution machine.  Suboptions include:
                       assoc=<num> - Specifies the set associativity of
                                     the cache:
                                       1   = Fully associative cache.
                                       n>1 = n-way set-associative cache.
                       auto        - Automatically detects the specific cache
                                     configuration of the compiling machine.
                                     It assumes that the execution environment
                                     will be the same as the compilation
                                     environment.
                       cost=<cycles>
                                   - Specifies the performance penalty
                                     resulting from a cache miss.
                       level=<level>
                                   - Specifies which level of cache is
                                     affected:
                                       1 = Basic cache.
                                       2 = Level-2 cache, or the table
                                           lookaside buffer (TLB) if the
                                           machine has no level-2 cache.
                                       3 = TLB, in a machine that does
                                           have a level-2 cache.
                       line=<bytes>
                                   - Specifies the line size of the cache.
                       size=<Kbytes>
                                   - Specifies the total size of the cache.
                       type=<type> - Specifies the type of cache that the
                                     settings apply to:
                                       C or c = Combined data and instruction
                                                cache.
                                       D or d = Data cache.
                                       I or i = Instruction cache.
       -qcharlen=<num>
                     Obsolete.  It is still accepted but has no effect.
                     Specifies maximum length for character data items.
       -qci=<num1>[:<num2>[: ... [:<numn>] ... ]]
                     Specifies identification numbers (from 1 to 255)
                     of conditional includes.
       -qctyplss=<suboption>
                     arg   - This suboption provides the same behaviour as
                             the -qctyplss option with no suboptions, with
                             the exception that if a Hollerith constant is
                             used as an actual argument, it is passed to the
                             procedure as if it were an integer actual
                             argument.
                     noarg - This suboption provides the same behaviour as
                             the -qctyplss option with no suboptions.
       -qdirective=<string1>[:<string2>[: ... [:<stringn>] ... ]]
                     Specifies target strings to be recognized in a comment
                     directive.  When compiling using -qsmp,
                     -qdirective=smp$:$omp:ibmp is turned on by default.
       -qdpc=e       All single-precision constants, including constants
                     with an e exponent, are treated as double-precision
                     constants.
       -qessl        Specifies that Engineering and (ESSL) routines should be
                     used in place of some Fortran 90 intrinsic procedures
                     when there is a safe opportunity to do so.
       -qextern=<name1>[:<name2>[: ... [:<namen>] ...]]
                     Specifies the names of subprograms that are to be
                     treated by the compiler as if they appear in EXTERNAL
                     statements.
       -qfixed=<num> States that Fortran code is in fixed source form, and
                     optionally specifies the maximum line length.
       -qflag=<sev1>:<sev2>
                     Specifies severity level of diagnostics to be reported
                     in listing, <sev1>, and on screen, <sev2>.  Severity
                     levels include:
                       I - Informational messages.
                       L - Language-level messages.
                       W - Warning messages.
                       E - Error messages.
                       S - Severe error messages.
                       U - Unrecoverable error messages.
                     Note that both <sev1> and <sev2> must be specified.
       -qfloat=<suboption1>[:<suboption2>[:...:<suboptionN>]]
                     Specifies various floating-point suboptions.
                     Suboptions include:
                       fltint       - For floating-point to integer conversion,
                                      uses faster inline code, which does not
                                      check for overflow.
                       hsflt        - Never rounds single-precision
                                      expressions, and doesn't perform range
                                      checking for floating-point to integer
                                      conversions.
                       hssngl       - Rounds single-precision expressions only
                                      when the results are stored into REAL(4)
                                      memory locations.
                       nans         - Detects operations involving signaling
                                      NaN values.
                       nofold       - Suppresses compile-time evaluation
                                      of constant floating-point expressions.
                       nomaf        - Suppresses generation of multiply-add
                                      instructions.
                       nostrictnmaf - Allows the compiler to perform
                                      optimizations that introduce
                                      multiply-add operations that do not
                                      preserve the sign of a zero value.
                       rndsngl      - Ensures strict adherence to IEEE
                                      standard.  That is, all operations on
                                      single-precision values produce results
                                      that remain in single precision.
                       rrm          - Specifies run-time rounding mode.
                                      Compile with this option if the run-time
                                      rounding mode is round toward minus
                                      infinity, round toward positive infinity,
                                      or not known.
                       rsqrt        - Changes a division by the result of a
                                      square root operation into a multiply
                                      by the reciprocal of the square root.
                       strictnmaf   - Ensures that the compiler does not
                                      perform optimizations that introduce
                                      multiply-add operations that do not
                                      preserve the sign of a zero value.
       -qflttrap=<suboption1>[:<suboption2>[:...:<suboptionN>]]
                     Determines what types of floating-point exception
                     conditions to detect at run time.  The program receives
                     a SIGTRAP signal when the corresponding exception occurs,
                     provided exception-checking is enabled. Suboptions
                     include:
                       overflow   - Detect and trap on floating-point overflow.
                       underflow  - Detect and trap on floating-point
                                    underflow.
                       zerodivide - Detect and trap on floating-point division
                                    by zero.
                       invalid    - Detect and trap on floating-point invalid
                                    operations.
                       inexact    - Detect and trap on floating-point inexact.
                       enable     - Turn on checking for the specified
                                    exceptions in the main program.
                       imprecise  - Only check for the specified exceptions
                                    on subprogram entry and exit.
       -qfree=<suboption>
                     States that Fortran code is in either F90 or IBM
                     free format.  <name> can be one of:
                       ibm   -  IBM free format.
                       f90   -  Fortran 90 free format.
       -qhalt=<sev>  Stops compiler after first phase if severity of errors
                     detected equals or exceeds <sev>, where <sev> is
                     defined as for the -qflag option with the exception of:
                       Q - A severity level that can never be generated by
                           any defined error condition.  Specifying it
                           prevents the compiler from halting even if it
                           encounters unrecoverable errors.
       -qhot=<suboption>
                     Determines whether or not to perform high-order
                     transformations on loops and array language during
                     optimization, and whether or not to pad array dimensions
                     and data objects to avoid cache misses. Suboptions
                     include:
                       arraypad   - The compiler will pad any arrays where it
                                    infers there may be a benefit.  Make sure
                                    that you have not used equivalence
                                    association for any arrays in files
                                    compiled with this option as the compiler
                                    does not perform any checking before
                                    padding arrays.
                       arraypad=n - The compiler will pad every array in the
                                    code.  The pad amount must be a positive
                                    integer value.
                       novector   - The compiler will avoid replacing code by
                                    calls to vector library routines.
                       vector     - Allows the compiler to optimize by
                                    replacing code with calls to vector
                                    library routines.
       -qieee=<suboption>
                     Specifies the rounding mode for the compiler to use when
                     evaluating constant floating-point expressions at compile
                     time.  <suboption> is one of:
                       Near  -  Round to nearest representable number.  This
                                is the default.
                       Minus -  Round toward minus infinity.
                       Plus  -  Round toward plus infinity.
                       Zero  -  Round toward zero.
       -qinit=f90ptr Sets the initial values of pointers to null, and makes
                     their association status disassociated instead of
                     undefined.
       -qinitauto[=<hex_value>]
                     Initializes each byte or word of storage for automatic
                     variables to a specific value (typically 00 or FF),
                     to help locate variables that are referenced before
                     being defined.
       -qintsize=<bytes>
                     Sets the size of default INTEGER and LOGICAL values.
       -qipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                     Enhances -O optimization by doing detailed analysis
                     across procedures.  One of -O, -O2, or -O3 is required
                     when using -qipa.  Regular expressions are supported
                     when specifying <procedure_names> on the -qipa=exits,
                     -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                     -qipa=safe and -qipa=unknown suboptions.
                     Suboptions include:
                       exits=<procedure_names>
                                  - Specifies a selected set of procedures
                                    which always end the program.
                       inline=<inline-options>
                         The "ipa=inline=" command can take a colon-separated
                         list of inline options, which are as follows:
                           inline={auto|noauto}
                                       - Specifies whether or not to
                                         automatically inline expansion.
                           inline=<procedure_names>
                                       - Specifies a comma-separated list of
                                         procedures to try to inline.
                           inline=limit=<num>
                                       - Changes the size limits that deter-
                                         mine how much inline expansion to do.
                                         <num> is the optimizer's approximation
                                         of the number of bytes of code which
                                         will be generated.
                           inline=threshold=<num>
                                       - Specifies the upper size limit on
                                         procedures to inline.  <num> is
                                         defined as for inline=limit.
                       isolated=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that do not directly refer to any global
                                    variable.
                       level=<level>
                                  - Determines the amount of IPA analysis
                                    and optimization performed:
                                      0 = Does only minimal interprocedural
                                          analysis and optimization.
                                      1 = Turns on inlining, limited alias
                                          analysis, and limited call-site
                                          tailoring.
                                      2 = Full interprocedural data flow and
                                          alias analysis.
                       list=[filename|short|long]
                                  - Specifies an output listing file name
                                    during the link phase, in the event that
                                    an object listing has been requested
                                    using the -qlist option.  The default
                                    name is "a.lst".  The suboptions short and
                                    long determine which listing sections will
                                    be included.
                       lowfreq=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures that are likely to be
                                    called infrequently during the course
                                    of a typical program run.
                       missing={unknown|safe|isolated|pure}
                                  - Specifies the default assumption for
                                    procedures not compiled with -qipa.
                       noinline=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures which are not to be inlined.
                       noobject   - Speeds up compilation, but the object
                                    files cannot be used in non-IPA
                                    compilations.  This option is ignored if
                                    -S has been specified.
                       partition={small|medium|large}
                                  - Specifies the size of program sections
                                    that are analyzed together.  Larger
                                    partitions may produce better analysis but
                                    require more storage.
                       pure=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that are "isolated", "safe", and do not
                                    modify any data objects that are visible
                                    to the caller.
                       safe=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that do not call any other part of the
                                    program.
                       stdexits   - Specifies that compiler-defined exit
                                    routines can be optimized as with the
                                    "exits" suboption.  The procedures are
                                    abort, exit, _exit, and _assert.
                       nothreads   - Don't run parallel processes. Equivalent to
                                     running one serial process.
                       threads[=N] - Run as many parallel processes as are
                                     available, or N processes.  N must be a
                                     positive integer.
                       unknown=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that may update global variables and
                                    dummy arguments and call other parts of
                                    the program compiled with -qipa.
                       The following options are intended for use by the
                       link-time phase of -qipa:
                       -qlibansi  - Assumes that all functions with the name
                                    of an ANSI C defined library function are,
                                    in fact, the library functions.
                                    -qnolibansi is the default.
                       -qlibessl  - Assumes that all functions with the name
                                    of an ESSL defined library functions are,
                                    in fact, the library functions.
                                    -qnolibessl is the default.
                       -qlibposix - Assumes that all functions with the name
                                    of a POSIX 1003.1 defined library function
                                    are, in fact, the system functions.
                                    -qnolibposix is the default.
       -qlanglvl=<suboption>
                     Determines which language standard (or superset or
                     subset of a standard) to check against for nonconformance.
                     Suboptions include:
                       77std      - Accepts the language specified by the
                                    ANSI F77 standard.
                       90std      - Accepts the language specified by the
                                    ISO F90 standard.
                       90pure     - Same as 90std, except that it reports
                                    errors for any obsolescent Fortran 90
                                    features used.
                       90ext      - Obsolete suboption that is equivalent
                                    to extended.
                       95std      - Accepts the language specified by the
                                    ISO F95 standard.
                       95pure     - Same as 95std, except that it also
                                    reports errors for any obsolescent
                                    Fortran 95 features used.
                       extended   - Accepts the full Fortran 95 language
                                    standard plus all extensions,
                                    effectively turning off language-
                                    level checking.
       -qlargepage   Indicates that a program, designed to execute in a large
                     page memory environment, can take advantage of large
                     16 MB pages provided on POWER4 or better CPUs.
       -qmaxmem=<num>
                     Limits the amount of memory used by space intensive
                     optimizations to <num> kilobytes, where <num> is
                     a positive integer.  The special <num> value -1
                     may also be used to indicate unlimited memory.
       -qmoddir=<directory>
                     Specifies the location for any .mod files that
                     the compiler writes.
       -qport=<suboption>
                     This option offers small semantic changes to aid in
                     porting from other compilers.  For each suboption x,
                     there is a corresponding suboption nox, in which the
                     semantic change is not performed.  Suboptions include:
                       hexint - When a typeless constant hex string is passed
                                to the INT intrinsic, it is treated as an
                                integer value.  The behaviour without this
                                suboption specified (or with nohexint
                                specified) is to implicitly convert it to a
                                real value.
                       mod    - When two arguments of different kinds are
                                passed to the MOD intrinsic, the argument with
                                the smaller kind is converted to the same kind
                                as the argument with the larger kind.  The
                                behaviour without this suboption specified
                                (or with nomod specified) is to report an error
                                in this situation.
                       typestmt - The TYPE statement is supported and behaves in
                                a similar way to the PRINT statement. The
                                behaviour without this suboption specified
                                (or with notypestmt specified) is to not support
                                the TYPE statement.
       -qposition=<suboption1>[:<suboption2>]
                     Positions the file pointer at the end of the file when
                     data is written after an OPEN statement with no
                     POSITION= specifier, and the corresponding STATUS=
                     value is specified.  Suboptions include appendold and
                     appendunknown.
       -qrealsize=<bytes>
                     Sets the size of the default REAL, DOUBLE PRECISION,
                     COMPLEX and DOUBLE COMPLEX values.  The allowed values
                     for <bytes> are 4 and 8.
       -qreport=<suboption> ...
                     Produces one or more reports about how the program is
                     parallelized and how loops are optimized.  Suboptions
                     include:
                       hotlist - Produces a report showing how loops are
                                 transformed.
                       smplist - Produces a report showing how the program is
                                 parallelized.
       -qsave=<suboption>
                     Specifies the default storage class for local variables.
                     Suboptions include:
                       all         - The default storage class for all local
                                     variables is STATIC.  Specifying this
                                     suboption is the same as specifying the
                                     -qsave option without any suboptions.
                       defaultinit - The default storage class is STATIC for
                                     local variables of derived type that have
                                     default initialization specified.  For
                                     all other local variables, the default
                                     storage class is AUTOMATIC.
       -qsclk=[centi | micro]
                     -qsclk=centi uses centisecond resolution for values
                     returned from the SYSTEM_CLOCK intrinsic procedure.
                     This is the default.
                     -qsclk=micro uses microsecond resolution.
       -qsigtrap=<trap_handler>
                     Installs a user-written trap handler in a main program.
       -qsmallstack  Minimizes stack usage, where possible.
                     The default is -qnosmallstack.
       -qsmp=<suboptions>
                     Specifies that code should be produced for an SMP system.
                     Suboptions include:
                       nested_par    - Prescriptive nested parallel constructs
                                       are parallelized by the compiler.
                       noauto        - Automatic parallelization is turned off.
                       noopt         - The compiler will not optimize SMP
                                       constructs.
                       norec_locks   - Recursive locks will not be used to
                                       implement critical sections.
                       omp           - If you specify this, the compiler
                                       enforces compliance with the OpenMP
                                       Fortran API.
                       opt           - The compiler will optimize SMP
                                       constructs.
                       rec_locks     - Recursive locks will be used to
                                       implement critical sections.
                       schedule=<suboptions>
                                     - The schedule suboption takes
                                       subsuboptions.  For their descriptions
                                       please see the User's Guide:
                                         affinity[=n]
                                         dynamic[=n]
                                         guided[=n]
                                         runtime
                                         static[=n]
                                         threshold[=n]
       -qspillsize=<bytes>
                     The long form of -NS.  See the -N Option.
       -qsuffix=<option>=<suffix>
                     Specifies the source-file suffix on the command line
                     instead of in the .cfg file.  Options include:
                       f=<suffix>  - Where <suffix> represents the new
                                     source-file-suffix.
                       o=<suffix>  - Where <suffix> represents the new
                                     object-file-suffix.
                       s=<suffix>  - Where <suffix> represents the new
                                     assemble-source-file-suffix.
                       cpp=<suffix>- Where <suffix> represents the new
                                     preprocessed-source-file-suffix.
       -qsuppress=<nnnn-mmm>[:nnnn-mmm ...]
                     Suppresses generation in the output stream and in the
                     listing file of the compiler message(s) indicated.
                     Where <nnnn-mmm> is a 7 digit compiler message number.
       -qtbtable={none | small | full}
                     Specifies how much traceback information to include in
                     object files, which can reduce file size but limit
                     debugging and profiling.
       -qtune=<option>
                     Specifies the architecture on which the executable
                     program is optimized.  Suboptions include:
                       601        - Produces an object optimized for all
                                    the PowerPC 601 processors.
                       603        - Produces an object optimized for all
                                    the PowerPC 603 processors.
                       604        - Produces an object optimized for all
                                    the PowerPC 604 processors.
                       auto       - Automatically detects the specific
                                    processor type of the compiling machine.
                       pwr        - Produces an object optimized for the
                                    POWER hardware platforms.
                       p2sc       - The optimizations are tuned for the
                                    POWER2 Super Chip.
                       pwr2/pwrx  - Produces an object optimized for the
                                    POWER2 hardware platforms.
                       pwr2s      - Produces an object optimized for a
                                    subset of POWER2 hardware platforms,
                                    the desktop models with narrow memory
                                    bandwidth.
                       pwr3       - Produces an object optimized for the
                                    POWER3 hardware platforms.
                       pwr4       - Produces an object optimized for the
                                    POWER4 hardware platforms.
                       rs64a      - Produces an object optimized for the
                                    PowerPC RS64I processor.
                       rs64b      - Produces an object optimized for the
                                    PowerPC RS64II processor.
       -qxlf77=<settings>
                     Provides backward compatibility with the XL Fortran
                     language from previous versions, for aspects of
                     language semantics and I/O data format that have changed.
                     Suboptions include:
                       noblankpad - Produces conversion errors when reading
                                    from an internal or direct-access file
                                    if the format requires more characters
                                    than the record contains.
                       gedit77    - Uses FORTRAN 77 semantics for the output
                                    of REAL objects with the G edit descriptor.
                       intarg     - Converts all the integer arguments of
                                    an intrinsic procedure to the kind of
                                    the longest argument, if they are of
                                    different kinds.
                       intxor     - Treats .XOR. as a logical binary intrinsic
                                    operator rather than a defined operator.
                       noleadzero - Does not produce a leading zero in real
                                    output under the D, E, F and Q edit
                                    descriptors.
                       oldboz     - Turns blanks into zeros for data read by
                                    B, O, and Z edit descriptors, regardless
                                    of the BLANK= specifier or any BN or BZ
                                    control edit descriptors.
                       persistent - Saves the addresses of arguments to
                                    subprograms with ENTRY statements in
                                    static storage, for compatibility with
                                    XL Fortran Version 2.
                       softeof    - Allows READ and WRITE operations when a
                                    unit is positioned after its endfile
                                    record, unless that position is the result
                                    of executing an ENDFILE statement.
       -qxlf90=<settings>
                     Provides backward compatibility with the Fortran 90
                     standard for certain aspects of the language.
                     Suboptions include:
                       signedzero  - Determines how the SIGN(A,B) function
                                     handles signed real 0.0. In addition,
                                     determines  whether negative internal
                                     values will be prefixed with a minus
                                     when formatted output would produce
                                     a negative sign zero.
                       autodealloc - Determines whether the compiler
                                     deallocates allocatable arrays
                                     that are declared locally
                                     without either the SAVE or the
                                     STATIC  attribute, and have a
                                     status of currently allocated
                                     when the supbrogram terminates.
       -qxref=full   Produce cross-reference listing (all names, whether
                     referenced or not).

  For a detailed description of each option, please refer to the
  XL Fortran for AIX User's Guide.

configure:5234: $? = 249
configure:5236: f77 -v </dev/null >&5
exec: pg(pg,/usr/lpp/xlf/bin/default_msg/xlf.help,NULL) 
  XL Fortran for AIX

 Usage:
    xlf       [ option | file ] ...
    f77       [ option | file ] ...
    fort77    [ option | file ] ...
    xlf90     [ option | file ] ...
    xlf_r     [ option | file ] ...
    xlf90_r   [ option | file ] ...
    xlf_r7    [ option | file ] ...
    xlf90_r7  [ option | file ] ...
    xlf95     [ option | file ] ...
    xlf95_r   [ option | file ] ...
    xlf95_r7  [ option | file ] ...

 Description:
   The xlf, f77, fort77, xlf90, xlf_r, xlf90_r, xlf_r7, xlf90_r7, xlf95,
   xlf95_r and xlf95_r7 invocation commands compile XL Fortran source files.
   They also process assembler source files and object files. Unless you
   specify the -c option, these commands call the linkage editor to produce
   a single object file. The name of an input file indicates the type of file,
   as follows:
     -.f suffix: Fortran source file
     -.o or .a suffix: object file for ld command
     -.s suffix: assembler source file
     -.F suffix: Fortran source file with cpp preprocessor directives

   The main difference between these commands is that they use different
   default options (which are set in the configuration file /etc/xlf.cfg).
   See the XL Fortran User's Guide for more information on these invocation
   commands.

 Options:
   You can select compiler behavior by using compiler options on the
   command line.

   For a detailed description of each option, see the XL Fortran User's Guide.

   Options can be one or more of the following:

     1. flag options:

       -#        Displays verbose information on the compiler's progress
                 without invoking anything.
       -1        Executes DO loops at least once, if reached.
       -B<prefix>
                 Constructs alternate names for preprocessor, compiler,
                 assembler, linkage editor and other components.  <prefix>
                 is added to the beginning of the standard program names.
       -b64      The option is only available on AIX 4.3 and above.  In 64-bit
                 mode, the -b64 linker option is used to instruct the ld
                 command to bind with 64-bit objects.
       -bdynamic This option is only available on AIX 4.2 and above.  It is
                 used to control the processing of -l options and the way
                 that shared objects are processed.  When this option, the
                 default, is in effect, shared objects are linked dynamically.
                 See also -bstatic.
       -bhalt:<error_level>
                 Specifies the maximum error level for linker (ld) command
                 processing to continue.  The default value is 4, as specified
                 in the configuration file.
       -bloadmap:<name>
                 Requests that a log of linker actions and messages be saved
                 in file <name>.
       -bmaxdata:<bytes>
                 Specifies the maximum amount of space to reserve for the
                 program data segment for programs where the size of these
                 regions is a constraint.
       -bmaxstack:<bytes>
                 Specifies the maximum amount of space to reserve for the
                 program stack segment for programs where the size of these
                 regions is a constraint.
       -brtl     This option is only available on AIX 4.2 and above.  It
                 determines which algorithm will be used to find libraries
                 (specified with the -l option).  If -brtl is specified,
                 run-time linking is enabled.
       -bshared  Synonymous with -bdynamic.
       -bstatic  This option is only available on AIX 4.2 and above.  It is
                 used to control the processing of -l options and the way
                 that shared objects are processed.  Shared objects are
                 statically linked into the output file.  See also -bdynamic.
       -C        Performs run-time checking of array bounds and character
                 substring expressions.
       -c        Compile only; do not call the linkage editor.
       -D        Compiles lines of fixed source form Fortran code that have
                 a D in column 1.
       -d        Leaves temporary files produced by cpp, instead of deleting
                 them.
       -F[<x>][:<stanza>]
                 Uses alternative configuration file <x> and/or stanza
                 <stanza>.
       -g        Produces debug information.
       -I<dir>   Searches in directory <dir> for INCLUDE files that
                 do not start with an absolute path, and for the .mod
                 files of any modules used.
       -k        States that Fortran code is in free source form input format.
       -L<dir>   Searches in directory <dir> for files specified by -l<key>.
       -l<key>   Search the specified library file,
                 where <key> selects the file lib<key>.a.
       -N<x><num>
                 Specifies internal program storage areas where <x> can be S
                 and <num> is used to calculate the size of the areas.
       -O        Optimizes code generated by the compiler.
       -O0       Performs no optimizations. (It is the same as -qnoopt.)
       -O2       Optimizes code (this is the same as -O).
       -O3       Performs the -O level optimizations and performs additional
                 optimizations that are memory or compile time intensive.
       -O4       Aggressively optimizes the source program, trading off
                 additional compile time for potential improvements in the
                 generated code.  This option implies the following options:
                 -qarch=auto -qtune=auto -qcache=auto -qhot -qipa.
       -O5       Same as -O4, but also implies the -qipa=level=2 option.
       -o<name>  Names the executable file <name> instead of a.out.
       -P        Invokes the -Pv preprocessor before the compiler.
       -Pv       Invokes the -Pv preprocessor before the compiler.
       -Pk       Invokes the -Pk preprocessor before the compiler.
       -P!       Invokes the -Pv preprocessor only.
       -Pv!      Invokes the -Pv preprocessor only.
       -Pk!      Invokes the -Pk preprocessor only.
       -p        Generates simple profiling support code.
       -pg       Generates profiling support code.  Provides more extensive
                 profiling than -p.
       -Q        Inlines all appropriate subprograms.
       -Q<x>     Inlines specified subprograms where <x> can be one of
                 the following:
                   !        = Do not inline.
                   -<names> = Do not inline the list of subprograms, <names>.
                   +<names> = Inline the list of subprograms, <names>.
       -S        Produces one or more .s files, showing equivalent assembler
                 source for each Fortran source file.
       -t<x>     Applies prefix from the -B option to the specified program
                 <x>, where <x> can be one or more of the following:
                 Component           -t Mnemonic     Standard Program Name
                 C preprocessor            F                   cpp
                 VAST-2 preprocessor       p                   fpp
                 KAP preprocessor          p                   fppk
                 compiler front end        c                   xlfentry
                 loop optimizer            h                   xlfhot
                 IPA processor             I (upper case i)    ipa
                 assembler                 a                   as
                 code generator            b                   xlfcode
                 linker                    l (lower case L)    ld
                 -S disassembler           d                   dis
                 binder                    z                   bolt
       -U        Suppresses lowercase folding of Fortran code.
       -u        Specifies undefined (no) implicit data typing.
       -V        Displays verbose information on the compiler's progress in
                 shell-executable format.
       -v        Displays verbose information on the compiler's progress.
       -W<x>,<option1>[,<option2>[, ... [,<optionN>] ... ]]
                 Sends options to component <x> that is executed during
                 compilation.  The suboptions are defined as <x> for -t<x>.
       -w        Suppresses informational, language-level, and warning
                 messages.
       -y<x>     Specifies compile-time rounding of constant floating-point
                 expressions, where <x> can be one of the following:
                   n = Round to nearest.  This is the default.
                   m = Round toward minus infinity.
                   p = Round toward positive infinity.
                   z = Round toward zero.

     2. other options:

        Other options may be on/off or have suboptions and are specified in
        one of two ways:

        i)  -q<option>
           where <option> is an on/off switch such that, if x is the
           option, -qx turns the option on, and -qnox turns the
           option off.  For example, -qsource tells the compiler
           to produce a source listing, and -qnosource tells the compiler
           not to produce a source listing.

           The following override the initial compiler settings:

       -q32          Indicates the compilation bit mode, and together with
                     the -qarch option, determines the target machine that a
                     32-bit executable will run on.
       -q64          Indicates the compilation bit mode, and together with
                     the -qarch option, determines the target machine that a
                     64-bit executable will run on.
       -qattr        Produces attribute listing (only referenced names).
       -qcclines     Enables recognition of conditional compilation lines.
                     Note that -qcclines is the default if the -qsmp=omp
                     option is specified.
       -qcheck       The long form of the -C option.
       -qcompact     Reduces optimizations that increase code size.
       -qctyplss     Indicates that character constant expressions are
                     treated as Hollerith constants.
       -qdbg         The long form of the -g option.
       -qddim        Indicates that dimension declarators for pointees
                     can contain variable names for dynamic dimensioning.
       -qdlines      The long form of the -D option.
       -qdpc         Promotes basic floating-point constants to
                     double precision.
       -qdpcl        Generates symbols that tools based on the
                     Dynamic Probe Class Library (DPCL) API can use
                     to see the structure of an executable file.
       -qessl        Specifies that, if either -lessl or -lesslsmp are also
                     specified, then Engineering and Scientific Subroutine
                     Library (ESSL) routines should be used in place of some
                     Fortran 90 intrinsic procedures when there is a safe
                     opportunity to do so.
       -qextchk      Performs procedure interface checking as well as
                     detection of mismatched common blocks.
       -qextname     Suffixes an underscore to all external names
                     (except for main program names).
       -qfdpr        Instruments object files with information needed for
                     the AIX fdpr (Feedback Directed Program Restructuring)
                     performance-tuning utility to optimize the resulting
                     executable file.
       -qfixed       States that Fortran code is in fixed format.
       -qfree        States that Fortran code is in Fortran 90 free form.
       -qfullpath    Generates absolute source and include file names for
                     debugging.
       -qhot         Determines whether or not to perform high-order
                     transformations on loops during optimization.
       -qinitauto    Initializes each byte of storage for automatic
                     variables to zero.
       -qintlog      Allows mixture of INTEGER and LOGICAL values in
                     expressions and statements.
       -qkeepparm    Prevents flushing of the register, even if it could
                     improve performance.
       -qlibansi     See -qlibansi linktime option under -qipa.
       -qlibessl     See -qlibessl linktime option under -qipa.
       -qlibposix    See -qlibposix linktime option under -qipa.
       -qlist        Produces object listing.
       -qlistopt     Prints settings of all options in listing.
       -qlog4        Logical expressions that have a LOGICAL result are
                     of type LOGICAL(4).
       -qmbcs        Indicates that character or Hollerith constants, H edit
                     or character string edit descriptors can contain Multi-
                     Byte Character Set (MBCS) or Unicode characters.
       -qmixed       The long form of the -U option.
       -qnocclines   Turns off recognition of conditional compilation lines.
                     Note that -qnocclines is the default if the -qsmp=omp
                     option is not specified.
       -qnodirective Turns off all previously specified directive identifiers.
       -qnoescape    Specifies that the backslash is treated as the backslash
                     character, as opposed to an escape character, in character
                     strings, Hollerith constants, H edit descriptors, and
                     character string edit descriptors.
       -qnolm        Disables license management.
       -qnoobj       Suppresses production of an object file.
       -qnoprint     Directs listing to /dev/null.
       -qnosave      Sets the storage class of local variables to
                     AUTOMATIC.
       -qnoswapomp   Specifies that the compiler should not substitute the XL
                     Fortran versions of OpenMP routines.
       -qnounroll    Disables unrolling of DO loops.
       -qnozerosize  Improves performance of some programs by preventing
                     checking for zero-sized character strings and arrays.
       -qnullterm    Character constant actual arguments are null terminated.
       -qonetrip     The long form of the -1 option.
       -qoptimize    The long form of the -O option.
       -qpdf1        Produces an object that is instrumented to collect
                     run-time execution information.  This is phase 1 of the
                     profile-directed feedback optimization process.
       -qpdf2        Tunes application performance using the data generated
                     by running a program compiled with -qpdf1.  This is
                     phase 2 of the profile-directed feedback optimization
                     process.
       -qphsinfo     Displays phase information on the screen.
       -qqcount      Interprets both extended precision and character
                     count Q edit descriptors.
       -qrecur       Not recommended.  Allows recursive subprograms.
       -qreport      Produces a loop transformation listing.
       -qsaa         Performs SAA Fortran flagging.
       -qsave        Sets the default storage class for local variables to
                     STATIC.
       -qsigtrap     Installs xl__trce trap handler in a main program.
       -qsmp         Indicates that code should be produced for an SMP system.
                     All directives with the trigger constants SMP$, $OMP, and
                     IBMP are recognized.
       -qsource      Produces source listing.
       -qstrict      Ensures that optimizations done by the -O3 option
                     do not alter the semantics of a program.
       -qstrictieeemod
                     Causes the compiler to adhere to the Fortran 2000 IEEE
                     arithmetic rules for the ieee_arithmetic and
                     ieee_exceptions intrinsic modules. Using this option
                     can result in a slower executable.
                     -noqstrictieeemod relaxes these rules.
       -qstrict_induction
                     Prevents the compiler from performing induction
                     (loop counter) variable optimizations that could
                     alter the semantics of a program.
       -qthreaded    The compiler must ensure that all internally-generated
                     temporaries have automatic storage (thread-safe).
       -qundef       The long form of the -u Option.
       -qunroll      Allows the compiler to perform loop unrolling
                     optimizations, but the compiler is not required to do so.
       -qunwind      Preserves the default behavior for saves and restores
                     to volatile registers during a procedure call.
                     -noqunwind rearranges subprograms to minimize saves and
                     restores to volatile registers.
       -qwarn64      Aids in porting code from a 32-bit environment to a
                     64-bit environment by detecting the truncation of an
                     8 byte integer to 4 bytes.  Statements which may cause
                     problems will be identified through informational
                     messages.
       -qxflag=oldtab
                     For fixed-form programs, interprets a tab in
                     columns 1 to 5 as a single character.  This option
                     exists for compatibility with XL Fortran Version 1.
       -qxflag=xalias
                     Obsolete.  Replaced with -qalias=nostd.  See the
                     -qalias option.
       -qxlines      Compiles lines of fixed source form Fortran code that
                     have a X in column 1.
       -qxref        Produces cross-reference listing (only referenced names).

       ii)  -q<option>=<suboption>
            -q<option>=<suboption1>:<suboption2>:...:<suboptionN>
            where <option> is assigned a specific suboption value or list
            of suboption values as follows:

       -q64=<suboption>
                     Indicates that a 64-bit object file will be generated.
                       largetype   - The object file will use the new 64-bit
                                     Large Data Type (LDT) ABI.  This object
                                     file may only be used on versions of AIX
                                     greater than or equal to 5.0.
                       nolargetype - The object file will use the old 64-bit
                                     non-LDT ABI.  This object file may only
                                     be used on versions of AIX less than 5.0.
       -qalias=<suboption>
                     Indicates whether a program contains certain
                     categories of aliasing, to determine whether
                     certain optimizations are performed.  Suboptions include:
                       aryovrlp   - Program contains array assignments of
                                    overlapping or storage-associated arrays.
                                    This is the default.
                       noaryovrlp - Program does not contain array
                                    assignments of overlapping or
                                    storage-associated arrays; can produce
                                    significant performance improvements for
                                    array language.
                       intptr     - Program contains integer pointer
                                    declarations.
                       nointptr   - Program does not contain integer pointer
                                    declarations.
                       pteovrlp   - Program contains pointee variables that
                                    refer to non-pointee variables or two
                                    pointee variables that refer to the same
                                    storage location.
                       nopteovrlp - Program does not contain pointee variables
                                    that refer to non-pointee variables or two
                                    pointee variables that refer to the same
                                    storage location.
                       std        - Program contains only standard-conforming
                                    aliasing.
                       nostd      - Program contains some non-standard
                                    aliasing.
       -qalign=<suboption>
                     Specifies the alignment of data objects in storage,
                     to avoid performance problems with misaligned data.
                     Suboptions include:
                       4k             -  Indicates that large arrays and
                                         structures (at least 4096 bytes in
                                         size) will be aligned on a 4K
                                         (4096-byte or page) boundary.  Use
                                         of this option may help to improve
                                         the performance of programs using
                                         data striping.
                       no4k           -  Indicates not to align large data
                                         objects on page (4k) boundary.
                       struct=natural -  Objects of a derived type
                                         declared using a STRUCTURE
                                         declaration are stored such that
                                         each component of each element is
                                         stored on its natural alignment
                                         boundary, unless storage association
                                         requires otherwise.
                       struct=packed  -  Objects of a derived type
                                         declared using a STRUCTURE
                                         declaration are stored with no space
                                         between components, other than any
                                         padding represented by %FILL
                                         components.
                       struct=port    -  Storage padding is the same as
                                         described above for the
                                         struct=natural suboption, except that
                                         the alignment of components of type
                                         complex is the same as the alignment
                                         of components of type real of the
                                         same kind; and that the padding
                                         inserted to align members of a union
                                         map is affected: The number of pad
                                         bytes inserted to align each union
                                         map member varies with the natural
                                         alignment boundary of each member.
                                         In natural alignment mode, the number
                                         of pad bytes is the same for each
                                         union map member, and is determined
                                         by the most strictly aligned member
                                         of the union.
       -qarch=<suboption>
                     Specifies what types of RISC systems the application
                     program may be executed on.  Suboptions include:
                       auto       - Automatically detects the specific
                                    architecture of the compiling machine.
                                    It assumes that the execution environment
                                    will be the same as the compilation
                                    environment.
                       com        - Produces an object that contains
                                    instructions that run on all POWER,
                                    and PowerPC hardware platforms.
                                    This is the default.
                       p2sc       - The executable file can be executed on
                                    any POWER2 Super Chip hardware platform.
                       ppc        - Produces an object that contains
                                    instructions that run on any of the
                                    32-bit PowerPC hardware platforms.  If
                                    -q64 has been specified, then the target
                                    platform will be 64-bit PowerPC.
                       pwr        - Produces an object that contains
                                    instructions that run on any of the
                                    POWER or POWER2 hardware platforms.
                       pwr2s      - The executable file can be executed on
                                    any desktop implementation of the POWER2
                                    chip.
                       pwr2/pwrx  - Produces an object that contains
                                    instructions that run on the POWER2
                                    hardware platforms.
                       pwr3       - Produces an object that contains
                                    instructions that run on the POWER3
                                    hardware platforms.
                       pwr4       - Produces an object that contains
                                    instructions that run on the POWER4
                                    hardware platforms.
                       rs64a      - Produces an object that contains
                                    instructions that run on an RS64I
                                    hardware platform.
                       rs64b      - Produces an object that contains
                                    instructions that run on an RS64II
                                    hardware platform.
                       601        - Produces an object that contains
                                    instructions that run on PowerPC 601
                                    systems.
                       603        - Produces an object that contains
                                    instructions that run on PowerPC 603
                                    systems.
                       604        - Produces an object that contains
                                    instructions that run on PowerPC 604
                                    systems.
       -qassert=<suboption> ...
                     Provides information about the program to help fine-tune
                     optimizations.  Suboptions include:
                     nodeps      - No loops contain any loop-carried
                                   dependencies.
                     itercnt=<n> - The iteration count of a typical loop is
                     <n>.
       -qattr=full   Produces attribute listing (all names, whether
                     referenced or not).
       -qautodbl=<setting>
                     Allows programs to perform REAL(4) calculations
                     using longer data types and the full speed
                     and precision of the POWER and POWER2 floating-point
                     hardware.  Settings include:
                       none       - Does not promote or pad any objects that
                                    share storage.  This is the default.
                       dbl4       - Promotes floating-point objects that are
                                    single precision or are composed of such
                                    objects.
                       dbl8       - Promotes floating-point objects that are
                                    double precision or are composed of such
                                    objects.
                       dbl        - Combines the promotions done by dbl4 and
                                    dbl8.
                       dblpad4    - Performs the same promotions as dbl4,
                                    and also pads objects of other types
                                    (except CHARACTER) if they could
                                    possibly share storage with promoted
                                    objects.
                       dblpad8    - Performs the same promotions as dbl8,
                                    and also pads objects of other types
                                    (except CHARACTER) if they could
                                    possibly share storage with promoted
                                    objects.
                       dblpad     - Combines the promotions done by dblpad4
                                    and dblpad8, and also pads objects of
                                    other types (except CHARACTER) if they
                                    could possibly share storage with
                                    promoted objects.
       -qcache=<subopt1>=<val1>[:<subopt2>=<val2>[:...:<suboptN>=<valN>]]
                     Specifies the cache configuration for a specific
                     execution machine.  Suboptions include:
                       assoc=<num> - Specifies the set associativity of
                                     the cache:
                                       1   = Fully associative cache.
                                       n>1 = n-way set-associative cache.
                       auto        - Automatically detects the specific cache
                                     configuration of the compiling machine.
                                     It assumes that the execution environment
                                     will be the same as the compilation
                                     environment.
                       cost=<cycles>
                                   - Specifies the performance penalty
                                     resulting from a cache miss.
                       level=<level>
                                   - Specifies which level of cache is
                                     affected:
                                       1 = Basic cache.
                                       2 = Level-2 cache, or the table
                                           lookaside buffer (TLB) if the
                                           machine has no level-2 cache.
                                       3 = TLB, in a machine that does
                                           have a level-2 cache.
                       line=<bytes>
                                   - Specifies the line size of the cache.
                       size=<Kbytes>
                                   - Specifies the total size of the cache.
                       type=<type> - Specifies the type of cache that the
                                     settings apply to:
                                       C or c = Combined data and instruction
                                                cache.
                                       D or d = Data cache.
                                       I or i = Instruction cache.
       -qcharlen=<num>
                     Obsolete.  It is still accepted but has no effect.
                     Specifies maximum length for character data items.
       -qci=<num1>[:<num2>[: ... [:<numn>] ... ]]
                     Specifies identification numbers (from 1 to 255)
                     of conditional includes.
       -qctyplss=<suboption>
                     arg   - This suboption provides the same behaviour as
                             the -qctyplss option with no suboptions, with
                             the exception that if a Hollerith constant is
                             used as an actual argument, it is passed to the
                             procedure as if it were an integer actual
                             argument.
                     noarg - This suboption provides the same behaviour as
                             the -qctyplss option with no suboptions.
       -qdirective=<string1>[:<string2>[: ... [:<stringn>] ... ]]
                     Specifies target strings to be recognized in a comment
                     directive.  When compiling using -qsmp,
                     -qdirective=smp$:$omp:ibmp is turned on by default.
       -qdpc=e       All single-precision constants, including constants
                     with an e exponent, are treated as double-precision
                     constants.
       -qessl        Specifies that Engineering and (ESSL) routines should be
                     used in place of some Fortran 90 intrinsic procedures
                     when there is a safe opportunity to do so.
       -qextern=<name1>[:<name2>[: ... [:<namen>] ...]]
                     Specifies the names of subprograms that are to be
                     treated by the compiler as if they appear in EXTERNAL
                     statements.
       -qfixed=<num> States that Fortran code is in fixed source form, and
                     optionally specifies the maximum line length.
       -qflag=<sev1>:<sev2>
                     Specifies severity level of diagnostics to be reported
                     in listing, <sev1>, and on screen, <sev2>.  Severity
                     levels include:
                       I - Informational messages.
                       L - Language-level messages.
                       W - Warning messages.
                       E - Error messages.
                       S - Severe error messages.
                       U - Unrecoverable error messages.
                     Note that both <sev1> and <sev2> must be specified.
       -qfloat=<suboption1>[:<suboption2>[:...:<suboptionN>]]
                     Specifies various floating-point suboptions.
                     Suboptions include:
                       fltint       - For floating-point to integer conversion,
                                      uses faster inline code, which does not
                                      check for overflow.
                       hsflt        - Never rounds single-precision
                                      expressions, and doesn't perform range
                                      checking for floating-point to integer
                                      conversions.
                       hssngl       - Rounds single-precision expressions only
                                      when the results are stored into REAL(4)
                                      memory locations.
                       nans         - Detects operations involving signaling
                                      NaN values.
                       nofold       - Suppresses compile-time evaluation
                                      of constant floating-point expressions.
                       nomaf        - Suppresses generation of multiply-add
                                      instructions.
                       nostrictnmaf - Allows the compiler to perform
                                      optimizations that introduce
                                      multiply-add operations that do not
                                      preserve the sign of a zero value.
                       rndsngl      - Ensures strict adherence to IEEE
                                      standard.  That is, all operations on
                                      single-precision values produce results
                                      that remain in single precision.
                       rrm          - Specifies run-time rounding mode.
                                      Compile with this option if the run-time
                                      rounding mode is round toward minus
                                      infinity, round toward positive infinity,
                                      or not known.
                       rsqrt        - Changes a division by the result of a
                                      square root operation into a multiply
                                      by the reciprocal of the square root.
                       strictnmaf   - Ensures that the compiler does not
                                      perform optimizations that introduce
                                      multiply-add operations that do not
                                      preserve the sign of a zero value.
       -qflttrap=<suboption1>[:<suboption2>[:...:<suboptionN>]]
                     Determines what types of floating-point exception
                     conditions to detect at run time.  The program receives
                     a SIGTRAP signal when the corresponding exception occurs,
                     provided exception-checking is enabled. Suboptions
                     include:
                       overflow   - Detect and trap on floating-point overflow.
                       underflow  - Detect and trap on floating-point
                                    underflow.
                       zerodivide - Detect and trap on floating-point division
                                    by zero.
                       invalid    - Detect and trap on floating-point invalid
                                    operations.
                       inexact    - Detect and trap on floating-point inexact.
                       enable     - Turn on checking for the specified
                                    exceptions in the main program.
                       imprecise  - Only check for the specified exceptions
                                    on subprogram entry and exit.
       -qfree=<suboption>
                     States that Fortran code is in either F90 or IBM
                     free format.  <name> can be one of:
                       ibm   -  IBM free format.
                       f90   -  Fortran 90 free format.
       -qhalt=<sev>  Stops compiler after first phase if severity of errors
                     detected equals or exceeds <sev>, where <sev> is
                     defined as for the -qflag option with the exception of:
                       Q - A severity level that can never be generated by
                           any defined error condition.  Specifying it
                           prevents the compiler from halting even if it
                           encounters unrecoverable errors.
       -qhot=<suboption>
                     Determines whether or not to perform high-order
                     transformations on loops and array language during
                     optimization, and whether or not to pad array dimensions
                     and data objects to avoid cache misses. Suboptions
                     include:
                       arraypad   - The compiler will pad any arrays where it
                                    infers there may be a benefit.  Make sure
                                    that you have not used equivalence
                                    association for any arrays in files
                                    compiled with this option as the compiler
                                    does not perform any checking before
                                    padding arrays.
                       arraypad=n - The compiler will pad every array in the
                                    code.  The pad amount must be a positive
                                    integer value.
                       novector   - The compiler will avoid replacing code by
                                    calls to vector library routines.
                       vector     - Allows the compiler to optimize by
                                    replacing code with calls to vector
                                    library routines.
       -qieee=<suboption>
                     Specifies the rounding mode for the compiler to use when
                     evaluating constant floating-point expressions at compile
                     time.  <suboption> is one of:
                       Near  -  Round to nearest representable number.  This
                                is the default.
                       Minus -  Round toward minus infinity.
                       Plus  -  Round toward plus infinity.
                       Zero  -  Round toward zero.
       -qinit=f90ptr Sets the initial values of pointers to null, and makes
                     their association status disassociated instead of
                     undefined.
       -qinitauto[=<hex_value>]
                     Initializes each byte or word of storage for automatic
                     variables to a specific value (typically 00 or FF),
                     to help locate variables that are referenced before
                     being defined.
       -qintsize=<bytes>
                     Sets the size of default INTEGER and LOGICAL values.
       -qipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                     Enhances -O optimization by doing detailed analysis
                     across procedures.  One of -O, -O2, or -O3 is required
                     when using -qipa.  Regular expressions are supported
                     when specifying <procedure_names> on the -qipa=exits,
                     -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                     -qipa=safe and -qipa=unknown suboptions.
                     Suboptions include:
                       exits=<procedure_names>
                                  - Specifies a selected set of procedures
                                    which always end the program.
                       inline=<inline-options>
                         The "ipa=inline=" command can take a colon-separated
                         list of inline options, which are as follows:
                           inline={auto|noauto}
                                       - Specifies whether or not to
                                         automatically inline expansion.
                           inline=<procedure_names>
                                       - Specifies a comma-separated list of
                                         procedures to try to inline.
                           inline=limit=<num>
                                       - Changes the size limits that deter-
                                         mine how much inline expansion to do.
                                         <num> is the optimizer's approximation
                                         of the number of bytes of code which
                                         will be generated.
                           inline=threshold=<num>
                                       - Specifies the upper size limit on
                                         procedures to inline.  <num> is
                                         defined as for inline=limit.
                       isolated=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that do not directly refer to any global
                                    variable.
                       level=<level>
                                  - Determines the amount of IPA analysis
                                    and optimization performed:
                                      0 = Does only minimal interprocedural
                                          analysis and optimization.
                                      1 = Turns on inlining, limited alias
                                          analysis, and limited call-site
                                          tailoring.
                                      2 = Full interprocedural data flow and
                                          alias analysis.
                       list=[filename|short|long]
                                  - Specifies an output listing file name
                                    during the link phase, in the event that
                                    an object listing has been requested
                                    using the -qlist option.  The default
                                    name is "a.lst".  The suboptions short and
                                    long determine which listing sections will
                                    be included.
                       lowfreq=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures that are likely to be
                                    called infrequently during the course
                                    of a typical program run.
                       missing={unknown|safe|isolated|pure}
                                  - Specifies the default assumption for
                                    procedures not compiled with -qipa.
                       noinline=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures which are not to be inlined.
                       noobject   - Speeds up compilation, but the object
                                    files cannot be used in non-IPA
                                    compilations.  This option is ignored if
                                    -S has been specified.
                       partition={small|medium|large}
                                  - Specifies the size of program sections
                                    that are analyzed together.  Larger
                                    partitions may produce better analysis but
                                    require more storage.
                       pure=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that are "isolated", "safe", and do not
                                    modify any data objects that are visible
                                    to the caller.
                       safe=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that do not call any other part of the
                                    program.
                       stdexits   - Specifies that compiler-defined exit
                                    routines can be optimized as with the
                                    "exits" suboption.  The procedures are
                                    abort, exit, _exit, and _assert.
                       nothreads   - Don't run parallel processes. Equivalent to
                                     running one serial process.
                       threads[=N] - Run as many parallel processes as are
                                     available, or N processes.  N must be a
                                     positive integer.
                       unknown=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that may update global variables and
                                    dummy arguments and call other parts of
                                    the program compiled with -qipa.
                       The following options are intended for use by the
                       link-time phase of -qipa:
                       -qlibansi  - Assumes that all functions with the name
                                    of an ANSI C defined library function are,
                                    in fact, the library functions.
                                    -qnolibansi is the default.
                       -qlibessl  - Assumes that all functions with the name
                                    of an ESSL defined library functions are,
                                    in fact, the library functions.
                                    -qnolibessl is the default.
                       -qlibposix - Assumes that all functions with the name
                                    of a POSIX 1003.1 defined library function
                                    are, in fact, the system functions.
                                    -qnolibposix is the default.
       -qlanglvl=<suboption>
                     Determines which language standard (or superset or
                     subset of a standard) to check against for nonconformance.
                     Suboptions include:
                       77std      - Accepts the language specified by the
                                    ANSI F77 standard.
                       90std      - Accepts the language specified by the
                                    ISO F90 standard.
                       90pure     - Same as 90std, except that it reports
                                    errors for any obsolescent Fortran 90
                                    features used.
                       90ext      - Obsolete suboption that is equivalent
                                    to extended.
                       95std      - Accepts the language specified by the
                                    ISO F95 standard.
                       95pure     - Same as 95std, except that it also
                                    reports errors for any obsolescent
                                    Fortran 95 features used.
                       extended   - Accepts the full Fortran 95 language
                                    standard plus all extensions,
                                    effectively turning off language-
                                    level checking.
       -qlargepage   Indicates that a program, designed to execute in a large
                     page memory environment, can take advantage of large
                     16 MB pages provided on POWER4 or better CPUs.
       -qmaxmem=<num>
                     Limits the amount of memory used by space intensive
                     optimizations to <num> kilobytes, where <num> is
                     a positive integer.  The special <num> value -1
                     may also be used to indicate unlimited memory.
       -qmoddir=<directory>
                     Specifies the location for any .mod files that
                     the compiler writes.
       -qport=<suboption>
                     This option offers small semantic changes to aid in
                     porting from other compilers.  For each suboption x,
                     there is a corresponding suboption nox, in which the
                     semantic change is not performed.  Suboptions include:
                       hexint - When a typeless constant hex string is passed
                                to the INT intrinsic, it is treated as an
                                integer value.  The behaviour without this
                                suboption specified (or with nohexint
                                specified) is to implicitly convert it to a
                                real value.
                       mod    - When two arguments of different kinds are
                                passed to the MOD intrinsic, the argument with
                                the smaller kind is converted to the same kind
                                as the argument with the larger kind.  The
                                behaviour without this suboption specified
                                (or with nomod specified) is to report an error
                                in this situation.
                       typestmt - The TYPE statement is supported and behaves in
                                a similar way to the PRINT statement. The
                                behaviour without this suboption specified
                                (or with notypestmt specified) is to not support
                                the TYPE statement.
       -qposition=<suboption1>[:<suboption2>]
                     Positions the file pointer at the end of the file when
                     data is written after an OPEN statement with no
                     POSITION= specifier, and the corresponding STATUS=
                     value is specified.  Suboptions include appendold and
                     appendunknown.
       -qrealsize=<bytes>
                     Sets the size of the default REAL, DOUBLE PRECISION,
                     COMPLEX and DOUBLE COMPLEX values.  The allowed values
                     for <bytes> are 4 and 8.
       -qreport=<suboption> ...
                     Produces one or more reports about how the program is
                     parallelized and how loops are optimized.  Suboptions
                     include:
                       hotlist - Produces a report showing how loops are
                                 transformed.
                       smplist - Produces a report showing how the program is
                                 parallelized.
       -qsave=<suboption>
                     Specifies the default storage class for local variables.
                     Suboptions include:
                       all         - The default storage class for all local
                                     variables is STATIC.  Specifying this
                                     suboption is the same as specifying the
                                     -qsave option without any suboptions.
                       defaultinit - The default storage class is STATIC for
                                     local variables of derived type that have
                                     default initialization specified.  For
                                     all other local variables, the default
                                     storage class is AUTOMATIC.
       -qsclk=[centi | micro]
                     -qsclk=centi uses centisecond resolution for values
                     returned from the SYSTEM_CLOCK intrinsic procedure.
                     This is the default.
                     -qsclk=micro uses microsecond resolution.
       -qsigtrap=<trap_handler>
                     Installs a user-written trap handler in a main program.
       -qsmallstack  Minimizes stack usage, where possible.
                     The default is -qnosmallstack.
       -qsmp=<suboptions>
                     Specifies that code should be produced for an SMP system.
                     Suboptions include:
                       nested_par    - Prescriptive nested parallel constructs
                                       are parallelized by the compiler.
                       noauto        - Automatic parallelization is turned off.
                       noopt         - The compiler will not optimize SMP
                                       constructs.
                       norec_locks   - Recursive locks will not be used to
                                       implement critical sections.
                       omp           - If you specify this, the compiler
                                       enforces compliance with the OpenMP
                                       Fortran API.
                       opt           - The compiler will optimize SMP
                                       constructs.
                       rec_locks     - Recursive locks will be used to
                                       implement critical sections.
                       schedule=<suboptions>
                                     - The schedule suboption takes
                                       subsuboptions.  For their descriptions
                                       please see the User's Guide:
                                         affinity[=n]
                                         dynamic[=n]
                                         guided[=n]
                                         runtime
                                         static[=n]
                                         threshold[=n]
       -qspillsize=<bytes>
                     The long form of -NS.  See the -N Option.
       -qsuffix=<option>=<suffix>
                     Specifies the source-file suffix on the command line
                     instead of in the .cfg file.  Options include:
                       f=<suffix>  - Where <suffix> represents the new
                                     source-file-suffix.
                       o=<suffix>  - Where <suffix> represents the new
                                     object-file-suffix.
                       s=<suffix>  - Where <suffix> represents the new
                                     assemble-source-file-suffix.
                       cpp=<suffix>- Where <suffix> represents the new
                                     preprocessed-source-file-suffix.
       -qsuppress=<nnnn-mmm>[:nnnn-mmm ...]
                     Suppresses generation in the output stream and in the
                     listing file of the compiler message(s) indicated.
                     Where <nnnn-mmm> is a 7 digit compiler message number.
       -qtbtable={none | small | full}
                     Specifies how much traceback information to include in
                     object files, which can reduce file size but limit
                     debugging and profiling.
       -qtune=<option>
                     Specifies the architecture on which the executable
                     program is optimized.  Suboptions include:
                       601        - Produces an object optimized for all
                                    the PowerPC 601 processors.
                       603        - Produces an object optimized for all
                                    the PowerPC 603 processors.
                       604        - Produces an object optimized for all
                                    the PowerPC 604 processors.
                       auto       - Automatically detects the specific
                                    processor type of the compiling machine.
                       pwr        - Produces an object optimized for the
                                    POWER hardware platforms.
                       p2sc       - The optimizations are tuned for the
                                    POWER2 Super Chip.
                       pwr2/pwrx  - Produces an object optimized for the
                                    POWER2 hardware platforms.
                       pwr2s      - Produces an object optimized for a
                                    subset of POWER2 hardware platforms,
                                    the desktop models with narrow memory
                                    bandwidth.
                       pwr3       - Produces an object optimized for the
                                    POWER3 hardware platforms.
                       pwr4       - Produces an object optimized for the
                                    POWER4 hardware platforms.
                       rs64a      - Produces an object optimized for the
                                    PowerPC RS64I processor.
                       rs64b      - Produces an object optimized for the
                                    PowerPC RS64II processor.
       -qxlf77=<settings>
                     Provides backward compatibility with the XL Fortran
                     language from previous versions, for aspects of
                     language semantics and I/O data format that have changed.
                     Suboptions include:
                       noblankpad - Produces conversion errors when reading
                                    from an internal or direct-access file
                                    if the format requires more characters
                                    than the record contains.
                       gedit77    - Uses FORTRAN 77 semantics for the output
                                    of REAL objects with the G edit descriptor.
                       intarg     - Converts all the integer arguments of
                                    an intrinsic procedure to the kind of
                                    the longest argument, if they are of
                                    different kinds.
                       intxor     - Treats .XOR. as a logical binary intrinsic
                                    operator rather than a defined operator.
                       noleadzero - Does not produce a leading zero in real
                                    output under the D, E, F and Q edit
                                    descriptors.
                       oldboz     - Turns blanks into zeros for data read by
                                    B, O, and Z edit descriptors, regardless
                                    of the BLANK= specifier or any BN or BZ
                                    control edit descriptors.
                       persistent - Saves the addresses of arguments to
                                    subprograms with ENTRY statements in
                                    static storage, for compatibility with
                                    XL Fortran Version 2.
                       softeof    - Allows READ and WRITE operations when a
                                    unit is positioned after its endfile
                                    record, unless that position is the result
                                    of executing an ENDFILE statement.
       -qxlf90=<settings>
                     Provides backward compatibility with the Fortran 90
                     standard for certain aspects of the language.
                     Suboptions include:
                       signedzero  - Determines how the SIGN(A,B) function
                                     handles signed real 0.0. In addition,
                                     determines  whether negative internal
                                     values will be prefixed with a minus
                                     when formatted output would produce
                                     a negative sign zero.
                       autodealloc - Determines whether the compiler
                                     deallocates allocatable arrays
                                     that are declared locally
                                     without either the SAVE or the
                                     STATIC  attribute, and have a
                                     status of currently allocated
                                     when the supbrogram terminates.
       -qxref=full   Produce cross-reference listing (all names, whether
                     referenced or not).

  For a detailed description of each option, please refer to the
  XL Fortran for AIX User's Guide.

configure:5239: $? = 249
configure:5241: f77 -V </dev/null >&5
pg /usr/lpp/xlf/bin/default_msg/xlf.help 
  XL Fortran for AIX

 Usage:
    xlf       [ option | file ] ...
    f77       [ option | file ] ...
    fort77    [ option | file ] ...
    xlf90     [ option | file ] ...
    xlf_r     [ option | file ] ...
    xlf90_r   [ option | file ] ...
    xlf_r7    [ option | file ] ...
    xlf90_r7  [ option | file ] ...
    xlf95     [ option | file ] ...
    xlf95_r   [ option | file ] ...
    xlf95_r7  [ option | file ] ...

 Description:
   The xlf, f77, fort77, xlf90, xlf_r, xlf90_r, xlf_r7, xlf90_r7, xlf95,
   xlf95_r and xlf95_r7 invocation commands compile XL Fortran source files.
   They also process assembler source files and object files. Unless you
   specify the -c option, these commands call the linkage editor to produce
   a single object file. The name of an input file indicates the type of file,
   as follows:
     -.f suffix: Fortran source file
     -.o or .a suffix: object file for ld command
     -.s suffix: assembler source file
     -.F suffix: Fortran source file with cpp preprocessor directives

   The main difference between these commands is that they use different
   default options (which are set in the configuration file /etc/xlf.cfg).
   See the XL Fortran User's Guide for more information on these invocation
   commands.

 Options:
   You can select compiler behavior by using compiler options on the
   command line.

   For a detailed description of each option, see the XL Fortran User's Guide.

   Options can be one or more of the following:

     1. flag options:

       -#        Displays verbose information on the compiler's progress
                 without invoking anything.
       -1        Executes DO loops at least once, if reached.
       -B<prefix>
                 Constructs alternate names for preprocessor, compiler,
                 assembler, linkage editor and other components.  <prefix>
                 is added to the beginning of the standard program names.
       -b64      The option is only available on AIX 4.3 and above.  In 64-bit
                 mode, the -b64 linker option is used to instruct the ld
                 command to bind with 64-bit objects.
       -bdynamic This option is only available on AIX 4.2 and above.  It is
                 used to control the processing of -l options and the way
                 that shared objects are processed.  When this option, the
                 default, is in effect, shared objects are linked dynamically.
                 See also -bstatic.
       -bhalt:<error_level>
                 Specifies the maximum error level for linker (ld) command
                 processing to continue.  The default value is 4, as specified
                 in the configuration file.
       -bloadmap:<name>
                 Requests that a log of linker actions and messages be saved
                 in file <name>.
       -bmaxdata:<bytes>
                 Specifies the maximum amount of space to reserve for the
                 program data segment for programs where the size of these
                 regions is a constraint.
       -bmaxstack:<bytes>
                 Specifies the maximum amount of space to reserve for the
                 program stack segment for programs where the size of these
                 regions is a constraint.
       -brtl     This option is only available on AIX 4.2 and above.  It
                 determines which algorithm will be used to find libraries
                 (specified with the -l option).  If -brtl is specified,
                 run-time linking is enabled.
       -bshared  Synonymous with -bdynamic.
       -bstatic  This option is only available on AIX 4.2 and above.  It is
                 used to control the processing of -l options and the way
                 that shared objects are processed.  Shared objects are
                 statically linked into the output file.  See also -bdynamic.
       -C        Performs run-time checking of array bounds and character
                 substring expressions.
       -c        Compile only; do not call the linkage editor.
       -D        Compiles lines of fixed source form Fortran code that have
                 a D in column 1.
       -d        Leaves temporary files produced by cpp, instead of deleting
                 them.
       -F[<x>][:<stanza>]
                 Uses alternative configuration file <x> and/or stanza
                 <stanza>.
       -g        Produces debug information.
       -I<dir>   Searches in directory <dir> for INCLUDE files that
                 do not start with an absolute path, and for the .mod
                 files of any modules used.
       -k        States that Fortran code is in free source form input format.
       -L<dir>   Searches in directory <dir> for files specified by -l<key>.
       -l<key>   Search the specified library file,
                 where <key> selects the file lib<key>.a.
       -N<x><num>
                 Specifies internal program storage areas where <x> can be S
                 and <num> is used to calculate the size of the areas.
       -O        Optimizes code generated by the compiler.
       -O0       Performs no optimizations. (It is the same as -qnoopt.)
       -O2       Optimizes code (this is the same as -O).
       -O3       Performs the -O level optimizations and performs additional
                 optimizations that are memory or compile time intensive.
       -O4       Aggressively optimizes the source program, trading off
                 additional compile time for potential improvements in the
                 generated code.  This option implies the following options:
                 -qarch=auto -qtune=auto -qcache=auto -qhot -qipa.
       -O5       Same as -O4, but also implies the -qipa=level=2 option.
       -o<name>  Names the executable file <name> instead of a.out.
       -P        Invokes the -Pv preprocessor before the compiler.
       -Pv       Invokes the -Pv preprocessor before the compiler.
       -Pk       Invokes the -Pk preprocessor before the compiler.
       -P!       Invokes the -Pv preprocessor only.
       -Pv!      Invokes the -Pv preprocessor only.
       -Pk!      Invokes the -Pk preprocessor only.
       -p        Generates simple profiling support code.
       -pg       Generates profiling support code.  Provides more extensive
                 profiling than -p.
       -Q        Inlines all appropriate subprograms.
       -Q<x>     Inlines specified subprograms where <x> can be one of
                 the following:
                   !        = Do not inline.
                   -<names> = Do not inline the list of subprograms, <names>.
                   +<names> = Inline the list of subprograms, <names>.
       -S        Produces one or more .s files, showing equivalent assembler
                 source for each Fortran source file.
       -t<x>     Applies prefix from the -B option to the specified program
                 <x>, where <x> can be one or more of the following:
                 Component           -t Mnemonic     Standard Program Name
                 C preprocessor            F                   cpp
                 VAST-2 preprocessor       p                   fpp
                 KAP preprocessor          p                   fppk
                 compiler front end        c                   xlfentry
                 loop optimizer            h                   xlfhot
                 IPA processor             I (upper case i)    ipa
                 assembler                 a                   as
                 code generator            b                   xlfcode
                 linker                    l (lower case L)    ld
                 -S disassembler           d                   dis
                 binder                    z                   bolt
       -U        Suppresses lowercase folding of Fortran code.
       -u        Specifies undefined (no) implicit data typing.
       -V        Displays verbose information on the compiler's progress in
                 shell-executable format.
       -v        Displays verbose information on the compiler's progress.
       -W<x>,<option1>[,<option2>[, ... [,<optionN>] ... ]]
                 Sends options to component <x> that is executed during
                 compilation.  The suboptions are defined as <x> for -t<x>.
       -w        Suppresses informational, language-level, and warning
                 messages.
       -y<x>     Specifies compile-time rounding of constant floating-point
                 expressions, where <x> can be one of the following:
                   n = Round to nearest.  This is the default.
                   m = Round toward minus infinity.
                   p = Round toward positive infinity.
                   z = Round toward zero.

     2. other options:

        Other options may be on/off or have suboptions and are specified in
        one of two ways:

        i)  -q<option>
           where <option> is an on/off switch such that, if x is the
           option, -qx turns the option on, and -qnox turns the
           option off.  For example, -qsource tells the compiler
           to produce a source listing, and -qnosource tells the compiler
           not to produce a source listing.

           The following override the initial compiler settings:

       -q32          Indicates the compilation bit mode, and together with
                     the -qarch option, determines the target machine that a
                     32-bit executable will run on.
       -q64          Indicates the compilation bit mode, and together with
                     the -qarch option, determines the target machine that a
                     64-bit executable will run on.
       -qattr        Produces attribute listing (only referenced names).
       -qcclines     Enables recognition of conditional compilation lines.
                     Note that -qcclines is the default if the -qsmp=omp
                     option is specified.
       -qcheck       The long form of the -C option.
       -qcompact     Reduces optimizations that increase code size.
       -qctyplss     Indicates that character constant expressions are
                     treated as Hollerith constants.
       -qdbg         The long form of the -g option.
       -qddim        Indicates that dimension declarators for pointees
                     can contain variable names for dynamic dimensioning.
       -qdlines      The long form of the -D option.
       -qdpc         Promotes basic floating-point constants to
                     double precision.
       -qdpcl        Generates symbols that tools based on the
                     Dynamic Probe Class Library (DPCL) API can use
                     to see the structure of an executable file.
       -qessl        Specifies that, if either -lessl or -lesslsmp are also
                     specified, then Engineering and Scientific Subroutine
                     Library (ESSL) routines should be used in place of some
                     Fortran 90 intrinsic procedures when there is a safe
                     opportunity to do so.
       -qextchk      Performs procedure interface checking as well as
                     detection of mismatched common blocks.
       -qextname     Suffixes an underscore to all external names
                     (except for main program names).
       -qfdpr        Instruments object files with information needed for
                     the AIX fdpr (Feedback Directed Program Restructuring)
                     performance-tuning utility to optimize the resulting
                     executable file.
       -qfixed       States that Fortran code is in fixed format.
       -qfree        States that Fortran code is in Fortran 90 free form.
       -qfullpath    Generates absolute source and include file names for
                     debugging.
       -qhot         Determines whether or not to perform high-order
                     transformations on loops during optimization.
       -qinitauto    Initializes each byte of storage for automatic
                     variables to zero.
       -qintlog      Allows mixture of INTEGER and LOGICAL values in
                     expressions and statements.
       -qkeepparm    Prevents flushing of the register, even if it could
                     improve performance.
       -qlibansi     See -qlibansi linktime option under -qipa.
       -qlibessl     See -qlibessl linktime option under -qipa.
       -qlibposix    See -qlibposix linktime option under -qipa.
       -qlist        Produces object listing.
       -qlistopt     Prints settings of all options in listing.
       -qlog4        Logical expressions that have a LOGICAL result are
                     of type LOGICAL(4).
       -qmbcs        Indicates that character or Hollerith constants, H edit
                     or character string edit descriptors can contain Multi-
                     Byte Character Set (MBCS) or Unicode characters.
       -qmixed       The long form of the -U option.
       -qnocclines   Turns off recognition of conditional compilation lines.
                     Note that -qnocclines is the default if the -qsmp=omp
                     option is not specified.
       -qnodirective Turns off all previously specified directive identifiers.
       -qnoescape    Specifies that the backslash is treated as the backslash
                     character, as opposed to an escape character, in character
                     strings, Hollerith constants, H edit descriptors, and
                     character string edit descriptors.
       -qnolm        Disables license management.
       -qnoobj       Suppresses production of an object file.
       -qnoprint     Directs listing to /dev/null.
       -qnosave      Sets the storage class of local variables to
                     AUTOMATIC.
       -qnoswapomp   Specifies that the compiler should not substitute the XL
                     Fortran versions of OpenMP routines.
       -qnounroll    Disables unrolling of DO loops.
       -qnozerosize  Improves performance of some programs by preventing
                     checking for zero-sized character strings and arrays.
       -qnullterm    Character constant actual arguments are null terminated.
       -qonetrip     The long form of the -1 option.
       -qoptimize    The long form of the -O option.
       -qpdf1        Produces an object that is instrumented to collect
                     run-time execution information.  This is phase 1 of the
                     profile-directed feedback optimization process.
       -qpdf2        Tunes application performance using the data generated
                     by running a program compiled with -qpdf1.  This is
                     phase 2 of the profile-directed feedback optimization
                     process.
       -qphsinfo     Displays phase information on the screen.
       -qqcount      Interprets both extended precision and character
                     count Q edit descriptors.
       -qrecur       Not recommended.  Allows recursive subprograms.
       -qreport      Produces a loop transformation listing.
       -qsaa         Performs SAA Fortran flagging.
       -qsave        Sets the default storage class for local variables to
                     STATIC.
       -qsigtrap     Installs xl__trce trap handler in a main program.
       -qsmp         Indicates that code should be produced for an SMP system.
                     All directives with the trigger constants SMP$, $OMP, and
                     IBMP are recognized.
       -qsource      Produces source listing.
       -qstrict      Ensures that optimizations done by the -O3 option
                     do not alter the semantics of a program.
       -qstrictieeemod
                     Causes the compiler to adhere to the Fortran 2000 IEEE
                     arithmetic rules for the ieee_arithmetic and
                     ieee_exceptions intrinsic modules. Using this option
                     can result in a slower executable.
                     -noqstrictieeemod relaxes these rules.
       -qstrict_induction
                     Prevents the compiler from performing induction
                     (loop counter) variable optimizations that could
                     alter the semantics of a program.
       -qthreaded    The compiler must ensure that all internally-generated
                     temporaries have automatic storage (thread-safe).
       -qundef       The long form of the -u Option.
       -qunroll      Allows the compiler to perform loop unrolling
                     optimizations, but the compiler is not required to do so.
       -qunwind      Preserves the default behavior for saves and restores
                     to volatile registers during a procedure call.
                     -noqunwind rearranges subprograms to minimize saves and
                     restores to volatile registers.
       -qwarn64      Aids in porting code from a 32-bit environment to a
                     64-bit environment by detecting the truncation of an
                     8 byte integer to 4 bytes.  Statements which may cause
                     problems will be identified through informational
                     messages.
       -qxflag=oldtab
                     For fixed-form programs, interprets a tab in
                     columns 1 to 5 as a single character.  This option
                     exists for compatibility with XL Fortran Version 1.
       -qxflag=xalias
                     Obsolete.  Replaced with -qalias=nostd.  See the
                     -qalias option.
       -qxlines      Compiles lines of fixed source form Fortran code that
                     have a X in column 1.
       -qxref        Produces cross-reference listing (only referenced names).

       ii)  -q<option>=<suboption>
            -q<option>=<suboption1>:<suboption2>:...:<suboptionN>
            where <option> is assigned a specific suboption value or list
            of suboption values as follows:

       -q64=<suboption>
                     Indicates that a 64-bit object file will be generated.
                       largetype   - The object file will use the new 64-bit
                                     Large Data Type (LDT) ABI.  This object
                                     file may only be used on versions of AIX
                                     greater than or equal to 5.0.
                       nolargetype - The object file will use the old 64-bit
                                     non-LDT ABI.  This object file may only
                                     be used on versions of AIX less than 5.0.
       -qalias=<suboption>
                     Indicates whether a program contains certain
                     categories of aliasing, to determine whether
                     certain optimizations are performed.  Suboptions include:
                       aryovrlp   - Program contains array assignments of
                                    overlapping or storage-associated arrays.
                                    This is the default.
                       noaryovrlp - Program does not contain array
                                    assignments of overlapping or
                                    storage-associated arrays; can produce
                                    significant performance improvements for
                                    array language.
                       intptr     - Program contains integer pointer
                                    declarations.
                       nointptr   - Program does not contain integer pointer
                                    declarations.
                       pteovrlp   - Program contains pointee variables that
                                    refer to non-pointee variables or two
                                    pointee variables that refer to the same
                                    storage location.
                       nopteovrlp - Program does not contain pointee variables
                                    that refer to non-pointee variables or two
                                    pointee variables that refer to the same
                                    storage location.
                       std        - Program contains only standard-conforming
                                    aliasing.
                       nostd      - Program contains some non-standard
                                    aliasing.
       -qalign=<suboption>
                     Specifies the alignment of data objects in storage,
                     to avoid performance problems with misaligned data.
                     Suboptions include:
                       4k             -  Indicates that large arrays and
                                         structures (at least 4096 bytes in
                                         size) will be aligned on a 4K
                                         (4096-byte or page) boundary.  Use
                                         of this option may help to improve
                                         the performance of programs using
                                         data striping.
                       no4k           -  Indicates not to align large data
                                         objects on page (4k) boundary.
                       struct=natural -  Objects of a derived type
                                         declared using a STRUCTURE
                                         declaration are stored such that
                                         each component of each element is
                                         stored on its natural alignment
                                         boundary, unless storage association
                                         requires otherwise.
                       struct=packed  -  Objects of a derived type
                                         declared using a STRUCTURE
                                         declaration are stored with no space
                                         between components, other than any
                                         padding represented by %FILL
                                         components.
                       struct=port    -  Storage padding is the same as
                                         described above for the
                                         struct=natural suboption, except that
                                         the alignment of components of type
                                         complex is the same as the alignment
                                         of components of type real of the
                                         same kind; and that the padding
                                         inserted to align members of a union
                                         map is affected: The number of pad
                                         bytes inserted to align each union
                                         map member varies with the natural
                                         alignment boundary of each member.
                                         In natural alignment mode, the number
                                         of pad bytes is the same for each
                                         union map member, and is determined
                                         by the most strictly aligned member
                                         of the union.
       -qarch=<suboption>
                     Specifies what types of RISC systems the application
                     program may be executed on.  Suboptions include:
                       auto       - Automatically detects the specific
                                    architecture of the compiling machine.
                                    It assumes that the execution environment
                                    will be the same as the compilation
                                    environment.
                       com        - Produces an object that contains
                                    instructions that run on all POWER,
                                    and PowerPC hardware platforms.
                                    This is the default.
                       p2sc       - The executable file can be executed on
                                    any POWER2 Super Chip hardware platform.
                       ppc        - Produces an object that contains
                                    instructions that run on any of the
                                    32-bit PowerPC hardware platforms.  If
                                    -q64 has been specified, then the target
                                    platform will be 64-bit PowerPC.
                       pwr        - Produces an object that contains
                                    instructions that run on any of the
                                    POWER or POWER2 hardware platforms.
                       pwr2s      - The executable file can be executed on
                                    any desktop implementation of the POWER2
                                    chip.
                       pwr2/pwrx  - Produces an object that contains
                                    instructions that run on the POWER2
                                    hardware platforms.
                       pwr3       - Produces an object that contains
                                    instructions that run on the POWER3
                                    hardware platforms.
                       pwr4       - Produces an object that contains
                                    instructions that run on the POWER4
                                    hardware platforms.
                       rs64a      - Produces an object that contains
                                    instructions that run on an RS64I
                                    hardware platform.
                       rs64b      - Produces an object that contains
                                    instructions that run on an RS64II
                                    hardware platform.
                       601        - Produces an object that contains
                                    instructions that run on PowerPC 601
                                    systems.
                       603        - Produces an object that contains
                                    instructions that run on PowerPC 603
                                    systems.
                       604        - Produces an object that contains
                                    instructions that run on PowerPC 604
                                    systems.
       -qassert=<suboption> ...
                     Provides information about the program to help fine-tune
                     optimizations.  Suboptions include:
                     nodeps      - No loops contain any loop-carried
                                   dependencies.
                     itercnt=<n> - The iteration count of a typical loop is
                     <n>.
       -qattr=full   Produces attribute listing (all names, whether
                     referenced or not).
       -qautodbl=<setting>
                     Allows programs to perform REAL(4) calculations
                     using longer data types and the full speed
                     and precision of the POWER and POWER2 floating-point
                     hardware.  Settings include:
                       none       - Does not promote or pad any objects that
                                    share storage.  This is the default.
                       dbl4       - Promotes floating-point objects that are
                                    single precision or are composed of such
                                    objects.
                       dbl8       - Promotes floating-point objects that are
                                    double precision or are composed of such
                                    objects.
                       dbl        - Combines the promotions done by dbl4 and
                                    dbl8.
                       dblpad4    - Performs the same promotions as dbl4,
                                    and also pads objects of other types
                                    (except CHARACTER) if they could
                                    possibly share storage with promoted
                                    objects.
                       dblpad8    - Performs the same promotions as dbl8,
                                    and also pads objects of other types
                                    (except CHARACTER) if they could
                                    possibly share storage with promoted
                                    objects.
                       dblpad     - Combines the promotions done by dblpad4
                                    and dblpad8, and also pads objects of
                                    other types (except CHARACTER) if they
                                    could possibly share storage with
                                    promoted objects.
       -qcache=<subopt1>=<val1>[:<subopt2>=<val2>[:...:<suboptN>=<valN>]]
                     Specifies the cache configuration for a specific
                     execution machine.  Suboptions include:
                       assoc=<num> - Specifies the set associativity of
                                     the cache:
                                       1   = Fully associative cache.
                                       n>1 = n-way set-associative cache.
                       auto        - Automatically detects the specific cache
                                     configuration of the compiling machine.
                                     It assumes that the execution environment
                                     will be the same as the compilation
                                     environment.
                       cost=<cycles>
                                   - Specifies the performance penalty
                                     resulting from a cache miss.
                       level=<level>
                                   - Specifies which level of cache is
                                     affected:
                                       1 = Basic cache.
                                       2 = Level-2 cache, or the table
                                           lookaside buffer (TLB) if the
                                           machine has no level-2 cache.
                                       3 = TLB, in a machine that does
                                           have a level-2 cache.
                       line=<bytes>
                                   - Specifies the line size of the cache.
                       size=<Kbytes>
                                   - Specifies the total size of the cache.
                       type=<type> - Specifies the type of cache that the
                                     settings apply to:
                                       C or c = Combined data and instruction
                                                cache.
                                       D or d = Data cache.
                                       I or i = Instruction cache.
       -qcharlen=<num>
                     Obsolete.  It is still accepted but has no effect.
                     Specifies maximum length for character data items.
       -qci=<num1>[:<num2>[: ... [:<numn>] ... ]]
                     Specifies identification numbers (from 1 to 255)
                     of conditional includes.
       -qctyplss=<suboption>
                     arg   - This suboption provides the same behaviour as
                             the -qctyplss option with no suboptions, with
                             the exception that if a Hollerith constant is
                             used as an actual argument, it is passed to the
                             procedure as if it were an integer actual
                             argument.
                     noarg - This suboption provides the same behaviour as
                             the -qctyplss option with no suboptions.
       -qdirective=<string1>[:<string2>[: ... [:<stringn>] ... ]]
                     Specifies target strings to be recognized in a comment
                     directive.  When compiling using -qsmp,
                     -qdirective=smp$:$omp:ibmp is turned on by default.
       -qdpc=e       All single-precision constants, including constants
                     with an e exponent, are treated as double-precision
                     constants.
       -qessl        Specifies that Engineering and (ESSL) routines should be
                     used in place of some Fortran 90 intrinsic procedures
                     when there is a safe opportunity to do so.
       -qextern=<name1>[:<name2>[: ... [:<namen>] ...]]
                     Specifies the names of subprograms that are to be
                     treated by the compiler as if they appear in EXTERNAL
                     statements.
       -qfixed=<num> States that Fortran code is in fixed source form, and
                     optionally specifies the maximum line length.
       -qflag=<sev1>:<sev2>
                     Specifies severity level of diagnostics to be reported
                     in listing, <sev1>, and on screen, <sev2>.  Severity
                     levels include:
                       I - Informational messages.
                       L - Language-level messages.
                       W - Warning messages.
                       E - Error messages.
                       S - Severe error messages.
                       U - Unrecoverable error messages.
                     Note that both <sev1> and <sev2> must be specified.
       -qfloat=<suboption1>[:<suboption2>[:...:<suboptionN>]]
                     Specifies various floating-point suboptions.
                     Suboptions include:
                       fltint       - For floating-point to integer conversion,
                                      uses faster inline code, which does not
                                      check for overflow.
                       hsflt        - Never rounds single-precision
                                      expressions, and doesn't perform range
                                      checking for floating-point to integer
                                      conversions.
                       hssngl       - Rounds single-precision expressions only
                                      when the results are stored into REAL(4)
                                      memory locations.
                       nans         - Detects operations involving signaling
                                      NaN values.
                       nofold       - Suppresses compile-time evaluation
                                      of constant floating-point expressions.
                       nomaf        - Suppresses generation of multiply-add
                                      instructions.
                       nostrictnmaf - Allows the compiler to perform
                                      optimizations that introduce
                                      multiply-add operations that do not
                                      preserve the sign of a zero value.
                       rndsngl      - Ensures strict adherence to IEEE
                                      standard.  That is, all operations on
                                      single-precision values produce results
                                      that remain in single precision.
                       rrm          - Specifies run-time rounding mode.
                                      Compile with this option if the run-time
                                      rounding mode is round toward minus
                                      infinity, round toward positive infinity,
                                      or not known.
                       rsqrt        - Changes a division by the result of a
                                      square root operation into a multiply
                                      by the reciprocal of the square root.
                       strictnmaf   - Ensures that the compiler does not
                                      perform optimizations that introduce
                                      multiply-add operations that do not
                                      preserve the sign of a zero value.
       -qflttrap=<suboption1>[:<suboption2>[:...:<suboptionN>]]
                     Determines what types of floating-point exception
                     conditions to detect at run time.  The program receives
                     a SIGTRAP signal when the corresponding exception occurs,
                     provided exception-checking is enabled. Suboptions
                     include:
                       overflow   - Detect and trap on floating-point overflow.
                       underflow  - Detect and trap on floating-point
                                    underflow.
                       zerodivide - Detect and trap on floating-point division
                                    by zero.
                       invalid    - Detect and trap on floating-point invalid
                                    operations.
                       inexact    - Detect and trap on floating-point inexact.
                       enable     - Turn on checking for the specified
                                    exceptions in the main program.
                       imprecise  - Only check for the specified exceptions
                                    on subprogram entry and exit.
       -qfree=<suboption>
                     States that Fortran code is in either F90 or IBM
                     free format.  <name> can be one of:
                       ibm   -  IBM free format.
                       f90   -  Fortran 90 free format.
       -qhalt=<sev>  Stops compiler after first phase if severity of errors
                     detected equals or exceeds <sev>, where <sev> is
                     defined as for the -qflag option with the exception of:
                       Q - A severity level that can never be generated by
                           any defined error condition.  Specifying it
                           prevents the compiler from halting even if it
                           encounters unrecoverable errors.
       -qhot=<suboption>
                     Determines whether or not to perform high-order
                     transformations on loops and array language during
                     optimization, and whether or not to pad array dimensions
                     and data objects to avoid cache misses. Suboptions
                     include:
                       arraypad   - The compiler will pad any arrays where it
                                    infers there may be a benefit.  Make sure
                                    that you have not used equivalence
                                    association for any arrays in files
                                    compiled with this option as the compiler
                                    does not perform any checking before
                                    padding arrays.
                       arraypad=n - The compiler will pad every array in the
                                    code.  The pad amount must be a positive
                                    integer value.
                       novector   - The compiler will avoid replacing code by
                                    calls to vector library routines.
                       vector     - Allows the compiler to optimize by
                                    replacing code with calls to vector
                                    library routines.
       -qieee=<suboption>
                     Specifies the rounding mode for the compiler to use when
                     evaluating constant floating-point expressions at compile
                     time.  <suboption> is one of:
                       Near  -  Round to nearest representable number.  This
                                is the default.
                       Minus -  Round toward minus infinity.
                       Plus  -  Round toward plus infinity.
                       Zero  -  Round toward zero.
       -qinit=f90ptr Sets the initial values of pointers to null, and makes
                     their association status disassociated instead of
                     undefined.
       -qinitauto[=<hex_value>]
                     Initializes each byte or word of storage for automatic
                     variables to a specific value (typically 00 or FF),
                     to help locate variables that are referenced before
                     being defined.
       -qintsize=<bytes>
                     Sets the size of default INTEGER and LOGICAL values.
       -qipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                     Enhances -O optimization by doing detailed analysis
                     across procedures.  One of -O, -O2, or -O3 is required
                     when using -qipa.  Regular expressions are supported
                     when specifying <procedure_names> on the -qipa=exits,
                     -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                     -qipa=safe and -qipa=unknown suboptions.
                     Suboptions include:
                       exits=<procedure_names>
                                  - Specifies a selected set of procedures
                                    which always end the program.
                       inline=<inline-options>
                         The "ipa=inline=" command can take a colon-separated
                         list of inline options, which are as follows:
                           inline={auto|noauto}
                                       - Specifies whether or not to
                                         automatically inline expansion.
                           inline=<procedure_names>
                                       - Specifies a comma-separated list of
                                         procedures to try to inline.
                           inline=limit=<num>
                                       - Changes the size limits that deter-
                                         mine how much inline expansion to do.
                                         <num> is the optimizer's approximation
                                         of the number of bytes of code which
                                         will be generated.
                           inline=threshold=<num>
                                       - Specifies the upper size limit on
                                         procedures to inline.  <num> is
                                         defined as for inline=limit.
                       isolated=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that do not directly refer to any global
                                    variable.
                       level=<level>
                                  - Determines the amount of IPA analysis
                                    and optimization performed:
                                      0 = Does only minimal interprocedural
                                          analysis and optimization.
                                      1 = Turns on inlining, limited alias
                                          analysis, and limited call-site
                                          tailoring.
                                      2 = Full interprocedural data flow and
                                          alias analysis.
                       list=[filename|short|long]
                                  - Specifies an output listing file name
                                    during the link phase, in the event that
                                    an object listing has been requested
                                    using the -qlist option.  The default
                                    name is "a.lst".  The suboptions short and
                                    long determine which listing sections will
                                    be included.
                       lowfreq=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures that are likely to be
                                    called infrequently during the course
                                    of a typical program run.
                       missing={unknown|safe|isolated|pure}
                                  - Specifies the default assumption for
                                    procedures not compiled with -qipa.
                       noinline=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures which are not to be inlined.
                       noobject   - Speeds up compilation, but the object
                                    files cannot be used in non-IPA
                                    compilations.  This option is ignored if
                                    -S has been specified.
                       partition={small|medium|large}
                                  - Specifies the size of program sections
                                    that are analyzed together.  Larger
                                    partitions may produce better analysis but
                                    require more storage.
                       pure=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that are "isolated", "safe", and do not
                                    modify any data objects that are visible
                                    to the caller.
                       safe=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that do not call any other part of the
                                    program.
                       stdexits   - Specifies that compiler-defined exit
                                    routines can be optimized as with the
                                    "exits" suboption.  The procedures are
                                    abort, exit, _exit, and _assert.
                       nothreads   - Don't run parallel processes. Equivalent to
                                     running one serial process.
                       threads[=N] - Run as many parallel processes as are
                                     available, or N processes.  N must be a
                                     positive integer.
                       unknown=<procedure_names>
                                  - Specifies a comma-separated list of
                                    procedures not compiled with -qipa and
                                    that may update global variables and
                                    dummy arguments and call other parts of
                                    the program compiled with -qipa.
                       The following options are intended for use by the
                       link-time phase of -qipa:
                       -qlibansi  - Assumes that all functions with the name
                                    of an ANSI C defined library function are,
                                    in fact, the library functions.
                                    -qnolibansi is the default.
                       -qlibessl  - Assumes that all functions with the name
                                    of an ESSL defined library functions are,
                                    in fact, the library functions.
                                    -qnolibessl is the default.
                       -qlibposix - Assumes that all functions with the name
                                    of a POSIX 1003.1 defined library function
                                    are, in fact, the system functions.
                                    -qnolibposix is the default.
       -qlanglvl=<suboption>
                     Determines which language standard (or superset or
                     subset of a standard) to check against for nonconformance.
                     Suboptions include:
                       77std      - Accepts the language specified by the
                                    ANSI F77 standard.
                       90std      - Accepts the language specified by the
                                    ISO F90 standard.
                       90pure     - Same as 90std, except that it reports
                                    errors for any obsolescent Fortran 90
                                    features used.
                       90ext      - Obsolete suboption that is equivalent
                                    to extended.
                       95std      - Accepts the language specified by the
                                    ISO F95 standard.
                       95pure     - Same as 95std, except that it also
                                    reports errors for any obsolescent
                                    Fortran 95 features used.
                       extended   - Accepts the full Fortran 95 language
                                    standard plus all extensions,
                                    effectively turning off language-
                                    level checking.
       -qlargepage   Indicates that a program, designed to execute in a large
                     page memory environment, can take advantage of large
                     16 MB pages provided on POWER4 or better CPUs.
       -qmaxmem=<num>
                     Limits the amount of memory used by space intensive
                     optimizations to <num> kilobytes, where <num> is
                     a positive integer.  The special <num> value -1
                     may also be used to indicate unlimited memory.
       -qmoddir=<directory>
                     Specifies the location for any .mod files that
                     the compiler writes.
       -qport=<suboption>
                     This option offers small semantic changes to aid in
                     porting from other compilers.  For each suboption x,
                     there is a corresponding suboption nox, in which the
                     semantic change is not performed.  Suboptions include:
                       hexint - When a typeless constant hex string is passed
                                to the INT intrinsic, it is treated as an
                                integer value.  The behaviour without this
                                suboption specified (or with nohexint
                                specified) is to implicitly convert it to a
                                real value.
                       mod    - When two arguments of different kinds are
                                passed to the MOD intrinsic, the argument with
                                the smaller kind is converted to the same kind
                                as the argument with the larger kind.  The
                                behaviour without this suboption specified
                                (or with nomod specified) is to report an error
                                in this situation.
                       typestmt - The TYPE statement is supported and behaves in
                                a similar way to the PRINT statement. The
                                behaviour without this suboption specified
                                (or with notypestmt specified) is to not support
                                the TYPE statement.
       -qposition=<suboption1>[:<suboption2>]
                     Positions the file pointer at the end of the file when
                     data is written after an OPEN statement with no
                     POSITION= specifier, and the corresponding STATUS=
                     value is specified.  Suboptions include appendold and
                     appendunknown.
       -qrealsize=<bytes>
                     Sets the size of the default REAL, DOUBLE PRECISION,
                     COMPLEX and DOUBLE COMPLEX values.  The allowed values
                     for <bytes> are 4 and 8.
       -qreport=<suboption> ...
                     Produces one or more reports about how the program is
                     parallelized and how loops are optimized.  Suboptions
                     include:
                       hotlist - Produces a report showing how loops are
                                 transformed.
                       smplist - Produces a report showing how the program is
                                 parallelized.
       -qsave=<suboption>
                     Specifies the default storage class for local variables.
                     Suboptions include:
                       all         - The default storage class for all local
                                     variables is STATIC.  Specifying this
                                     suboption is the same as specifying the
                                     -qsave option without any suboptions.
                       defaultinit - The default storage class is STATIC for
                                     local variables of derived type that have
                                     default initialization specified.  For
                                     all other local variables, the default
                                     storage class is AUTOMATIC.
       -qsclk=[centi | micro]
                     -qsclk=centi uses centisecond resolution for values
                     returned from the SYSTEM_CLOCK intrinsic procedure.
                     This is the default.
                     -qsclk=micro uses microsecond resolution.
       -qsigtrap=<trap_handler>
                     Installs a user-written trap handler in a main program.
       -qsmallstack  Minimizes stack usage, where possible.
                     The default is -qnosmallstack.
       -qsmp=<suboptions>
                     Specifies that code should be produced for an SMP system.
                     Suboptions include:
                       nested_par    - Prescriptive nested parallel constructs
                                       are parallelized by the compiler.
                       noauto        - Automatic parallelization is turned off.
                       noopt         - The compiler will not optimize SMP
                                       constructs.
                       norec_locks   - Recursive locks will not be used to
                                       implement critical sections.
                       omp           - If you specify this, the compiler
                                       enforces compliance with the OpenMP
                                       Fortran API.
                       opt           - The compiler will optimize SMP
                                       constructs.
                       rec_locks     - Recursive locks will be used to
                                       implement critical sections.
                       schedule=<suboptions>
                                     - The schedule suboption takes
                                       subsuboptions.  For their descriptions
                                       please see the User's Guide:
                                         affinity[=n]
                                         dynamic[=n]
                                         guided[=n]
                                         runtime
                                         static[=n]
                                         threshold[=n]
       -qspillsize=<bytes>
                     The long form of -NS.  See the -N Option.
       -qsuffix=<option>=<suffix>
                     Specifies the source-file suffix on the command line
                     instead of in the .cfg file.  Options include:
                       f=<suffix>  - Where <suffix> represents the new
                                     source-file-suffix.
                       o=<suffix>  - Where <suffix> represents the new
                                     object-file-suffix.
                       s=<suffix>  - Where <suffix> represents the new
                                     assemble-source-file-suffix.
                       cpp=<suffix>- Where <suffix> represents the new
                                     preprocessed-source-file-suffix.
       -qsuppress=<nnnn-mmm>[:nnnn-mmm ...]
                     Suppresses generation in the output stream and in the
                     listing file of the compiler message(s) indicated.
                     Where <nnnn-mmm> is a 7 digit compiler message number.
       -qtbtable={none | small | full}
                     Specifies how much traceback information to include in
                     object files, which can reduce file size but limit
                     debugging and profiling.
       -qtune=<option>
                     Specifies the architecture on which the executable
                     program is optimized.  Suboptions include:
                       601        - Produces an object optimized for all
                                    the PowerPC 601 processors.
                       603        - Produces an object optimized for all
                                    the PowerPC 603 processors.
                       604        - Produces an object optimized for all
                                    the PowerPC 604 processors.
                       auto       - Automatically detects the specific
                                    processor type of the compiling machine.
                       pwr        - Produces an object optimized for the
                                    POWER hardware platforms.
                       p2sc       - The optimizations are tuned for the
                                    POWER2 Super Chip.
                       pwr2/pwrx  - Produces an object optimized for the
                                    POWER2 hardware platforms.
                       pwr2s      - Produces an object optimized for a
                                    subset of POWER2 hardware platforms,
                                    the desktop models with narrow memory
                                    bandwidth.
                       pwr3       - Produces an object optimized for the
                                    POWER3 hardware platforms.
                       pwr4       - Produces an object optimized for the
                                    POWER4 hardware platforms.
                       rs64a      - Produces an object optimized for the
                                    PowerPC RS64I processor.
                       rs64b      - Produces an object optimized for the
                                    PowerPC RS64II processor.
       -qxlf77=<settings>
                     Provides backward compatibility with the XL Fortran
                     language from previous versions, for aspects of
                     language semantics and I/O data format that have changed.
                     Suboptions include:
                       noblankpad - Produces conversion errors when reading
                                    from an internal or direct-access file
                                    if the format requires more characters
                                    than the record contains.
                       gedit77    - Uses FORTRAN 77 semantics for the output
                                    of REAL objects with the G edit descriptor.
                       intarg     - Converts all the integer arguments of
                                    an intrinsic procedure to the kind of
                                    the longest argument, if they are of
                                    different kinds.
                       intxor     - Treats .XOR. as a logical binary intrinsic
                                    operator rather than a defined operator.
                       noleadzero - Does not produce a leading zero in real
                                    output under the D, E, F and Q edit
                                    descriptors.
                       oldboz     - Turns blanks into zeros for data read by
                                    B, O, and Z edit descriptors, regardless
                                    of the BLANK= specifier or any BN or BZ
                                    control edit descriptors.
                       persistent - Saves the addresses of arguments to
                                    subprograms with ENTRY statements in
                                    static storage, for compatibility with
                                    XL Fortran Version 2.
                       softeof    - Allows READ and WRITE operations when a
                                    unit is positioned after its endfile
                                    record, unless that position is the result
                                    of executing an ENDFILE statement.
       -qxlf90=<settings>
                     Provides backward compatibility with the Fortran 90
                     standard for certain aspects of the language.
                     Suboptions include:
                       signedzero  - Determines how the SIGN(A,B) function
                                     handles signed real 0.0. In addition,
                                     determines  whether negative internal
                                     values will be prefixed with a minus
                                     when formatted output would produce
                                     a negative sign zero.
                       autodealloc - Determines whether the compiler
                                     deallocates allocatable arrays
                                     that are declared locally
                                     without either the SAVE or the
                                     STATIC  attribute, and have a
                                     status of currently allocated
                                     when the supbrogram terminates.
       -qxref=full   Produce cross-reference listing (all names, whether
                     referenced or not).

  For a detailed description of each option, please refer to the
  XL Fortran for AIX User's Guide.

configure:5244: $? = 249
configure:5252: checking whether we are using the GNU Fortran 77 compiler
configure:5266: f77 -c  conftest.F >&5
"conftest.F", line 3.15: 1515-019 (S) Syntax is incorrect.
** main   === End of Compilation 1 ===
1501-511  Compilation failed for file conftest.F.
configure:5272: $? = 1
configure: failed program was:
|       program main
| #ifndef __GNUC__
|        choke me
| #endif
| 
|       end
configure:5297: result: no
configure:5303: checking whether f77 accepts -g
configure:5315: f77 -c -g conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:5321: $? = 0
configure:5324: test -z 			 || test ! -s conftest.err
configure:5327: $? = 0
configure:5330: test -s conftest.o
configure:5333: $? = 0
configure:5345: result: yes
configure:5375: checking the maximum length of command line arguments
configure:5440: result: 8192
configure:5451: checking command to parse /usr/bin/nm -B output from cc object
configure:5540: cc -c  -DNDEBUG conftest.c >&5
configure:5543: $? = 0
configure:5547: /usr/bin/nm -B conftest.o \| sed -n -e 's/^.*[ 	]\([BCDT][BCDT]*\)[ 	][ 	]*\(\)\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2\3 \3/p' \> conftest.nm
configure:5550: $? = 0
configure:5602: cc -o conftest  -DNDEBUG  conftest.c conftstm.o >&5
configure:5605: $? = 0
configure:5643: result: ok
configure:5647: checking for objdir
configure:5662: result: .libs
configure:5752: checking for ar
configure:5779: result: ar
configure:5832: checking for ranlib
configure:5848: found /usr/bin/ranlib
configure:5859: result: ranlib
configure:5912: checking for strip
configure:5928: found /usr/bin/strip
configure:5939: result: strip
configure:6201: checking if cc static flag  works
configure:6224: result: yes
configure:6290: checking for cc option to produce PIC
configure:6467: result: 
configure:6532: checking if cc supports -c -o file.o
configure:6553: cc -c  -DNDEBUG -o out/conftest2.o conftest.c >&5
configure:6557: $? = 0
configure:6577: result: yes
configure:6603: checking whether the cc linker (ld) supports shared libraries
configure:6997: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:7003: $? = 0
configure:7006: test -z 			 || test ! -s conftest.err
configure:7009: $? = 0
configure:7012: test -s conftest
configure:7015: $? = 0
configure:7450: result: yes
configure:7521: checking dynamic linker characteristics
configure:8073: result: aix5.1.0.0 ld.so
configure:8077: checking how to hardcode library paths into programs
configure:8102: result: immediate
configure:8116: checking whether stripping libraries is possible
configure:8137: result: no
configure:8944: checking if libtool supports shared libraries
configure:8946: result: yes
configure:8949: checking whether to build shared libraries
configure:9007: result: no
configure:9010: checking whether to build static libraries
configure:9014: result: yes
configure:9106: creating libtool
configure:9653: checking for ld used by g++
configure:9720: result: ld
configure:9729: checking if the linker (ld) is GNU ld
configure:9744: result: no
configure:9795: checking whether the g++ linker (ld) supports shared libraries
configure:9964: g++ -o conftest  -DNDEBUG  conftest.cc  >&5
configure:9970: $? = 0
configure:9973: test -z 			 || test ! -s conftest.err
configure:9976: $? = 0
configure:9979: test -s conftest
configure:9982: $? = 0
configure:10621: result: yes
configure:10639: g++ -c  -DNDEBUG conftest.cc >&5
configure:10642: $? = 0
configure:10738: checking for g++ option to produce PIC
configure:10990: result: 
configure:11055: checking if g++ supports -c -o file.o
configure:11076: g++ -c  -DNDEBUG -o out/conftest2.o conftest.cc >&5
configure:11080: $? = 0
configure:11100: result: yes
configure:11126: checking whether the g++ linker (ld) supports shared libraries
configure:11154: result: yes
configure:11225: checking dynamic linker characteristics
configure:11777: result: aix5.1.0.0 ld.so
configure:11781: checking how to hardcode library paths into programs
configure:11806: result: immediate
configure:11820: checking whether stripping libraries is possible
configure:11841: result: no
configure:13125: checking if libtool supports shared libraries
configure:13127: result: yes
configure:13130: checking whether to build shared libraries
configure:13148: result: no
configure:13151: checking whether to build static libraries
configure:13155: result: yes
configure:13167: checking for f77 option to produce PIC
configure:13344: result: 
configure:13409: checking if f77 supports -c -o file.o
configure:13430: f77 -c  -o out/conftest2.o conftest.f >&5
** t   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:13434: $? = 0
configure:13454: result: no
configure:13480: checking whether the f77 linker (ld) supports shared libraries
configure:13854: f77 -o conftest   conftest.f  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:13860: $? = 0
configure:13863: test -z 			 || test ! -s conftest.err
configure:13866: $? = 0
configure:13869: test -s conftest
configure:13872: $? = 0
configure:14307: result: yes
configure:14378: checking dynamic linker characteristics
configure:14930: result: aix5.1.0.0 ld.so
configure:14934: checking how to hardcode library paths into programs
configure:14959: result: immediate
configure:14973: checking whether stripping libraries is possible
configure:14994: result: no
configure:19069: checking whether to enable maintainer-specific portions of Makefiles
configure:19078: result: no
configure:19137: checking whether to enable memory checking
configure:19148: result: no
configure:19152: checking whether to enable memory profiling
configure:19163: result: no
configure:19228: checking for gcc
configure:19254: result: cc
configure:19498: checking for C compiler version
configure:19501: cc --version </dev/null >&5
cc: 1501-216 command option -version is not recognized - passed to ld
  C for AIX Compiler, Version 6

  Usage:
     xlc [ option | inputfile ]...
     cc [ option | inputfile ]...
     c89 [ option | inputfile ]...
     xlc128 [ option | inputfile ]...
     cc128 [ option | inputfile ]...
     xlc_r [ option | inputfile ]...
     cc_r [ option | inputfile ]...
     xlc_r4 [ option | inputfile ]...
     cc_r4 [ option | inputfile ]...
     xlc_r7 [ option | inputfile ]...
     cc_r7 [ option | inputfile ]...

  Description:
     The xlC and related commands compile C and C++ source files.
     They also processes assembler source files and object files. Unless the
     -c option is specified, xlC calls the linkage editor to produce a
     single object file. Input files may be any of the following:
       1. file name with .c suffix: C source file
       2. file name with .i suffix: preprocessed C or C++ source file
       3. file name with .o suffix: object file for ld command
       4. file name with .s suffix: assembler source file
       5. file name with .so suffix: shared object file

  Options:
     Options can be flag options or keyword options:

       1. Flag options:

        -#        Display language processing commands but do
                  not invoke them; output goes to stdout.
        -bdynamic, -bstatic
                  Determines which types of library files are searched by
                  the linkage editor.
        -brtl     Tells the linkage editor to accept both .so and .a
                  library file types.
        -B<prefix>
                  Construct alternate compiler/assembler/linkage editor
                  program names. <prefix> is added to the beginning of
                  the standard program names.
        -c        Do not send object files to the linkage editor.
        -C        Write comments to output when doing preprocessing,
                  used with -E and -P.
        -D<name>[=<def>]
                  Define <name> as in #define directive. If <def> is
                  not specified, 1 is assumed.
        -E        Preprocess but do not compile; output goes to stdout
        -f<filename>
                  Passes to the linkage editor the filename of a file
                  containing a list of input files to be processed.
        -F<x>[:<stanza>]
                  Use alternate configuration file <x> with optional
                  <stanza>. If <stanza> is not specified, the assumed stanza
                  is the name of the command used to invoke the compiler.
        -g        Produce information for the debugger.
        -G        Tells the linkage editor to create a dynamic library.
        -I<dir>   Search in directory <dir> for include files that
                  do not start with an absolute path.
        -l<key>   Search the specified library file,
                  where <key> selects the file lib<key>.a.
        -L<dir>   Search in directory <dir> for files specified by -l<key>.
        -ma       Generate inline calls to the "alloca" function as if
                  "#pragma alloca" directives were in the source file.
        -M        Generate information to be included in a "make"
                  description file; output goes to .u file.
        -o<name>  Name the executable file <name> instead of a.out.
                  When used with the -c option and one source file,
                  name the object file <name> instead of filename.o.
                  If <name> is the name of a directory, files generated by
                  the compiler will be placed into that directory.
        -O        Optimize generated code.
        -O2       Same as -O.
        -O3       Perform some memory and compile time intensive
                  optimizations in addition to those executed with -O2.
                  The -O3 specific optimizations have the potential to
                  alter the semantics of a user's program.
                  The compiler guards against these optimizations at -O2
                  and the option -qstrict is provided at -O3 to turn off
                  these aggressive optimizations.
        -O4       Equivalent to -O3 -qipa with automatic generation of
                  architecture and tuning option ideal for that platform.
        -O5       Equivalent to -O3 -qipa=level=2 with automatic
                  generation of architecture and tuning option ideal for
                  that platform.
        -p        Generate profiling support code.  Same as -qprofile=p.
        -pg       Generate profiling support code including BSD
                  profiling support.  Same as -qprofile=pg.
        -P        Preprocess but do not compile; output goes to .i file.
        -Q<x>, -qinline<x>
                  Inline all appropriate functions where x can be
                  one of the following:
                    !       Not inline any function (equivalent to -qnoinline)
                    =<lc>   Inline if number of source statement in
                            function is less than the number specified
                            in <lc>.
                    -<nm>   Not inline function listed by names in <nm>
                    +<nm>   Attempt to inline function listed by names
                            in <nm>.
        -r        Produce the output file without linking any library.
        -S        Produce a .s file for any source file processed by the
                  compiler.
        -t<x>     Apply prefix from the -B option to the specified program <x>,
                  where x can be one or more of the following:
                    a = assembler
                    b = compiler backend
                    c = compiler frontend
                    i = compiler inliner
                    I = inter-procedural analysis - compile phase
                    l = linkage editor
                    L = inter-procedural analysis - link phase.
                    p = preprocessor
        -U<name>  Undefine name as in #undef directive.
        -v        Displays language processing commands as they
                  are invoked by xlc; output goes to stdout.
        -V        Displays commands as they are invoked by xlC;
                  output goes to stdout.
        -w        Suppress informational, language-level, and
                  warning messages.
        -W<x,y>   Give the options <y> to the compiler program <x>
                  where x can be one or more of the following:
                    <a,b,c,f,I,l,L,p>
        -y<x>     Specify compile-time rounding of constant floating-point
                  expressions, where <x> can be one of the following:
                    m = round toward minus infinity
                    n = round to nearest
                    p = round toward positive infinity
                    z = round toward zero.

       2. Keyword options:

          Keyword options are specified in one of the following ways:

          -q<option>
          -q<option>=<parameter>
          -q<option>=<parameter>:<parameter>

          where <option> is an option name and <parameter> is a
          parameter value.
          Keyword options with no parameters represent switches
          that may be either on or off. The keyword by itself turns
          the switch on, and the keyword preceded by the letters NO
          turns the switch off. For example, -qLIST tells the
          compiler to produce a listing and -qNOLIST tells the
          compiler not to produce a listing. If an option that
          represents a switch is set more than once, the compiler
          uses the last setting.

          Keyword option and parameter names may appear in either
          UPPER CASE or lower case letters in the xlc command.


          Options without parameters:

          32          Selects 32-bit compiler mode.
          64          Selects 64-bit compiler mode.
          ansialias   Use type-based aliasing during optimization.
          compact     Reduce code size where possible, at the expense
                      of execution speed.  Code size is reduced by
                      inhibiting optimizations that replicate or expand
                      code inline.
          cpluscmt    Permit "//" to introduce a comment that lasts
                      until the end of the current source line, as in C++.
          dbcs        String literals and comments can contain DBCS
                      characters (same as mbcs option).
          dbxextra    Generate symbol table information for unreferenced
                      variables. By default such information is not generated
                      thus reducing the size of the executable compiled with
                      the "-g" option.  Same as -qsymtab=unref.
          digraph     Allow special digraph
          dollar      Allow '$' as an identifier character
          dpcl        Generates symbols for tools based on the Dynamic
                      Probe Class Library (DPCL)
          extchk      Perform external name type-checking and function
                      call checking.
          fdpr        Collect information about programs for use with
                      the AIX fdpr (Feedback Directed Program Restructuring)
                      performance-tuning utility.
          flttrap     Generate instructions to trap floating-point
                      exceptions.
          fold        Specifies that constant floating-point expressions
                      are to be evaluated at compile time.
          fullpath    Specifies the path information stored for files when
                      you use "-g" and the symbolic debugger.
          funcsect    Place instructions for each function in a separate csect.
          heapdebug   Enables debug versions of memory management functions.
          hot         Determines whether or not to perform high-order
                      transformations on loops during optimization.
          idirfirst   Specify the search order for files included with
                      the #include "file_name" directive.  Use -qidirfirst
                      with the -Idirectory option.  If -qidirfirst option
                      is specified, the directories specified by the
                      -Idirectory option are searched before the directory
                      where the current file resides.
          ignerrno    Tell the optimizer that the program will never
                      refer to or set errno.  This allows additional
                      optimizations.
          inlglue     Generate fast external linkage by inlining the
                      code (pointer glue code) necessary at calls
                      via a function pointer and calls to external
                      procedures.
          largepage   Take advantage of 16M pages, which will allow for
                      reduced TLB entries and allow hardware prefetching
                      to be done more efficiently.
          ldbl128     Increase long double size from 64 to 128 bits.
          libansi     Assumes that all functions with the name of an
                      ANSI C library functions are in fact the system functions.
          linedebug   Generates abbreviated line number and source file name
                      information for the debugger.
          list        Produce an object listing; output goes to .lst file.
          listopt     Display the settings of all options; output goes
                      to .lst file.
          longdouble  Increase long double size from 64 to 128 bits.
          longlit     Changes implicit type selection for integer constants in
                      64-bit mode.
          longlong    Allow long long integers.
          macpstr     Allow '\p' as the first character of a string constant
                      which will be replaced by the length in bytes.
          makedep     Creates an output file that contains targets suitable for
                      inclusion in a description file for the AIX make command.
          mbcs        String literals and comments can contain DBCS
                      characters (same as dbcs option).
          mkshrobj    Create a shared object from generated object files.
          noprint     Direct listing to /dev/null.
          nostdinc    Specify which files are included with the #include
                      "file_name" and #include <file_name> directives.
                      If -qnostdinc is specified, the /usr/include directory
                      is not searched.
          optimize    Same as O and O2. Perform optimization that is the
                      mix between speed and size.  (If -qnooptimize is
                      specified, it is equivalent to -qoptimize=0.)
          pascal      Accept and ignore the keyword 'pascal' as a
                      type modifier.
          pdf1, pdf2  Perform aggressive optimizations with profile
                      directed feedback.
          phsinfo     Produce compiler phase information; output goes to
                      stdout.
          proto       Assert that procedure call points agree
                      with their declarations even if the procedure has
                      not been prototyped. This allows the caller to
                      pass floating point arguments in floating point
                      registers instead of general purpose registers.
          report      Adds information to the listing file on the loop
                      transformations that have been carried out.
                      This option requires either -qhot or -qsmp
                      in order to have effect.
          ro          Put string literals in read only area.
          roconst     Put constant values in read only area.
          showinc     Include the source of all included files in the
                      source listing, if the SOURCE option is in effect.
          smallstack  Reduce the size of the stack frame, allowing better use
                      of a limited stack size.
          source      Produce a source listing; output goes to .lst file.
          srcmsg      Reconstruct source lines in error along with the
                      diagnostic messages in the stderr file.
          statsym     Adds user-defined, nonexternal names that have a
                      persistent storage class, such as initialized and
                      uninitialized static variables, to the name list
                      (the symbol table of xcoff objects).  Same as
                      -qsymtab=static.
          strict      Turns off aggressive optimizations which have the
                      potential to alter the semantics of a user's program.
                      This option also sets -qfloat=nofltint:norsqrt.
          strict_induction
                      Turns off induction variable optimizations
                      that have the potential to alter the semantics of a
                      user's program. The default is "nostrict_induction" at
                      -O2 or higher and "strict_induction" otherwise.
                      "nostrict_induction" is recomended if your program does
                      not have overflows or wrap arounds of loop induction
                      variables.
          syntaxonly  Causes the compiler to perform syntax checking without
                      generating an object file.
          threaded    Indicates to the compiler that the program will execute
                      in multi-threaded environment.
          tocmerge    Read from the file specified in -bImportfile linker
                      option and merge the address information to access
                      ranges of external addresses using a single Table Of
                      Content entry.
          upconv      Preserves the unsigned specification when performing
                      integral promotions.
          warn64      Enables checking for possible long-to-integer or
                      pointer-to-integer truncation.
          unwind      Enables stack unwinding.  The optimization prologue
                      tailoring reduces the number of saves and restores
                      of non-volatile registers, but is enabled only when
                      stack unwinding is disabled.
          xcall       Generate code to static routines within a compilation
                      unit as if they were external routines.
          xref        Produce a cross-reference listing containing
                      only referenced names.



          Options with parameters:
          aggrcopy=[no]overlap
                      Asserts whether source and destination of aggregate
                      assignments overlap.
          alias=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
                      allp    Pointers are never aliased.
                      ansi    Pointers can only point to an object of the
                              same type. Require -O option.
                      typ     Pointers to different types are never aliased.
          align=<algnopt>
                      bit_packed
                              Similar to packed, except bit-fields are
                              packed as tightly as possible.
                      full    The compiler uses the RISC System/6000
                              alignment rules. This is the same as power.
                      mac68k  The compiler uses the Macintosh**
                              alignment rules.
                      natural The compiler maps structure members to
                              their natural boundaries.
                      packed  The compiler uses the packed alignment rules.
                      power   The compiler uses the RISC System/6000
                              alignment rules.
                      twobyte The compiler uses the Macintosh alignment rules.
                              The mac68k option is the same as twobyte.
          arch=<option>
                      Specifies the architecture on which the executable
                      program will be run.
                      The available options are:
                      com     Produce an object that contains instructions
                              that will run on all the POWER and PowerPC
                              hardware platforms.
                      pwr     Produce an object that contains instructions
                              that will run on the POWER hardware
                              platform.
                      pwr2    Produce an object that contains instructions
                              that will run on the POWER2 hardware
                              platform.
                      pwrx    Same as pwr2.
                      ppc     Produce an object that contains instructions
                              that will run on any of the 32-bit PowerPC
                              hardware platforms.
                      ppcgr   Produce an object that contains optional
                              graphics instructions for PowerPC processors.
                      pwr2s   Produce an object that contains instructions
                              that will run on a pwr2s chip.
                      p2sc    Produce an object that contains instructions
                              that will run on a p2sc chip.
                      601     Produce an object that contains instructions
                              that will run on a 601 chip.
                      602     Produce an object that contains instructions
                              that will run on a 602 chip.
                      603     Produce an object that contains instructions
                              that will run on a 603 chip.
                      604     Produce an object that contains instructions
                              that will run on a 604 chip.
                      403     Produce an object that contains instructions
                              that will run on a 403 chip.
                      rs64a   Produce an object that contains instructions
                              that will run on a rs64a chip.
                      rs64b   Produce an object that contains instructions
                              that will run on a rs64b chip.
                      rs64c   Produce an object that contains instructions
                              that will run on a rs64c chip.
                      pwr3    Produce an object that contains instructions
                              that will run on a POWER3 chip.
                      pwr4    Produce an object that contains instructions
                              that will run on a POWER4 chip.
                      The default is -qarch=com.  If the -qarch option is
                      specified without the -qtune=<option>, the compiler
                      uses the default -qtune value for the specified
                      architecture. Refer to online documentation to find
                      actual default setting of -qtune  for a given -qarch.
          assert=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      typ     Pointers to different types are never aliased.
                      allp    Pointers are never aliased.
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
          attr        Produce an attribute listing containing only
                      referenced names; output goes to .lst file.
          attr=full   Produce an attribute listing containing all names,
                      whether referenced or not; output goes to .lst file.
          bitfields=signed
          bitfields=unsigned
                      Specify whether bitfields will be signed or unsigned.
          cache=<suboption>:<suboption>...
                      Describe the cache configuration for a specific target
                      execution machine. See online documentation for details.
          chars=signed
          chars=unsigned
                      Specify whether the data type char will be signed
                      or unsigned.
          check=<option>
                      Generate code to check for run-time checks.
                      bounds  Runtime checking of addresses when
                              subscripting within an object of known size.
                      divzero Runtime checking of integer division.
                              A trap will occur if an attempt is made to
                              divide by zero.
                      nullptr Runtime checking of addresses
                              contained in pointer variables used to
                              reference storage.
                      all     Switches on all the above suboptions.
          dataimported=<name1>:<name2>: ...
                      Specify which data items are imported.  If no names are
                      specified, all data items are assumed to be imported.
                      This is the default.
          datalocal=<name1>:<name2>: ...
                      Specify which data items are local.  If no names are
                      specified, all data items are assumed to be local.
          enum=<enumopt>
                      Specify whether minimum-sized enumerated types will be
                      produced or not. <enumopt> can be either small, int,
                      1, 2, 4 or 8.
                      small denotes that either one, two, four or eight (valid
                      in 64-bit mode only) bytes of storage will be allocated
                      for enum variables based on the range of the enum
                      constants.
                      int is the default, and causes enum variables to be
                      treated as though they were of type signed int
                      depending on the range of the enum constants.
                      1 will cause enum variables to be packed into 1 byte.
                      2 will cause enum variables to be packed into 2 bytes.
                      4 will cause enum variables to be packed into 4 bytes.
                      8 will cause enum variables to be packed into 8 bytes.
                        (enum=8 is valid in 64-bit mode only)
          flag=<sev1>
                      Specify severity level of diagnostics to be reported
                      in source listing and stderr; the severity level
                      is one of <i,w,e,s,u>.
          flag=<sev1>:<sev2>
                      Specify severity level of diagnostics to be reported
                      in source listing (<sev1>), and stderr (<sev2>);
                      the severity levels are one of <i,w,e,s,u>.
          float=<opt1>:<opt2>:...:<optN>
                      The available options are:
                      emulate Function calls are emitted in place of
                              PowerPC floating-point instructions.
                              Use this option only in a single-threaded
                              stand-alone environment, targeting the
                              PowerPC 403 processor.
                              Do not use this suboption with any of the
                              following:
                              o  -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                              o  -qlongdouble, -qldbl128
                              o  128-bit long double invocation commands
                      fltint  Specify whether range checking of floating
                              point to integer conversions is done.
                              Default at -O2: -qfloat=nofltint.
                              Default at -O3: -qfloat=fltint.
                      hsflt   Never round single-precision expressions,
                              and don't perform range checking for
                              floating-point to integer conversions.
                      hssngl  Round single-precision expressions only
                              when the results are stored into float memory
                              locations.
                      nans    Detect conversion of single-precision NaNS to
                              double precision call checking.
                      nomaf   Suppress generation of multiply-add
                              instructions.
                      nofold  Suppress compile-time evaluation of constant
                              floating-point expressions.
                      rndsngl Ensure strict adherence to IEEE standard.
                              all operations on single-precision values
                              produce results that remain in single
                              precision.
                      rrm     Specify run-time rounding mode. Compile with
                              this option if the run-time rounding mode
                              is round toward minus infinity, round toward
                              positive infinity, or not known.
                      rsqrt   Specify whether a division by the result of a
                              square root can be replaced with a multiply
                              by the reciprocal of the square root.
                              Default at -O2: -qfloat=norsqrt.
                              Default at -O3: -qfloat=rsqrt.
                      spnans  Generate extra instructions to detect signaling
                              NaN on conversion from single precision to
                              double precision.  Obsolete; use the equivalent
                              -qfloat=nans option.
          flttrap=<opt1>:<opt2>:...:<optN>
                      Generate instructions to detect and trap floating-point.
                      The available options are:  overflow, underflow,
                      zerodivide, invalid, inexact, enable, imprecise.
          halt=<sev>  Stop compiler after first phase if severity of errors
                      detected equals or exceeds <sev>; the severity
                      level is one of i, w, e, s, u.
          genproto=<parmnames>
                      Produces ANSI prototypes from K&R function definitions.
          hot=<suboption>
                      Determines whether or not to perform high-order
                      transformations on loops and array language during
                      optimization, and whether or not to pad array dimensions
                      and data objects to avoid cache misses. Suboptions
                      include:
                        arraypad   - The compiler will pad any arrays where it
                                     infers there may be a benefit.  Make sure
                                     that you have not used equivalence
                                     association for any arrays in files
                                     compiled with this option as the compiler
                                     does not perform any checking before
                                     padding arrays.
                        arraypad=n - The compiler will pad every array in the
                                     code.  The pad amount must be a positive
                                     integer value.
                        novector   - The compiler will avoid replacing code by
                                     calls to vector library routines.
                        vector     - Allows the compiler to optimize by
                                     replacing code with calls to vector
                                     library routines.
          ignprag=<option>
                      The available options are:
                      disjoint
                              Ignore pragma disjoint.
                      isolated
                              Ignore pragma isolated_call.
                      omp     Ignore OpenMP parallel processing pragmas.
                      ibm     Ignore IBM parallel processing pragmas.
                      all     Ignore all the above pragmas.
          info
          info=all
                      Produce additional lint-like messages.  For C, it turns
                      on all diagnostic messages for all groups.  For C++, it
                      turns on all diagnostic messages for all groups, except
                      ppt.
          info=<group>
                      Produce additional lint-like messages based on <group>.
                      c99     Code that might behave differently between
                              C89 and C99 language levels
                      cls     Possible problems with generation of classes
                      cmp     Possible redundancies in unsigned comparisons
                      cnd     Possible redundancies or problems in conditional
                              expressions
                      cns     Operations involving constants.
                      cnv     Conversions
                      dcl     Consistency of declarations
                      eff     Statements with no effect
                      enu     Consistency of enum variables
                      ext     Unused external definitions
                      gen     General diagnostic messages
                      gnr     Generation of temporary variables
                      got     Use of goto statements
                      ini     Possible problems with initialization
                      inl     Functions not inlined
                      lan     Language level effects
                      obs     Obsolete features
                      ord     Unspecified order of evaluation
                      par     Unused parameters
                      por     Nonportable language constructs
                      ppc     Possible problems with using the preprocessor
                      ppt     Trace of preprocessor actions
                      private Lists shared variables made private to a
                              parallel loop.
                      pro     Missing function prototypes
                      rea     Code that cannot be reached
                      reduction
                              Lists all variables that are recognized as
                              reduction variables inside a parallel loop.
                      ret     Consistency of return statements
                      trd     Possible truncation or loss of data or precision
                      tru     Variable names truncated by the compiler
                      trx     Hexadecimal floating-point constants that cannot
                              be represented exactly in its evaluation format
                      uni     Unitialized variables
                      use     Unused auto and static variables
          initauto=<hh>
                      Initialialize automatic storage to <hh>. <hh> is a
                      hexadecimal value.  This generates extra code and
                      should only be used for error determination.
          inline[=<x>]
                      This is functionally equivalent to the -Q option.
          ipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                      Enhances -O optimization by doing detailed analysis
                      across procedures.  One of -O, -O2, or -O3 is required
                      when using -qipa.  Regular expressions are supported
                      when specifying <procedure_names> on the -qipa=exits,
                      -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                      -qipa=safe and -qipa=unknown suboptions.
                      Suboptions include:
                        exits=<procedure_names>
                                   - Specifies a selected set of procedures
                                     which always end the program.
                        inline=<inline-options>
                          The "ipa=inline=" command can take a colon-separated
                          list of inline options, which are as follows:
                            inline={auto|noauto}
                                        - Specifies whether or not to
                                          automatically inline expansion.
                            inline=<procedure_names>
                                        - Specifies a comma-separated list of
                                          procedures to try to inline.
                            inline=limit=<num>
                                        - Changes the size limits that deter-
                                          mine how much inline expansion to do.
                                          <num> is the optimizer's approximation
                                          of the number of bytes of code which
                                          will be generated.
                            inline=threshold=<num>
                                        - Specifies the upper size limit on
                                          procedures to inline.  <num> is
                                          defined as for inline=limit.
                        isolated=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not directly refer to any global
                                     variable.
                        level=<level>
                                   - Determines the amount of IPA analysis
                                     and optimization performed:
                                       0 = Does only minimal interprocedural
                                           analysis and optimization.
                                       1 = Turns on inlining, limited alias
                                           analysis, and limited call-site
                                           tailoring.
                                       2 = Full interprocedural data flow and
                                           alias analysis.
                        list=[filename|short|long]
                                   - Specifies an output listing file name
                                     during the link phase, in the event that
                                     an object listing has been requested
                                     using the -qlist option.  The default
                                     name is "a.lst".  The suboptions short and
                                     long determine which listing sections will
                                     be included.
                        lowfreq=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures that are likely to be
                                     called infrequently during the course
                                     of a typical program run.
                        missing={unknown|safe|isolated|pure}
                                   - Specifies the default assumption for
                                     procedures not compiled with -qipa.
                        noinline=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures which are not to be inlined.
                        noobject   - Speeds up compilation, but the object
                                     files cannot be used in non-IPA
                                     compilations.  This option is ignored if
                                     -S has been specified.
                        partition={small|medium|large}
                                   - Specifies the size of program sections
                                     that are analyzed together.  Larger
                                     partitions may produce better analysis but
                                     require more storage.
                        pure=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that are "isolated", "safe", and do not
                                     modify any data objects that are visible
                                     to the caller.
                        safe=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not call any other part of the
                                     program.
                        stdexits   - Specifies that compiler-defined exit
                                     routines can be optimized as with the
                                     "exits" suboption.  The procedures are
                                     abort, exit, _exit, and _assert.
                        nothreads    Single threaded invocation of the compiler
                                     backend.
                        threads      Compiler decides the number of threads
                                     used to invoke the compiler backend.
                        threads=<n>  Up to 'n' threads can be used to invoke
                                     the compiler backend.
                        unknown=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that may update global variables and
                                     dummy arguments and call other parts of
                                     the program compiled with -qipa.
                        The following options are intended for use by the
                        link-time phase of -qipa:
                        -qlibansi  - Assumes that all functions with the name
                                     of an ANSI C defined library function are,
                                     in fact, the library functions.
                                     -qnolibansi is the default.
                        -qlibessl  - Assumes that all functions with the name
                                     of an ESSL defined library functions are,
                                     in fact, the library functions.
                                     -qnolibessl is the default.
                        -qlibposix - Assumes that all functions with the name
                                     of a POSIX 1003.1 defined library function
                                     are, in fact, the system functions.
                                     -qnolibposix is the default.
          isolated_call=<name1>:<name2>: ...
                      Specify that the calls to the functions listed have no
                      side effects. <name1> and <name2> are function names.
                      The user may specify as many function names as
                      necessary.
          keyword=<keywords>
                      Enables the use of specific keywords.
          langlvl={<langlvl>|<feature>}[:<langlvl>|<feature>]...
                      Specify language level and/or features to be enabled
                      during compilation.
                      <langlvl>
                              can be extc89, stdc89, extc99, stdc99,
                              ansi, saal2, saa, extended, or classic.
                      <feature>
                              can be:
                              [no]ucs   enables or disables support for
                                        universal character names.
          maxerr=<num>[:<sev>]
                      Instructs the compiler to halt compilation when <num>
                      errors of <sev> or greater severity is reached.  The
                      default for <sev> is current value of the -qhalt option.
          maxmem=<num>
                      Limit the amount of memory used by space intensive
                      optimizations to <num>.  <num> specified in kilobytes.
          optimize=<level>
                      Enables different levels of optimization.
                      2       Same as -O and -qoptimize.
                      3       Same as -O3. Aggressive optimization.
                      4       Same as -O4. Internally generates -O3 -qipa
                              with automatic architecture and tuning option
                              generation.
                      5       Same as -O5. Internally generates -O3
                              -qipa=level=2 with automatic architecture and
                              tuning option generation.
          procimported=<name1>:<name2>: ...
                      Specify which functions are imported.  If no filenames
                      are specified, all invoked functions are assumed to be
                      defined outside the current file.  The last explicit
                      specification for a function takes precedence.
          proclocal=<name1>:<name2>: ...
                      Specify which functions are local.
                      If no filenames are specified, all invoked functions
                      are assumed to be defined within the current file.
                      The last explicit specification for a function takes
                      precedence.
          procunknown=<name1>:<name2>: ...
                      Specify which functions are unknown to be local or
                      imported.  If no filenames are specified, all functions
                      called are assumed to be unknown. This is the default
                      when no user options are specified. The last explicit
                      specification for a function takes precedence.
          profile=<option>
                      Sets up the object files produced by the compiler for
                      profiling.
                      The available options are:
                      ibm     Generate profiling support code for use with the
                              Performance Analysis tool in VisualAge C++.
                      p       Generate profiling support code.  Same as -p.
                      pg      Generate profiling support code including BSD
                              profiling support.  Same as -pq.
          smp[=suboption[:suboption] [ ... ]]
                      Controls acceptance of OpenMP directives and
                      automatic parallelization.  The auto and omp suboptions
                      are opposites. i.e. -qsmp=omp means strict adherance
                      to the OpenMP standard with no automatic parallelization.
                      [no]auto
                              Enables or disables automatic parallelization.
                      [no]explicit
                              Enables or disables explicit parallelization.
                      [no]opt
                              Turns off the implied optimization to allow
                              simpler debugging.
                      schedule=<sched_type>[=n]
                              Specifies what kind of scheduling algorithms
                              and chunking are used for loops to which no
                              other scheduling algorithm has been explicitly
                              assigned in the source code.
                              Valid options for <sched_type> are:
                                         * dynamic[=n]
                                         * guided[=n]
                                         * static[=n]
                                         * affinity[=n]
                                         * runtime
                              For more information, see online documentation.
                      [no]nested_par
                              Enables or disables parallelization of nested
                              parallel constructs.
                      [no]rec_locks
                              Specifies whether recursive or regular locks
                              should be used to implement critical sections.
                      [no]omp Enables or disables strict OpenMP mode.
          spill=<size>
                      Specify the size of the register allocation spill area.
          suppress=<msg_num>:<msg_num>...
                      Suppress compiler messages.
          nosuppress
                      Don't suppress compiler messages.
          symtab=<options>
                      Controls symbol table.
                      The available options are:
                      unref   Specifies that all typedef declarations, struct,
                              union, and enum type definitions are included
                              for processing by the debugger.  Same as
                              -qdbxextra.
                      static  Adds user-defined, nonexternal names that have a
                              persistent storage class, such as initialized
                              and uninitialized static variables, to the name
                              list (the symbol table of xcoff objects).  Same
                              as -qstatsym.
          tabsize=<size>
                      Changes the length of tabs in your source file.
          tbtable=<option>
                      Generate a traceback table for each function and
                      place it in the text segment at the end of the
                      function code.
                      The available options are:
                      none    No traceback table is generated.
                      full    A full traceback table is generated.
                              This is the default with -g specified.
                      small   A traceback table is generated with no name or
                              parameter information.
                              This is the default when -g is NOT specified.
          tune=<option>
                      Specifies the architecture system for which the
                      executable program is optimized.
                      The available options are:
                      403     Produce an object optimized for all the
                              PowerPC 403 processors.
                              Use -qfloat=emulate to emulate the floating-point
                              instructions omitted by the 403 processor.
                      601     Produce an object optimized for all the
                              PowerPC 601 processors.
                      602     Produce an object optimized for all the
                              PowerPC 602 processors.
                      603     Produce an object optimized for all the
                              PowerPC 603 processors.
                      604     Produce an object optimized for all the
                              PowerPC 604 processors.
                      p2sc    Produce an object optimized for all the
                              p2sc processors.
                      pwr     Produce an object optimized for the POWER
                              hardware platform.
                      pwr2    Produce an object optimized for the
                              POWER2 hardware platform.
                      pwr2s   Produce an object optimized for the
                              POWER2 hardware platform, avoiding certain
                              quadruple-precision instructions that would
                              slow program performance.
                      pwrx    Same as pwr2.
                      rs64a   Produce an object optimized for the rs64a
                              processor.
                      rs64b   Produce an object optimized for the rs64b
                              processor.
                      rs64c   Produce an object optimized for the rs64c
                              processor.
                      pwr3    Produce an object optimized for the POWER3
                              processor.
                      pwr4    Produce an object optimized for the POWER4
                              processor.
          unroll={yes|no|auto}
                      yes     Hint for the compiler to try to unroll loops.
                      no      Force the compiler not to unroll any loops.
                      auto    Let the compiler decide whether to unroll loops.
          unroll      same as unroll=yes
          nounroll    same as unroll=no
          xref=full   Produce a cross-reference listing containing all names,
                      whether referenced or not; output goes to .lst file.

  Environment Variables
     1.OBJECT_MODE changes the compilation-mode behavior, unless overridden by
                   configuration file or command-line options

        Setting

         not set   32-bit compiler mode.
          32       32-bit compiler mode.
          64       64-bit compiler mode.
         32_64     Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.
        any other  Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.

  For a detailed description of each option, please refer to the online
  documentation.
configure:19504: $? = 249
configure:19506: cc -v </dev/null >&5
exec: /usr/bin/pg(/usr/bin/pg,/usr/vac/exe/default_msg/vac.help,NULL) 
  C for AIX Compiler, Version 6

  Usage:
     xlc [ option | inputfile ]...
     cc [ option | inputfile ]...
     c89 [ option | inputfile ]...
     xlc128 [ option | inputfile ]...
     cc128 [ option | inputfile ]...
     xlc_r [ option | inputfile ]...
     cc_r [ option | inputfile ]...
     xlc_r4 [ option | inputfile ]...
     cc_r4 [ option | inputfile ]...
     xlc_r7 [ option | inputfile ]...
     cc_r7 [ option | inputfile ]...

  Description:
     The xlC and related commands compile C and C++ source files.
     They also processes assembler source files and object files. Unless the
     -c option is specified, xlC calls the linkage editor to produce a
     single object file. Input files may be any of the following:
       1. file name with .c suffix: C source file
       2. file name with .i suffix: preprocessed C or C++ source file
       3. file name with .o suffix: object file for ld command
       4. file name with .s suffix: assembler source file
       5. file name with .so suffix: shared object file

  Options:
     Options can be flag options or keyword options:

       1. Flag options:

        -#        Display language processing commands but do
                  not invoke them; output goes to stdout.
        -bdynamic, -bstatic
                  Determines which types of library files are searched by
                  the linkage editor.
        -brtl     Tells the linkage editor to accept both .so and .a
                  library file types.
        -B<prefix>
                  Construct alternate compiler/assembler/linkage editor
                  program names. <prefix> is added to the beginning of
                  the standard program names.
        -c        Do not send object files to the linkage editor.
        -C        Write comments to output when doing preprocessing,
                  used with -E and -P.
        -D<name>[=<def>]
                  Define <name> as in #define directive. If <def> is
                  not specified, 1 is assumed.
        -E        Preprocess but do not compile; output goes to stdout
        -f<filename>
                  Passes to the linkage editor the filename of a file
                  containing a list of input files to be processed.
        -F<x>[:<stanza>]
                  Use alternate configuration file <x> with optional
                  <stanza>. If <stanza> is not specified, the assumed stanza
                  is the name of the command used to invoke the compiler.
        -g        Produce information for the debugger.
        -G        Tells the linkage editor to create a dynamic library.
        -I<dir>   Search in directory <dir> for include files that
                  do not start with an absolute path.
        -l<key>   Search the specified library file,
                  where <key> selects the file lib<key>.a.
        -L<dir>   Search in directory <dir> for files specified by -l<key>.
        -ma       Generate inline calls to the "alloca" function as if
                  "#pragma alloca" directives were in the source file.
        -M        Generate information to be included in a "make"
                  description file; output goes to .u file.
        -o<name>  Name the executable file <name> instead of a.out.
                  When used with the -c option and one source file,
                  name the object file <name> instead of filename.o.
                  If <name> is the name of a directory, files generated by
                  the compiler will be placed into that directory.
        -O        Optimize generated code.
        -O2       Same as -O.
        -O3       Perform some memory and compile time intensive
                  optimizations in addition to those executed with -O2.
                  The -O3 specific optimizations have the potential to
                  alter the semantics of a user's program.
                  The compiler guards against these optimizations at -O2
                  and the option -qstrict is provided at -O3 to turn off
                  these aggressive optimizations.
        -O4       Equivalent to -O3 -qipa with automatic generation of
                  architecture and tuning option ideal for that platform.
        -O5       Equivalent to -O3 -qipa=level=2 with automatic
                  generation of architecture and tuning option ideal for
                  that platform.
        -p        Generate profiling support code.  Same as -qprofile=p.
        -pg       Generate profiling support code including BSD
                  profiling support.  Same as -qprofile=pg.
        -P        Preprocess but do not compile; output goes to .i file.
        -Q<x>, -qinline<x>
                  Inline all appropriate functions where x can be
                  one of the following:
                    !       Not inline any function (equivalent to -qnoinline)
                    =<lc>   Inline if number of source statement in
                            function is less than the number specified
                            in <lc>.
                    -<nm>   Not inline function listed by names in <nm>
                    +<nm>   Attempt to inline function listed by names
                            in <nm>.
        -r        Produce the output file without linking any library.
        -S        Produce a .s file for any source file processed by the
                  compiler.
        -t<x>     Apply prefix from the -B option to the specified program <x>,
                  where x can be one or more of the following:
                    a = assembler
                    b = compiler backend
                    c = compiler frontend
                    i = compiler inliner
                    I = inter-procedural analysis - compile phase
                    l = linkage editor
                    L = inter-procedural analysis - link phase.
                    p = preprocessor
        -U<name>  Undefine name as in #undef directive.
        -v        Displays language processing commands as they
                  are invoked by xlc; output goes to stdout.
        -V        Displays commands as they are invoked by xlC;
                  output goes to stdout.
        -w        Suppress informational, language-level, and
                  warning messages.
        -W<x,y>   Give the options <y> to the compiler program <x>
                  where x can be one or more of the following:
                    <a,b,c,f,I,l,L,p>
        -y<x>     Specify compile-time rounding of constant floating-point
                  expressions, where <x> can be one of the following:
                    m = round toward minus infinity
                    n = round to nearest
                    p = round toward positive infinity
                    z = round toward zero.

       2. Keyword options:

          Keyword options are specified in one of the following ways:

          -q<option>
          -q<option>=<parameter>
          -q<option>=<parameter>:<parameter>

          where <option> is an option name and <parameter> is a
          parameter value.
          Keyword options with no parameters represent switches
          that may be either on or off. The keyword by itself turns
          the switch on, and the keyword preceded by the letters NO
          turns the switch off. For example, -qLIST tells the
          compiler to produce a listing and -qNOLIST tells the
          compiler not to produce a listing. If an option that
          represents a switch is set more than once, the compiler
          uses the last setting.

          Keyword option and parameter names may appear in either
          UPPER CASE or lower case letters in the xlc command.


          Options without parameters:

          32          Selects 32-bit compiler mode.
          64          Selects 64-bit compiler mode.
          ansialias   Use type-based aliasing during optimization.
          compact     Reduce code size where possible, at the expense
                      of execution speed.  Code size is reduced by
                      inhibiting optimizations that replicate or expand
                      code inline.
          cpluscmt    Permit "//" to introduce a comment that lasts
                      until the end of the current source line, as in C++.
          dbcs        String literals and comments can contain DBCS
                      characters (same as mbcs option).
          dbxextra    Generate symbol table information for unreferenced
                      variables. By default such information is not generated
                      thus reducing the size of the executable compiled with
                      the "-g" option.  Same as -qsymtab=unref.
          digraph     Allow special digraph
          dollar      Allow '$' as an identifier character
          dpcl        Generates symbols for tools based on the Dynamic
                      Probe Class Library (DPCL)
          extchk      Perform external name type-checking and function
                      call checking.
          fdpr        Collect information about programs for use with
                      the AIX fdpr (Feedback Directed Program Restructuring)
                      performance-tuning utility.
          flttrap     Generate instructions to trap floating-point
                      exceptions.
          fold        Specifies that constant floating-point expressions
                      are to be evaluated at compile time.
          fullpath    Specifies the path information stored for files when
                      you use "-g" and the symbolic debugger.
          funcsect    Place instructions for each function in a separate csect.
          heapdebug   Enables debug versions of memory management functions.
          hot         Determines whether or not to perform high-order
                      transformations on loops during optimization.
          idirfirst   Specify the search order for files included with
                      the #include "file_name" directive.  Use -qidirfirst
                      with the -Idirectory option.  If -qidirfirst option
                      is specified, the directories specified by the
                      -Idirectory option are searched before the directory
                      where the current file resides.
          ignerrno    Tell the optimizer that the program will never
                      refer to or set errno.  This allows additional
                      optimizations.
          inlglue     Generate fast external linkage by inlining the
                      code (pointer glue code) necessary at calls
                      via a function pointer and calls to external
                      procedures.
          largepage   Take advantage of 16M pages, which will allow for
                      reduced TLB entries and allow hardware prefetching
                      to be done more efficiently.
          ldbl128     Increase long double size from 64 to 128 bits.
          libansi     Assumes that all functions with the name of an
                      ANSI C library functions are in fact the system functions.
          linedebug   Generates abbreviated line number and source file name
                      information for the debugger.
          list        Produce an object listing; output goes to .lst file.
          listopt     Display the settings of all options; output goes
                      to .lst file.
          longdouble  Increase long double size from 64 to 128 bits.
          longlit     Changes implicit type selection for integer constants in
                      64-bit mode.
          longlong    Allow long long integers.
          macpstr     Allow '\p' as the first character of a string constant
                      which will be replaced by the length in bytes.
          makedep     Creates an output file that contains targets suitable for
                      inclusion in a description file for the AIX make command.
          mbcs        String literals and comments can contain DBCS
                      characters (same as dbcs option).
          mkshrobj    Create a shared object from generated object files.
          noprint     Direct listing to /dev/null.
          nostdinc    Specify which files are included with the #include
                      "file_name" and #include <file_name> directives.
                      If -qnostdinc is specified, the /usr/include directory
                      is not searched.
          optimize    Same as O and O2. Perform optimization that is the
                      mix between speed and size.  (If -qnooptimize is
                      specified, it is equivalent to -qoptimize=0.)
          pascal      Accept and ignore the keyword 'pascal' as a
                      type modifier.
          pdf1, pdf2  Perform aggressive optimizations with profile
                      directed feedback.
          phsinfo     Produce compiler phase information; output goes to
                      stdout.
          proto       Assert that procedure call points agree
                      with their declarations even if the procedure has
                      not been prototyped. This allows the caller to
                      pass floating point arguments in floating point
                      registers instead of general purpose registers.
          report      Adds information to the listing file on the loop
                      transformations that have been carried out.
                      This option requires either -qhot or -qsmp
                      in order to have effect.
          ro          Put string literals in read only area.
          roconst     Put constant values in read only area.
          showinc     Include the source of all included files in the
                      source listing, if the SOURCE option is in effect.
          smallstack  Reduce the size of the stack frame, allowing better use
                      of a limited stack size.
          source      Produce a source listing; output goes to .lst file.
          srcmsg      Reconstruct source lines in error along with the
                      diagnostic messages in the stderr file.
          statsym     Adds user-defined, nonexternal names that have a
                      persistent storage class, such as initialized and
                      uninitialized static variables, to the name list
                      (the symbol table of xcoff objects).  Same as
                      -qsymtab=static.
          strict      Turns off aggressive optimizations which have the
                      potential to alter the semantics of a user's program.
                      This option also sets -qfloat=nofltint:norsqrt.
          strict_induction
                      Turns off induction variable optimizations
                      that have the potential to alter the semantics of a
                      user's program. The default is "nostrict_induction" at
                      -O2 or higher and "strict_induction" otherwise.
                      "nostrict_induction" is recomended if your program does
                      not have overflows or wrap arounds of loop induction
                      variables.
          syntaxonly  Causes the compiler to perform syntax checking without
                      generating an object file.
          threaded    Indicates to the compiler that the program will execute
                      in multi-threaded environment.
          tocmerge    Read from the file specified in -bImportfile linker
                      option and merge the address information to access
                      ranges of external addresses using a single Table Of
                      Content entry.
          upconv      Preserves the unsigned specification when performing
                      integral promotions.
          warn64      Enables checking for possible long-to-integer or
                      pointer-to-integer truncation.
          unwind      Enables stack unwinding.  The optimization prologue
                      tailoring reduces the number of saves and restores
                      of non-volatile registers, but is enabled only when
                      stack unwinding is disabled.
          xcall       Generate code to static routines within a compilation
                      unit as if they were external routines.
          xref        Produce a cross-reference listing containing
                      only referenced names.



          Options with parameters:
          aggrcopy=[no]overlap
                      Asserts whether source and destination of aggregate
                      assignments overlap.
          alias=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
                      allp    Pointers are never aliased.
                      ansi    Pointers can only point to an object of the
                              same type. Require -O option.
                      typ     Pointers to different types are never aliased.
          align=<algnopt>
                      bit_packed
                              Similar to packed, except bit-fields are
                              packed as tightly as possible.
                      full    The compiler uses the RISC System/6000
                              alignment rules. This is the same as power.
                      mac68k  The compiler uses the Macintosh**
                              alignment rules.
                      natural The compiler maps structure members to
                              their natural boundaries.
                      packed  The compiler uses the packed alignment rules.
                      power   The compiler uses the RISC System/6000
                              alignment rules.
                      twobyte The compiler uses the Macintosh alignment rules.
                              The mac68k option is the same as twobyte.
          arch=<option>
                      Specifies the architecture on which the executable
                      program will be run.
                      The available options are:
                      com     Produce an object that contains instructions
                              that will run on all the POWER and PowerPC
                              hardware platforms.
                      pwr     Produce an object that contains instructions
                              that will run on the POWER hardware
                              platform.
                      pwr2    Produce an object that contains instructions
                              that will run on the POWER2 hardware
                              platform.
                      pwrx    Same as pwr2.
                      ppc     Produce an object that contains instructions
                              that will run on any of the 32-bit PowerPC
                              hardware platforms.
                      ppcgr   Produce an object that contains optional
                              graphics instructions for PowerPC processors.
                      pwr2s   Produce an object that contains instructions
                              that will run on a pwr2s chip.
                      p2sc    Produce an object that contains instructions
                              that will run on a p2sc chip.
                      601     Produce an object that contains instructions
                              that will run on a 601 chip.
                      602     Produce an object that contains instructions
                              that will run on a 602 chip.
                      603     Produce an object that contains instructions
                              that will run on a 603 chip.
                      604     Produce an object that contains instructions
                              that will run on a 604 chip.
                      403     Produce an object that contains instructions
                              that will run on a 403 chip.
                      rs64a   Produce an object that contains instructions
                              that will run on a rs64a chip.
                      rs64b   Produce an object that contains instructions
                              that will run on a rs64b chip.
                      rs64c   Produce an object that contains instructions
                              that will run on a rs64c chip.
                      pwr3    Produce an object that contains instructions
                              that will run on a POWER3 chip.
                      pwr4    Produce an object that contains instructions
                              that will run on a POWER4 chip.
                      The default is -qarch=com.  If the -qarch option is
                      specified without the -qtune=<option>, the compiler
                      uses the default -qtune value for the specified
                      architecture. Refer to online documentation to find
                      actual default setting of -qtune  for a given -qarch.
          assert=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      typ     Pointers to different types are never aliased.
                      allp    Pointers are never aliased.
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
          attr        Produce an attribute listing containing only
                      referenced names; output goes to .lst file.
          attr=full   Produce an attribute listing containing all names,
                      whether referenced or not; output goes to .lst file.
          bitfields=signed
          bitfields=unsigned
                      Specify whether bitfields will be signed or unsigned.
          cache=<suboption>:<suboption>...
                      Describe the cache configuration for a specific target
                      execution machine. See online documentation for details.
          chars=signed
          chars=unsigned
                      Specify whether the data type char will be signed
                      or unsigned.
          check=<option>
                      Generate code to check for run-time checks.
                      bounds  Runtime checking of addresses when
                              subscripting within an object of known size.
                      divzero Runtime checking of integer division.
                              A trap will occur if an attempt is made to
                              divide by zero.
                      nullptr Runtime checking of addresses
                              contained in pointer variables used to
                              reference storage.
                      all     Switches on all the above suboptions.
          dataimported=<name1>:<name2>: ...
                      Specify which data items are imported.  If no names are
                      specified, all data items are assumed to be imported.
                      This is the default.
          datalocal=<name1>:<name2>: ...
                      Specify which data items are local.  If no names are
                      specified, all data items are assumed to be local.
          enum=<enumopt>
                      Specify whether minimum-sized enumerated types will be
                      produced or not. <enumopt> can be either small, int,
                      1, 2, 4 or 8.
                      small denotes that either one, two, four or eight (valid
                      in 64-bit mode only) bytes of storage will be allocated
                      for enum variables based on the range of the enum
                      constants.
                      int is the default, and causes enum variables to be
                      treated as though they were of type signed int
                      depending on the range of the enum constants.
                      1 will cause enum variables to be packed into 1 byte.
                      2 will cause enum variables to be packed into 2 bytes.
                      4 will cause enum variables to be packed into 4 bytes.
                      8 will cause enum variables to be packed into 8 bytes.
                        (enum=8 is valid in 64-bit mode only)
          flag=<sev1>
                      Specify severity level of diagnostics to be reported
                      in source listing and stderr; the severity level
                      is one of <i,w,e,s,u>.
          flag=<sev1>:<sev2>
                      Specify severity level of diagnostics to be reported
                      in source listing (<sev1>), and stderr (<sev2>);
                      the severity levels are one of <i,w,e,s,u>.
          float=<opt1>:<opt2>:...:<optN>
                      The available options are:
                      emulate Function calls are emitted in place of
                              PowerPC floating-point instructions.
                              Use this option only in a single-threaded
                              stand-alone environment, targeting the
                              PowerPC 403 processor.
                              Do not use this suboption with any of the
                              following:
                              o  -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                              o  -qlongdouble, -qldbl128
                              o  128-bit long double invocation commands
                      fltint  Specify whether range checking of floating
                              point to integer conversions is done.
                              Default at -O2: -qfloat=nofltint.
                              Default at -O3: -qfloat=fltint.
                      hsflt   Never round single-precision expressions,
                              and don't perform range checking for
                              floating-point to integer conversions.
                      hssngl  Round single-precision expressions only
                              when the results are stored into float memory
                              locations.
                      nans    Detect conversion of single-precision NaNS to
                              double precision call checking.
                      nomaf   Suppress generation of multiply-add
                              instructions.
                      nofold  Suppress compile-time evaluation of constant
                              floating-point expressions.
                      rndsngl Ensure strict adherence to IEEE standard.
                              all operations on single-precision values
                              produce results that remain in single
                              precision.
                      rrm     Specify run-time rounding mode. Compile with
                              this option if the run-time rounding mode
                              is round toward minus infinity, round toward
                              positive infinity, or not known.
                      rsqrt   Specify whether a division by the result of a
                              square root can be replaced with a multiply
                              by the reciprocal of the square root.
                              Default at -O2: -qfloat=norsqrt.
                              Default at -O3: -qfloat=rsqrt.
                      spnans  Generate extra instructions to detect signaling
                              NaN on conversion from single precision to
                              double precision.  Obsolete; use the equivalent
                              -qfloat=nans option.
          flttrap=<opt1>:<opt2>:...:<optN>
                      Generate instructions to detect and trap floating-point.
                      The available options are:  overflow, underflow,
                      zerodivide, invalid, inexact, enable, imprecise.
          halt=<sev>  Stop compiler after first phase if severity of errors
                      detected equals or exceeds <sev>; the severity
                      level is one of i, w, e, s, u.
          genproto=<parmnames>
                      Produces ANSI prototypes from K&R function definitions.
          hot=<suboption>
                      Determines whether or not to perform high-order
                      transformations on loops and array language during
                      optimization, and whether or not to pad array dimensions
                      and data objects to avoid cache misses. Suboptions
                      include:
                        arraypad   - The compiler will pad any arrays where it
                                     infers there may be a benefit.  Make sure
                                     that you have not used equivalence
                                     association for any arrays in files
                                     compiled with this option as the compiler
                                     does not perform any checking before
                                     padding arrays.
                        arraypad=n - The compiler will pad every array in the
                                     code.  The pad amount must be a positive
                                     integer value.
                        novector   - The compiler will avoid replacing code by
                                     calls to vector library routines.
                        vector     - Allows the compiler to optimize by
                                     replacing code with calls to vector
                                     library routines.
          ignprag=<option>
                      The available options are:
                      disjoint
                              Ignore pragma disjoint.
                      isolated
                              Ignore pragma isolated_call.
                      omp     Ignore OpenMP parallel processing pragmas.
                      ibm     Ignore IBM parallel processing pragmas.
                      all     Ignore all the above pragmas.
          info
          info=all
                      Produce additional lint-like messages.  For C, it turns
                      on all diagnostic messages for all groups.  For C++, it
                      turns on all diagnostic messages for all groups, except
                      ppt.
          info=<group>
                      Produce additional lint-like messages based on <group>.
                      c99     Code that might behave differently between
                              C89 and C99 language levels
                      cls     Possible problems with generation of classes
                      cmp     Possible redundancies in unsigned comparisons
                      cnd     Possible redundancies or problems in conditional
                              expressions
                      cns     Operations involving constants.
                      cnv     Conversions
                      dcl     Consistency of declarations
                      eff     Statements with no effect
                      enu     Consistency of enum variables
                      ext     Unused external definitions
                      gen     General diagnostic messages
                      gnr     Generation of temporary variables
                      got     Use of goto statements
                      ini     Possible problems with initialization
                      inl     Functions not inlined
                      lan     Language level effects
                      obs     Obsolete features
                      ord     Unspecified order of evaluation
                      par     Unused parameters
                      por     Nonportable language constructs
                      ppc     Possible problems with using the preprocessor
                      ppt     Trace of preprocessor actions
                      private Lists shared variables made private to a
                              parallel loop.
                      pro     Missing function prototypes
                      rea     Code that cannot be reached
                      reduction
                              Lists all variables that are recognized as
                              reduction variables inside a parallel loop.
                      ret     Consistency of return statements
                      trd     Possible truncation or loss of data or precision
                      tru     Variable names truncated by the compiler
                      trx     Hexadecimal floating-point constants that cannot
                              be represented exactly in its evaluation format
                      uni     Unitialized variables
                      use     Unused auto and static variables
          initauto=<hh>
                      Initialialize automatic storage to <hh>. <hh> is a
                      hexadecimal value.  This generates extra code and
                      should only be used for error determination.
          inline[=<x>]
                      This is functionally equivalent to the -Q option.
          ipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                      Enhances -O optimization by doing detailed analysis
                      across procedures.  One of -O, -O2, or -O3 is required
                      when using -qipa.  Regular expressions are supported
                      when specifying <procedure_names> on the -qipa=exits,
                      -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                      -qipa=safe and -qipa=unknown suboptions.
                      Suboptions include:
                        exits=<procedure_names>
                                   - Specifies a selected set of procedures
                                     which always end the program.
                        inline=<inline-options>
                          The "ipa=inline=" command can take a colon-separated
                          list of inline options, which are as follows:
                            inline={auto|noauto}
                                        - Specifies whether or not to
                                          automatically inline expansion.
                            inline=<procedure_names>
                                        - Specifies a comma-separated list of
                                          procedures to try to inline.
                            inline=limit=<num>
                                        - Changes the size limits that deter-
                                          mine how much inline expansion to do.
                                          <num> is the optimizer's approximation
                                          of the number of bytes of code which
                                          will be generated.
                            inline=threshold=<num>
                                        - Specifies the upper size limit on
                                          procedures to inline.  <num> is
                                          defined as for inline=limit.
                        isolated=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not directly refer to any global
                                     variable.
                        level=<level>
                                   - Determines the amount of IPA analysis
                                     and optimization performed:
                                       0 = Does only minimal interprocedural
                                           analysis and optimization.
                                       1 = Turns on inlining, limited alias
                                           analysis, and limited call-site
                                           tailoring.
                                       2 = Full interprocedural data flow and
                                           alias analysis.
                        list=[filename|short|long]
                                   - Specifies an output listing file name
                                     during the link phase, in the event that
                                     an object listing has been requested
                                     using the -qlist option.  The default
                                     name is "a.lst".  The suboptions short and
                                     long determine which listing sections will
                                     be included.
                        lowfreq=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures that are likely to be
                                     called infrequently during the course
                                     of a typical program run.
                        missing={unknown|safe|isolated|pure}
                                   - Specifies the default assumption for
                                     procedures not compiled with -qipa.
                        noinline=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures which are not to be inlined.
                        noobject   - Speeds up compilation, but the object
                                     files cannot be used in non-IPA
                                     compilations.  This option is ignored if
                                     -S has been specified.
                        partition={small|medium|large}
                                   - Specifies the size of program sections
                                     that are analyzed together.  Larger
                                     partitions may produce better analysis but
                                     require more storage.
                        pure=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that are "isolated", "safe", and do not
                                     modify any data objects that are visible
                                     to the caller.
                        safe=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not call any other part of the
                                     program.
                        stdexits   - Specifies that compiler-defined exit
                                     routines can be optimized as with the
                                     "exits" suboption.  The procedures are
                                     abort, exit, _exit, and _assert.
                        nothreads    Single threaded invocation of the compiler
                                     backend.
                        threads      Compiler decides the number of threads
                                     used to invoke the compiler backend.
                        threads=<n>  Up to 'n' threads can be used to invoke
                                     the compiler backend.
                        unknown=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that may update global variables and
                                     dummy arguments and call other parts of
                                     the program compiled with -qipa.
                        The following options are intended for use by the
                        link-time phase of -qipa:
                        -qlibansi  - Assumes that all functions with the name
                                     of an ANSI C defined library function are,
                                     in fact, the library functions.
                                     -qnolibansi is the default.
                        -qlibessl  - Assumes that all functions with the name
                                     of an ESSL defined library functions are,
                                     in fact, the library functions.
                                     -qnolibessl is the default.
                        -qlibposix - Assumes that all functions with the name
                                     of a POSIX 1003.1 defined library function
                                     are, in fact, the system functions.
                                     -qnolibposix is the default.
          isolated_call=<name1>:<name2>: ...
                      Specify that the calls to the functions listed have no
                      side effects. <name1> and <name2> are function names.
                      The user may specify as many function names as
                      necessary.
          keyword=<keywords>
                      Enables the use of specific keywords.
          langlvl={<langlvl>|<feature>}[:<langlvl>|<feature>]...
                      Specify language level and/or features to be enabled
                      during compilation.
                      <langlvl>
                              can be extc89, stdc89, extc99, stdc99,
                              ansi, saal2, saa, extended, or classic.
                      <feature>
                              can be:
                              [no]ucs   enables or disables support for
                                        universal character names.
          maxerr=<num>[:<sev>]
                      Instructs the compiler to halt compilation when <num>
                      errors of <sev> or greater severity is reached.  The
                      default for <sev> is current value of the -qhalt option.
          maxmem=<num>
                      Limit the amount of memory used by space intensive
                      optimizations to <num>.  <num> specified in kilobytes.
          optimize=<level>
                      Enables different levels of optimization.
                      2       Same as -O and -qoptimize.
                      3       Same as -O3. Aggressive optimization.
                      4       Same as -O4. Internally generates -O3 -qipa
                              with automatic architecture and tuning option
                              generation.
                      5       Same as -O5. Internally generates -O3
                              -qipa=level=2 with automatic architecture and
                              tuning option generation.
          procimported=<name1>:<name2>: ...
                      Specify which functions are imported.  If no filenames
                      are specified, all invoked functions are assumed to be
                      defined outside the current file.  The last explicit
                      specification for a function takes precedence.
          proclocal=<name1>:<name2>: ...
                      Specify which functions are local.
                      If no filenames are specified, all invoked functions
                      are assumed to be defined within the current file.
                      The last explicit specification for a function takes
                      precedence.
          procunknown=<name1>:<name2>: ...
                      Specify which functions are unknown to be local or
                      imported.  If no filenames are specified, all functions
                      called are assumed to be unknown. This is the default
                      when no user options are specified. The last explicit
                      specification for a function takes precedence.
          profile=<option>
                      Sets up the object files produced by the compiler for
                      profiling.
                      The available options are:
                      ibm     Generate profiling support code for use with the
                              Performance Analysis tool in VisualAge C++.
                      p       Generate profiling support code.  Same as -p.
                      pg      Generate profiling support code including BSD
                              profiling support.  Same as -pq.
          smp[=suboption[:suboption] [ ... ]]
                      Controls acceptance of OpenMP directives and
                      automatic parallelization.  The auto and omp suboptions
                      are opposites. i.e. -qsmp=omp means strict adherance
                      to the OpenMP standard with no automatic parallelization.
                      [no]auto
                              Enables or disables automatic parallelization.
                      [no]explicit
                              Enables or disables explicit parallelization.
                      [no]opt
                              Turns off the implied optimization to allow
                              simpler debugging.
                      schedule=<sched_type>[=n]
                              Specifies what kind of scheduling algorithms
                              and chunking are used for loops to which no
                              other scheduling algorithm has been explicitly
                              assigned in the source code.
                              Valid options for <sched_type> are:
                                         * dynamic[=n]
                                         * guided[=n]
                                         * static[=n]
                                         * affinity[=n]
                                         * runtime
                              For more information, see online documentation.
                      [no]nested_par
                              Enables or disables parallelization of nested
                              parallel constructs.
                      [no]rec_locks
                              Specifies whether recursive or regular locks
                              should be used to implement critical sections.
                      [no]omp Enables or disables strict OpenMP mode.
          spill=<size>
                      Specify the size of the register allocation spill area.
          suppress=<msg_num>:<msg_num>...
                      Suppress compiler messages.
          nosuppress
                      Don't suppress compiler messages.
          symtab=<options>
                      Controls symbol table.
                      The available options are:
                      unref   Specifies that all typedef declarations, struct,
                              union, and enum type definitions are included
                              for processing by the debugger.  Same as
                              -qdbxextra.
                      static  Adds user-defined, nonexternal names that have a
                              persistent storage class, such as initialized
                              and uninitialized static variables, to the name
                              list (the symbol table of xcoff objects).  Same
                              as -qstatsym.
          tabsize=<size>
                      Changes the length of tabs in your source file.
          tbtable=<option>
                      Generate a traceback table for each function and
                      place it in the text segment at the end of the
                      function code.
                      The available options are:
                      none    No traceback table is generated.
                      full    A full traceback table is generated.
                              This is the default with -g specified.
                      small   A traceback table is generated with no name or
                              parameter information.
                              This is the default when -g is NOT specified.
          tune=<option>
                      Specifies the architecture system for which the
                      executable program is optimized.
                      The available options are:
                      403     Produce an object optimized for all the
                              PowerPC 403 processors.
                              Use -qfloat=emulate to emulate the floating-point
                              instructions omitted by the 403 processor.
                      601     Produce an object optimized for all the
                              PowerPC 601 processors.
                      602     Produce an object optimized for all the
                              PowerPC 602 processors.
                      603     Produce an object optimized for all the
                              PowerPC 603 processors.
                      604     Produce an object optimized for all the
                              PowerPC 604 processors.
                      p2sc    Produce an object optimized for all the
                              p2sc processors.
                      pwr     Produce an object optimized for the POWER
                              hardware platform.
                      pwr2    Produce an object optimized for the
                              POWER2 hardware platform.
                      pwr2s   Produce an object optimized for the
                              POWER2 hardware platform, avoiding certain
                              quadruple-precision instructions that would
                              slow program performance.
                      pwrx    Same as pwr2.
                      rs64a   Produce an object optimized for the rs64a
                              processor.
                      rs64b   Produce an object optimized for the rs64b
                              processor.
                      rs64c   Produce an object optimized for the rs64c
                              processor.
                      pwr3    Produce an object optimized for the POWER3
                              processor.
                      pwr4    Produce an object optimized for the POWER4
                              processor.
          unroll={yes|no|auto}
                      yes     Hint for the compiler to try to unroll loops.
                      no      Force the compiler not to unroll any loops.
                      auto    Let the compiler decide whether to unroll loops.
          unroll      same as unroll=yes
          nounroll    same as unroll=no
          xref=full   Produce a cross-reference listing containing all names,
                      whether referenced or not; output goes to .lst file.

  Environment Variables
     1.OBJECT_MODE changes the compilation-mode behavior, unless overridden by
                   configuration file or command-line options

        Setting

         not set   32-bit compiler mode.
          32       32-bit compiler mode.
          64       64-bit compiler mode.
         32_64     Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.
        any other  Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.

  For a detailed description of each option, please refer to the online
  documentation.
unlink: /tmp/xlcW0Jlsvia
unlink: /tmp/xlcW1Jlsvib
unlink: /tmp/xlcW2Jlsvic
configure:19509: $? = 249
configure:19511: cc -V </dev/null >&5
/usr/bin/pg /usr/vac/exe/default_msg/vac.help 
  C for AIX Compiler, Version 6

  Usage:
     xlc [ option | inputfile ]...
     cc [ option | inputfile ]...
     c89 [ option | inputfile ]...
     xlc128 [ option | inputfile ]...
     cc128 [ option | inputfile ]...
     xlc_r [ option | inputfile ]...
     cc_r [ option | inputfile ]...
     xlc_r4 [ option | inputfile ]...
     cc_r4 [ option | inputfile ]...
     xlc_r7 [ option | inputfile ]...
     cc_r7 [ option | inputfile ]...

  Description:
     The xlC and related commands compile C and C++ source files.
     They also processes assembler source files and object files. Unless the
     -c option is specified, xlC calls the linkage editor to produce a
     single object file. Input files may be any of the following:
       1. file name with .c suffix: C source file
       2. file name with .i suffix: preprocessed C or C++ source file
       3. file name with .o suffix: object file for ld command
       4. file name with .s suffix: assembler source file
       5. file name with .so suffix: shared object file

  Options:
     Options can be flag options or keyword options:

       1. Flag options:

        -#        Display language processing commands but do
                  not invoke them; output goes to stdout.
        -bdynamic, -bstatic
                  Determines which types of library files are searched by
                  the linkage editor.
        -brtl     Tells the linkage editor to accept both .so and .a
                  library file types.
        -B<prefix>
                  Construct alternate compiler/assembler/linkage editor
                  program names. <prefix> is added to the beginning of
                  the standard program names.
        -c        Do not send object files to the linkage editor.
        -C        Write comments to output when doing preprocessing,
                  used with -E and -P.
        -D<name>[=<def>]
                  Define <name> as in #define directive. If <def> is
                  not specified, 1 is assumed.
        -E        Preprocess but do not compile; output goes to stdout
        -f<filename>
                  Passes to the linkage editor the filename of a file
                  containing a list of input files to be processed.
        -F<x>[:<stanza>]
                  Use alternate configuration file <x> with optional
                  <stanza>. If <stanza> is not specified, the assumed stanza
                  is the name of the command used to invoke the compiler.
        -g        Produce information for the debugger.
        -G        Tells the linkage editor to create a dynamic library.
        -I<dir>   Search in directory <dir> for include files that
                  do not start with an absolute path.
        -l<key>   Search the specified library file,
                  where <key> selects the file lib<key>.a.
        -L<dir>   Search in directory <dir> for files specified by -l<key>.
        -ma       Generate inline calls to the "alloca" function as if
                  "#pragma alloca" directives were in the source file.
        -M        Generate information to be included in a "make"
                  description file; output goes to .u file.
        -o<name>  Name the executable file <name> instead of a.out.
                  When used with the -c option and one source file,
                  name the object file <name> instead of filename.o.
                  If <name> is the name of a directory, files generated by
                  the compiler will be placed into that directory.
        -O        Optimize generated code.
        -O2       Same as -O.
        -O3       Perform some memory and compile time intensive
                  optimizations in addition to those executed with -O2.
                  The -O3 specific optimizations have the potential to
                  alter the semantics of a user's program.
                  The compiler guards against these optimizations at -O2
                  and the option -qstrict is provided at -O3 to turn off
                  these aggressive optimizations.
        -O4       Equivalent to -O3 -qipa with automatic generation of
                  architecture and tuning option ideal for that platform.
        -O5       Equivalent to -O3 -qipa=level=2 with automatic
                  generation of architecture and tuning option ideal for
                  that platform.
        -p        Generate profiling support code.  Same as -qprofile=p.
        -pg       Generate profiling support code including BSD
                  profiling support.  Same as -qprofile=pg.
        -P        Preprocess but do not compile; output goes to .i file.
        -Q<x>, -qinline<x>
                  Inline all appropriate functions where x can be
                  one of the following:
                    !       Not inline any function (equivalent to -qnoinline)
                    =<lc>   Inline if number of source statement in
                            function is less than the number specified
                            in <lc>.
                    -<nm>   Not inline function listed by names in <nm>
                    +<nm>   Attempt to inline function listed by names
                            in <nm>.
        -r        Produce the output file without linking any library.
        -S        Produce a .s file for any source file processed by the
                  compiler.
        -t<x>     Apply prefix from the -B option to the specified program <x>,
                  where x can be one or more of the following:
                    a = assembler
                    b = compiler backend
                    c = compiler frontend
                    i = compiler inliner
                    I = inter-procedural analysis - compile phase
                    l = linkage editor
                    L = inter-procedural analysis - link phase.
                    p = preprocessor
        -U<name>  Undefine name as in #undef directive.
        -v        Displays language processing commands as they
                  are invoked by xlc; output goes to stdout.
        -V        Displays commands as they are invoked by xlC;
                  output goes to stdout.
        -w        Suppress informational, language-level, and
                  warning messages.
        -W<x,y>   Give the options <y> to the compiler program <x>
                  where x can be one or more of the following:
                    <a,b,c,f,I,l,L,p>
        -y<x>     Specify compile-time rounding of constant floating-point
                  expressions, where <x> can be one of the following:
                    m = round toward minus infinity
                    n = round to nearest
                    p = round toward positive infinity
                    z = round toward zero.

       2. Keyword options:

          Keyword options are specified in one of the following ways:

          -q<option>
          -q<option>=<parameter>
          -q<option>=<parameter>:<parameter>

          where <option> is an option name and <parameter> is a
          parameter value.
          Keyword options with no parameters represent switches
          that may be either on or off. The keyword by itself turns
          the switch on, and the keyword preceded by the letters NO
          turns the switch off. For example, -qLIST tells the
          compiler to produce a listing and -qNOLIST tells the
          compiler not to produce a listing. If an option that
          represents a switch is set more than once, the compiler
          uses the last setting.

          Keyword option and parameter names may appear in either
          UPPER CASE or lower case letters in the xlc command.


          Options without parameters:

          32          Selects 32-bit compiler mode.
          64          Selects 64-bit compiler mode.
          ansialias   Use type-based aliasing during optimization.
          compact     Reduce code size where possible, at the expense
                      of execution speed.  Code size is reduced by
                      inhibiting optimizations that replicate or expand
                      code inline.
          cpluscmt    Permit "//" to introduce a comment that lasts
                      until the end of the current source line, as in C++.
          dbcs        String literals and comments can contain DBCS
                      characters (same as mbcs option).
          dbxextra    Generate symbol table information for unreferenced
                      variables. By default such information is not generated
                      thus reducing the size of the executable compiled with
                      the "-g" option.  Same as -qsymtab=unref.
          digraph     Allow special digraph
          dollar      Allow '$' as an identifier character
          dpcl        Generates symbols for tools based on the Dynamic
                      Probe Class Library (DPCL)
          extchk      Perform external name type-checking and function
                      call checking.
          fdpr        Collect information about programs for use with
                      the AIX fdpr (Feedback Directed Program Restructuring)
                      performance-tuning utility.
          flttrap     Generate instructions to trap floating-point
                      exceptions.
          fold        Specifies that constant floating-point expressions
                      are to be evaluated at compile time.
          fullpath    Specifies the path information stored for files when
                      you use "-g" and the symbolic debugger.
          funcsect    Place instructions for each function in a separate csect.
          heapdebug   Enables debug versions of memory management functions.
          hot         Determines whether or not to perform high-order
                      transformations on loops during optimization.
          idirfirst   Specify the search order for files included with
                      the #include "file_name" directive.  Use -qidirfirst
                      with the -Idirectory option.  If -qidirfirst option
                      is specified, the directories specified by the
                      -Idirectory option are searched before the directory
                      where the current file resides.
          ignerrno    Tell the optimizer that the program will never
                      refer to or set errno.  This allows additional
                      optimizations.
          inlglue     Generate fast external linkage by inlining the
                      code (pointer glue code) necessary at calls
                      via a function pointer and calls to external
                      procedures.
          largepage   Take advantage of 16M pages, which will allow for
                      reduced TLB entries and allow hardware prefetching
                      to be done more efficiently.
          ldbl128     Increase long double size from 64 to 128 bits.
          libansi     Assumes that all functions with the name of an
                      ANSI C library functions are in fact the system functions.
          linedebug   Generates abbreviated line number and source file name
                      information for the debugger.
          list        Produce an object listing; output goes to .lst file.
          listopt     Display the settings of all options; output goes
                      to .lst file.
          longdouble  Increase long double size from 64 to 128 bits.
          longlit     Changes implicit type selection for integer constants in
                      64-bit mode.
          longlong    Allow long long integers.
          macpstr     Allow '\p' as the first character of a string constant
                      which will be replaced by the length in bytes.
          makedep     Creates an output file that contains targets suitable for
                      inclusion in a description file for the AIX make command.
          mbcs        String literals and comments can contain DBCS
                      characters (same as dbcs option).
          mkshrobj    Create a shared object from generated object files.
          noprint     Direct listing to /dev/null.
          nostdinc    Specify which files are included with the #include
                      "file_name" and #include <file_name> directives.
                      If -qnostdinc is specified, the /usr/include directory
                      is not searched.
          optimize    Same as O and O2. Perform optimization that is the
                      mix between speed and size.  (If -qnooptimize is
                      specified, it is equivalent to -qoptimize=0.)
          pascal      Accept and ignore the keyword 'pascal' as a
                      type modifier.
          pdf1, pdf2  Perform aggressive optimizations with profile
                      directed feedback.
          phsinfo     Produce compiler phase information; output goes to
                      stdout.
          proto       Assert that procedure call points agree
                      with their declarations even if the procedure has
                      not been prototyped. This allows the caller to
                      pass floating point arguments in floating point
                      registers instead of general purpose registers.
          report      Adds information to the listing file on the loop
                      transformations that have been carried out.
                      This option requires either -qhot or -qsmp
                      in order to have effect.
          ro          Put string literals in read only area.
          roconst     Put constant values in read only area.
          showinc     Include the source of all included files in the
                      source listing, if the SOURCE option is in effect.
          smallstack  Reduce the size of the stack frame, allowing better use
                      of a limited stack size.
          source      Produce a source listing; output goes to .lst file.
          srcmsg      Reconstruct source lines in error along with the
                      diagnostic messages in the stderr file.
          statsym     Adds user-defined, nonexternal names that have a
                      persistent storage class, such as initialized and
                      uninitialized static variables, to the name list
                      (the symbol table of xcoff objects).  Same as
                      -qsymtab=static.
          strict      Turns off aggressive optimizations which have the
                      potential to alter the semantics of a user's program.
                      This option also sets -qfloat=nofltint:norsqrt.
          strict_induction
                      Turns off induction variable optimizations
                      that have the potential to alter the semantics of a
                      user's program. The default is "nostrict_induction" at
                      -O2 or higher and "strict_induction" otherwise.
                      "nostrict_induction" is recomended if your program does
                      not have overflows or wrap arounds of loop induction
                      variables.
          syntaxonly  Causes the compiler to perform syntax checking without
                      generating an object file.
          threaded    Indicates to the compiler that the program will execute
                      in multi-threaded environment.
          tocmerge    Read from the file specified in -bImportfile linker
                      option and merge the address information to access
                      ranges of external addresses using a single Table Of
                      Content entry.
          upconv      Preserves the unsigned specification when performing
                      integral promotions.
          warn64      Enables checking for possible long-to-integer or
                      pointer-to-integer truncation.
          unwind      Enables stack unwinding.  The optimization prologue
                      tailoring reduces the number of saves and restores
                      of non-volatile registers, but is enabled only when
                      stack unwinding is disabled.
          xcall       Generate code to static routines within a compilation
                      unit as if they were external routines.
          xref        Produce a cross-reference listing containing
                      only referenced names.



          Options with parameters:
          aggrcopy=[no]overlap
                      Asserts whether source and destination of aggregate
                      assignments overlap.
          alias=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
                      allp    Pointers are never aliased.
                      ansi    Pointers can only point to an object of the
                              same type. Require -O option.
                      typ     Pointers to different types are never aliased.
          align=<algnopt>
                      bit_packed
                              Similar to packed, except bit-fields are
                              packed as tightly as possible.
                      full    The compiler uses the RISC System/6000
                              alignment rules. This is the same as power.
                      mac68k  The compiler uses the Macintosh**
                              alignment rules.
                      natural The compiler maps structure members to
                              their natural boundaries.
                      packed  The compiler uses the packed alignment rules.
                      power   The compiler uses the RISC System/6000
                              alignment rules.
                      twobyte The compiler uses the Macintosh alignment rules.
                              The mac68k option is the same as twobyte.
          arch=<option>
                      Specifies the architecture on which the executable
                      program will be run.
                      The available options are:
                      com     Produce an object that contains instructions
                              that will run on all the POWER and PowerPC
                              hardware platforms.
                      pwr     Produce an object that contains instructions
                              that will run on the POWER hardware
                              platform.
                      pwr2    Produce an object that contains instructions
                              that will run on the POWER2 hardware
                              platform.
                      pwrx    Same as pwr2.
                      ppc     Produce an object that contains instructions
                              that will run on any of the 32-bit PowerPC
                              hardware platforms.
                      ppcgr   Produce an object that contains optional
                              graphics instructions for PowerPC processors.
                      pwr2s   Produce an object that contains instructions
                              that will run on a pwr2s chip.
                      p2sc    Produce an object that contains instructions
                              that will run on a p2sc chip.
                      601     Produce an object that contains instructions
                              that will run on a 601 chip.
                      602     Produce an object that contains instructions
                              that will run on a 602 chip.
                      603     Produce an object that contains instructions
                              that will run on a 603 chip.
                      604     Produce an object that contains instructions
                              that will run on a 604 chip.
                      403     Produce an object that contains instructions
                              that will run on a 403 chip.
                      rs64a   Produce an object that contains instructions
                              that will run on a rs64a chip.
                      rs64b   Produce an object that contains instructions
                              that will run on a rs64b chip.
                      rs64c   Produce an object that contains instructions
                              that will run on a rs64c chip.
                      pwr3    Produce an object that contains instructions
                              that will run on a POWER3 chip.
                      pwr4    Produce an object that contains instructions
                              that will run on a POWER4 chip.
                      The default is -qarch=com.  If the -qarch option is
                      specified without the -qtune=<option>, the compiler
                      uses the default -qtune value for the specified
                      architecture. Refer to online documentation to find
                      actual default setting of -qtune  for a given -qarch.
          assert=<option>
                      Specifies the aliasing assertion to be applied to
                      your compilation unit.
                      The available options are:
                      typ     Pointers to different types are never aliased.
                      allp    Pointers are never aliased.
                      addr    Variables are disjoint from pointers
                              unless their address is taken.
          attr        Produce an attribute listing containing only
                      referenced names; output goes to .lst file.
          attr=full   Produce an attribute listing containing all names,
                      whether referenced or not; output goes to .lst file.
          bitfields=signed
          bitfields=unsigned
                      Specify whether bitfields will be signed or unsigned.
          cache=<suboption>:<suboption>...
                      Describe the cache configuration for a specific target
                      execution machine. See online documentation for details.
          chars=signed
          chars=unsigned
                      Specify whether the data type char will be signed
                      or unsigned.
          check=<option>
                      Generate code to check for run-time checks.
                      bounds  Runtime checking of addresses when
                              subscripting within an object of known size.
                      divzero Runtime checking of integer division.
                              A trap will occur if an attempt is made to
                              divide by zero.
                      nullptr Runtime checking of addresses
                              contained in pointer variables used to
                              reference storage.
                      all     Switches on all the above suboptions.
          dataimported=<name1>:<name2>: ...
                      Specify which data items are imported.  If no names are
                      specified, all data items are assumed to be imported.
                      This is the default.
          datalocal=<name1>:<name2>: ...
                      Specify which data items are local.  If no names are
                      specified, all data items are assumed to be local.
          enum=<enumopt>
                      Specify whether minimum-sized enumerated types will be
                      produced or not. <enumopt> can be either small, int,
                      1, 2, 4 or 8.
                      small denotes that either one, two, four or eight (valid
                      in 64-bit mode only) bytes of storage will be allocated
                      for enum variables based on the range of the enum
                      constants.
                      int is the default, and causes enum variables to be
                      treated as though they were of type signed int
                      depending on the range of the enum constants.
                      1 will cause enum variables to be packed into 1 byte.
                      2 will cause enum variables to be packed into 2 bytes.
                      4 will cause enum variables to be packed into 4 bytes.
                      8 will cause enum variables to be packed into 8 bytes.
                        (enum=8 is valid in 64-bit mode only)
          flag=<sev1>
                      Specify severity level of diagnostics to be reported
                      in source listing and stderr; the severity level
                      is one of <i,w,e,s,u>.
          flag=<sev1>:<sev2>
                      Specify severity level of diagnostics to be reported
                      in source listing (<sev1>), and stderr (<sev2>);
                      the severity levels are one of <i,w,e,s,u>.
          float=<opt1>:<opt2>:...:<optN>
                      The available options are:
                      emulate Function calls are emitted in place of
                              PowerPC floating-point instructions.
                              Use this option only in a single-threaded
                              stand-alone environment, targeting the
                              PowerPC 403 processor.
                              Do not use this suboption with any of the
                              following:
                              o  -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                              o  -qlongdouble, -qldbl128
                              o  128-bit long double invocation commands
                      fltint  Specify whether range checking of floating
                              point to integer conversions is done.
                              Default at -O2: -qfloat=nofltint.
                              Default at -O3: -qfloat=fltint.
                      hsflt   Never round single-precision expressions,
                              and don't perform range checking for
                              floating-point to integer conversions.
                      hssngl  Round single-precision expressions only
                              when the results are stored into float memory
                              locations.
                      nans    Detect conversion of single-precision NaNS to
                              double precision call checking.
                      nomaf   Suppress generation of multiply-add
                              instructions.
                      nofold  Suppress compile-time evaluation of constant
                              floating-point expressions.
                      rndsngl Ensure strict adherence to IEEE standard.
                              all operations on single-precision values
                              produce results that remain in single
                              precision.
                      rrm     Specify run-time rounding mode. Compile with
                              this option if the run-time rounding mode
                              is round toward minus infinity, round toward
                              positive infinity, or not known.
                      rsqrt   Specify whether a division by the result of a
                              square root can be replaced with a multiply
                              by the reciprocal of the square root.
                              Default at -O2: -qfloat=norsqrt.
                              Default at -O3: -qfloat=rsqrt.
                      spnans  Generate extra instructions to detect signaling
                              NaN on conversion from single precision to
                              double precision.  Obsolete; use the equivalent
                              -qfloat=nans option.
          flttrap=<opt1>:<opt2>:...:<optN>
                      Generate instructions to detect and trap floating-point.
                      The available options are:  overflow, underflow,
                      zerodivide, invalid, inexact, enable, imprecise.
          halt=<sev>  Stop compiler after first phase if severity of errors
                      detected equals or exceeds <sev>; the severity
                      level is one of i, w, e, s, u.
          genproto=<parmnames>
                      Produces ANSI prototypes from K&R function definitions.
          hot=<suboption>
                      Determines whether or not to perform high-order
                      transformations on loops and array language during
                      optimization, and whether or not to pad array dimensions
                      and data objects to avoid cache misses. Suboptions
                      include:
                        arraypad   - The compiler will pad any arrays where it
                                     infers there may be a benefit.  Make sure
                                     that you have not used equivalence
                                     association for any arrays in files
                                     compiled with this option as the compiler
                                     does not perform any checking before
                                     padding arrays.
                        arraypad=n - The compiler will pad every array in the
                                     code.  The pad amount must be a positive
                                     integer value.
                        novector   - The compiler will avoid replacing code by
                                     calls to vector library routines.
                        vector     - Allows the compiler to optimize by
                                     replacing code with calls to vector
                                     library routines.
          ignprag=<option>
                      The available options are:
                      disjoint
                              Ignore pragma disjoint.
                      isolated
                              Ignore pragma isolated_call.
                      omp     Ignore OpenMP parallel processing pragmas.
                      ibm     Ignore IBM parallel processing pragmas.
                      all     Ignore all the above pragmas.
          info
          info=all
                      Produce additional lint-like messages.  For C, it turns
                      on all diagnostic messages for all groups.  For C++, it
                      turns on all diagnostic messages for all groups, except
                      ppt.
          info=<group>
                      Produce additional lint-like messages based on <group>.
                      c99     Code that might behave differently between
                              C89 and C99 language levels
                      cls     Possible problems with generation of classes
                      cmp     Possible redundancies in unsigned comparisons
                      cnd     Possible redundancies or problems in conditional
                              expressions
                      cns     Operations involving constants.
                      cnv     Conversions
                      dcl     Consistency of declarations
                      eff     Statements with no effect
                      enu     Consistency of enum variables
                      ext     Unused external definitions
                      gen     General diagnostic messages
                      gnr     Generation of temporary variables
                      got     Use of goto statements
                      ini     Possible problems with initialization
                      inl     Functions not inlined
                      lan     Language level effects
                      obs     Obsolete features
                      ord     Unspecified order of evaluation
                      par     Unused parameters
                      por     Nonportable language constructs
                      ppc     Possible problems with using the preprocessor
                      ppt     Trace of preprocessor actions
                      private Lists shared variables made private to a
                              parallel loop.
                      pro     Missing function prototypes
                      rea     Code that cannot be reached
                      reduction
                              Lists all variables that are recognized as
                              reduction variables inside a parallel loop.
                      ret     Consistency of return statements
                      trd     Possible truncation or loss of data or precision
                      tru     Variable names truncated by the compiler
                      trx     Hexadecimal floating-point constants that cannot
                              be represented exactly in its evaluation format
                      uni     Unitialized variables
                      use     Unused auto and static variables
          initauto=<hh>
                      Initialialize automatic storage to <hh>. <hh> is a
                      hexadecimal value.  This generates extra code and
                      should only be used for error determination.
          inline[=<x>]
                      This is functionally equivalent to the -Q option.
          ipa=<subopt1>[=<val1>][:<subopt2>[=<val2>][:...:<suboptN>[=<valN>]]]
                      Enhances -O optimization by doing detailed analysis
                      across procedures.  One of -O, -O2, or -O3 is required
                      when using -qipa.  Regular expressions are supported
                      when specifying <procedure_names> on the -qipa=exits,
                      -qipa=inline, -qipa=lowfreq, -qipa=noinline, -qipa=pure,
                      -qipa=safe and -qipa=unknown suboptions.
                      Suboptions include:
                        exits=<procedure_names>
                                   - Specifies a selected set of procedures
                                     which always end the program.
                        inline=<inline-options>
                          The "ipa=inline=" command can take a colon-separated
                          list of inline options, which are as follows:
                            inline={auto|noauto}
                                        - Specifies whether or not to
                                          automatically inline expansion.
                            inline=<procedure_names>
                                        - Specifies a comma-separated list of
                                          procedures to try to inline.
                            inline=limit=<num>
                                        - Changes the size limits that deter-
                                          mine how much inline expansion to do.
                                          <num> is the optimizer's approximation
                                          of the number of bytes of code which
                                          will be generated.
                            inline=threshold=<num>
                                        - Specifies the upper size limit on
                                          procedures to inline.  <num> is
                                          defined as for inline=limit.
                        isolated=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not directly refer to any global
                                     variable.
                        level=<level>
                                   - Determines the amount of IPA analysis
                                     and optimization performed:
                                       0 = Does only minimal interprocedural
                                           analysis and optimization.
                                       1 = Turns on inlining, limited alias
                                           analysis, and limited call-site
                                           tailoring.
                                       2 = Full interprocedural data flow and
                                           alias analysis.
                        list=[filename|short|long]
                                   - Specifies an output listing file name
                                     during the link phase, in the event that
                                     an object listing has been requested
                                     using the -qlist option.  The default
                                     name is "a.lst".  The suboptions short and
                                     long determine which listing sections will
                                     be included.
                        lowfreq=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures that are likely to be
                                     called infrequently during the course
                                     of a typical program run.
                        missing={unknown|safe|isolated|pure}
                                   - Specifies the default assumption for
                                     procedures not compiled with -qipa.
                        noinline=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures which are not to be inlined.
                        noobject   - Speeds up compilation, but the object
                                     files cannot be used in non-IPA
                                     compilations.  This option is ignored if
                                     -S has been specified.
                        partition={small|medium|large}
                                   - Specifies the size of program sections
                                     that are analyzed together.  Larger
                                     partitions may produce better analysis but
                                     require more storage.
                        pure=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that are "isolated", "safe", and do not
                                     modify any data objects that are visible
                                     to the caller.
                        safe=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that do not call any other part of the
                                     program.
                        stdexits   - Specifies that compiler-defined exit
                                     routines can be optimized as with the
                                     "exits" suboption.  The procedures are
                                     abort, exit, _exit, and _assert.
                        nothreads    Single threaded invocation of the compiler
                                     backend.
                        threads      Compiler decides the number of threads
                                     used to invoke the compiler backend.
                        threads=<n>  Up to 'n' threads can be used to invoke
                                     the compiler backend.
                        unknown=<procedure_names>
                                   - Specifies a comma-separated list of
                                     procedures not compiled with -qipa and
                                     that may update global variables and
                                     dummy arguments and call other parts of
                                     the program compiled with -qipa.
                        The following options are intended for use by the
                        link-time phase of -qipa:
                        -qlibansi  - Assumes that all functions with the name
                                     of an ANSI C defined library function are,
                                     in fact, the library functions.
                                     -qnolibansi is the default.
                        -qlibessl  - Assumes that all functions with the name
                                     of an ESSL defined library functions are,
                                     in fact, the library functions.
                                     -qnolibessl is the default.
                        -qlibposix - Assumes that all functions with the name
                                     of a POSIX 1003.1 defined library function
                                     are, in fact, the system functions.
                                     -qnolibposix is the default.
          isolated_call=<name1>:<name2>: ...
                      Specify that the calls to the functions listed have no
                      side effects. <name1> and <name2> are function names.
                      The user may specify as many function names as
                      necessary.
          keyword=<keywords>
                      Enables the use of specific keywords.
          langlvl={<langlvl>|<feature>}[:<langlvl>|<feature>]...
                      Specify language level and/or features to be enabled
                      during compilation.
                      <langlvl>
                              can be extc89, stdc89, extc99, stdc99,
                              ansi, saal2, saa, extended, or classic.
                      <feature>
                              can be:
                              [no]ucs   enables or disables support for
                                        universal character names.
          maxerr=<num>[:<sev>]
                      Instructs the compiler to halt compilation when <num>
                      errors of <sev> or greater severity is reached.  The
                      default for <sev> is current value of the -qhalt option.
          maxmem=<num>
                      Limit the amount of memory used by space intensive
                      optimizations to <num>.  <num> specified in kilobytes.
          optimize=<level>
                      Enables different levels of optimization.
                      2       Same as -O and -qoptimize.
                      3       Same as -O3. Aggressive optimization.
                      4       Same as -O4. Internally generates -O3 -qipa
                              with automatic architecture and tuning option
                              generation.
                      5       Same as -O5. Internally generates -O3
                              -qipa=level=2 with automatic architecture and
                              tuning option generation.
          procimported=<name1>:<name2>: ...
                      Specify which functions are imported.  If no filenames
                      are specified, all invoked functions are assumed to be
                      defined outside the current file.  The last explicit
                      specification for a function takes precedence.
          proclocal=<name1>:<name2>: ...
                      Specify which functions are local.
                      If no filenames are specified, all invoked functions
                      are assumed to be defined within the current file.
                      The last explicit specification for a function takes
                      precedence.
          procunknown=<name1>:<name2>: ...
                      Specify which functions are unknown to be local or
                      imported.  If no filenames are specified, all functions
                      called are assumed to be unknown. This is the default
                      when no user options are specified. The last explicit
                      specification for a function takes precedence.
          profile=<option>
                      Sets up the object files produced by the compiler for
                      profiling.
                      The available options are:
                      ibm     Generate profiling support code for use with the
                              Performance Analysis tool in VisualAge C++.
                      p       Generate profiling support code.  Same as -p.
                      pg      Generate profiling support code including BSD
                              profiling support.  Same as -pq.
          smp[=suboption[:suboption] [ ... ]]
                      Controls acceptance of OpenMP directives and
                      automatic parallelization.  The auto and omp suboptions
                      are opposites. i.e. -qsmp=omp means strict adherance
                      to the OpenMP standard with no automatic parallelization.
                      [no]auto
                              Enables or disables automatic parallelization.
                      [no]explicit
                              Enables or disables explicit parallelization.
                      [no]opt
                              Turns off the implied optimization to allow
                              simpler debugging.
                      schedule=<sched_type>[=n]
                              Specifies what kind of scheduling algorithms
                              and chunking are used for loops to which no
                              other scheduling algorithm has been explicitly
                              assigned in the source code.
                              Valid options for <sched_type> are:
                                         * dynamic[=n]
                                         * guided[=n]
                                         * static[=n]
                                         * affinity[=n]
                                         * runtime
                              For more information, see online documentation.
                      [no]nested_par
                              Enables or disables parallelization of nested
                              parallel constructs.
                      [no]rec_locks
                              Specifies whether recursive or regular locks
                              should be used to implement critical sections.
                      [no]omp Enables or disables strict OpenMP mode.
          spill=<size>
                      Specify the size of the register allocation spill area.
          suppress=<msg_num>:<msg_num>...
                      Suppress compiler messages.
          nosuppress
                      Don't suppress compiler messages.
          symtab=<options>
                      Controls symbol table.
                      The available options are:
                      unref   Specifies that all typedef declarations, struct,
                              union, and enum type definitions are included
                              for processing by the debugger.  Same as
                              -qdbxextra.
                      static  Adds user-defined, nonexternal names that have a
                              persistent storage class, such as initialized
                              and uninitialized static variables, to the name
                              list (the symbol table of xcoff objects).  Same
                              as -qstatsym.
          tabsize=<size>
                      Changes the length of tabs in your source file.
          tbtable=<option>
                      Generate a traceback table for each function and
                      place it in the text segment at the end of the
                      function code.
                      The available options are:
                      none    No traceback table is generated.
                      full    A full traceback table is generated.
                              This is the default with -g specified.
                      small   A traceback table is generated with no name or
                              parameter information.
                              This is the default when -g is NOT specified.
          tune=<option>
                      Specifies the architecture system for which the
                      executable program is optimized.
                      The available options are:
                      403     Produce an object optimized for all the
                              PowerPC 403 processors.
                              Use -qfloat=emulate to emulate the floating-point
                              instructions omitted by the 403 processor.
                      601     Produce an object optimized for all the
                              PowerPC 601 processors.
                      602     Produce an object optimized for all the
                              PowerPC 602 processors.
                      603     Produce an object optimized for all the
                              PowerPC 603 processors.
                      604     Produce an object optimized for all the
                              PowerPC 604 processors.
                      p2sc    Produce an object optimized for all the
                              p2sc processors.
                      pwr     Produce an object optimized for the POWER
                              hardware platform.
                      pwr2    Produce an object optimized for the
                              POWER2 hardware platform.
                      pwr2s   Produce an object optimized for the
                              POWER2 hardware platform, avoiding certain
                              quadruple-precision instructions that would
                              slow program performance.
                      pwrx    Same as pwr2.
                      rs64a   Produce an object optimized for the rs64a
                              processor.
                      rs64b   Produce an object optimized for the rs64b
                              processor.
                      rs64c   Produce an object optimized for the rs64c
                              processor.
                      pwr3    Produce an object optimized for the POWER3
                              processor.
                      pwr4    Produce an object optimized for the POWER4
                              processor.
          unroll={yes|no|auto}
                      yes     Hint for the compiler to try to unroll loops.
                      no      Force the compiler not to unroll any loops.
                      auto    Let the compiler decide whether to unroll loops.
          unroll      same as unroll=yes
          nounroll    same as unroll=no
          xref=full   Produce a cross-reference listing containing all names,
                      whether referenced or not; output goes to .lst file.

  Environment Variables
     1.OBJECT_MODE changes the compilation-mode behavior, unless overridden by
                   configuration file or command-line options

        Setting

         not set   32-bit compiler mode.
          32       32-bit compiler mode.
          64       64-bit compiler mode.
         32_64     Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.
        any other  Fatal error and stop, unless an explicit configuration
                   file or command-line compiler-mode setting exists.

  For a detailed description of each option, please refer to the online
  documentation.
rm /tmp/xlcW0Jrsvqa
rm /tmp/xlcW1Jrsvqb
rm /tmp/xlcW2Jrsvqc
configure:19514: $? = 249
configure:19517: checking whether we are using the GNU C compiler
configure:19572: result: no
configure:19578: checking whether cc accepts -g
configure:19628: result: yes
configure:19645: checking for cc option to accept ANSI C
configure:19751: result: none needed
configure:19769: cc -c  -DNDEBUG conftest.c >&5
"conftest.c", line 2.3: 1506-166 (S) Definition of function choke requires parentheses.
"conftest.c", line 2.9: 1506-046 (S) Syntax error.
configure:19775: $? = 1
configure: failed program was:
| #ifndef __cplusplus
|   choke me
| #endif
configure:19907: checking dependency style of cc
configure:19990: result: none
configure:20010: checking for cc option to accept ANSI C
configure:20073: cc  -c  -DNDEBUG conftest.c >&5
configure:20079: $? = 0
configure:20082: test -z 			 || test ! -s conftest.err
configure:20085: $? = 0
configure:20088: test -s conftest.o
configure:20091: $? = 0
configure:20106: result: none needed
configure:20130: checking for a BSD-compatible install
configure:20185: result: ./install-sh -c
configure:20216: checking for extra flags to get ANSI library prototypes
configure:20237: cc -o conftest  -DNDEBUG  conftest.c  -lm >&5
configure:20240: $? = 0
configure:20242: ./conftest
configure:20245: $? = 0
configure:20247: result: none needed
configure:20307: checking for extra flags for POSIX compliance
configure:20325: cc -c  -DNDEBUG conftest.c >&5
configure:20331: $? = 0
configure:20334: test -z 			 || test ! -s conftest.err
configure:20337: $? = 0
configure:20340: test -s conftest.o
configure:20343: $? = 0
configure:20345: result: none needed
configure:20406: checking for ANSI C header files
configure:20561: result: yes
configure:20577: checking for vprintf
configure:20634: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:20640: $? = 0
configure:20643: test -z 			 || test ! -s conftest.err
configure:20646: $? = 0
configure:20649: test -s conftest
configure:20652: $? = 0
configure:20664: result: yes
configure:20671: checking for _doprnt
configure:20728: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:20734: $? = 0
configure:20737: test -z 			 || test ! -s conftest.err
configure:20740: $? = 0
configure:20743: test -s conftest
configure:20746: $? = 0
configure:20758: result: yes
configure:20778: checking for atexit
configure:20835: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:20841: $? = 0
configure:20844: test -z 			 || test ! -s conftest.err
configure:20847: $? = 0
configure:20850: test -s conftest
configure:20853: $? = 0
configure:20865: result: yes
configure:20778: checking for on_exit
configure:20835: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:20841: $? = 0
configure:20844: test -z 			 || test ! -s conftest.err
configure:20847: $? = 0
configure:20850: test -s conftest
configure:20853: $? = 0
configure:20865: result: yes
configure:20876: checking for char
configure:20900: cc -c  -DNDEBUG conftest.c >&5
configure:20906: $? = 0
configure:20909: test -z 			 || test ! -s conftest.err
configure:20912: $? = 0
configure:20915: test -s conftest.o
configure:20918: $? = 0
configure:20929: result: yes
configure:20932: checking size of char
configure:21244: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:21247: $? = 0
configure:21249: ./conftest
configure:21252: $? = 0
configure:21275: result: 1
configure:21282: checking for short
configure:21306: cc -c  -DNDEBUG conftest.c >&5
configure:21312: $? = 0
configure:21315: test -z 			 || test ! -s conftest.err
configure:21318: $? = 0
configure:21321: test -s conftest.o
configure:21324: $? = 0
configure:21335: result: yes
configure:21338: checking size of short
configure:21650: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:21653: $? = 0
configure:21655: ./conftest
configure:21658: $? = 0
configure:21681: result: 2
configure:21688: checking for long
configure:21712: cc -c  -DNDEBUG conftest.c >&5
configure:21718: $? = 0
configure:21721: test -z 			 || test ! -s conftest.err
configure:21724: $? = 0
configure:21727: test -s conftest.o
configure:21730: $? = 0
configure:21741: result: yes
configure:21744: checking size of long
configure:22056: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:22059: $? = 0
configure:22061: ./conftest
configure:22064: $? = 0
configure:22087: result: 4
configure:22094: checking for int
configure:22118: cc -c  -DNDEBUG conftest.c >&5
configure:22124: $? = 0
configure:22127: test -z 			 || test ! -s conftest.err
configure:22130: $? = 0
configure:22133: test -s conftest.o
configure:22136: $? = 0
configure:22147: result: yes
configure:22150: checking size of int
configure:22462: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:22465: $? = 0
configure:22467: ./conftest
configure:22470: $? = 0
configure:22493: result: 4
configure:22500: checking for void *
configure:22524: cc -c  -DNDEBUG conftest.c >&5
configure:22530: $? = 0
configure:22533: test -z 			 || test ! -s conftest.err
configure:22536: $? = 0
configure:22539: test -s conftest.o
configure:22542: $? = 0
configure:22553: result: yes
configure:22556: checking size of void *
configure:22868: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:22871: $? = 0
configure:22873: ./conftest
configure:22876: $? = 0
configure:22899: result: 4
configure:22906: checking for long long
configure:22930: cc -c  -DNDEBUG conftest.c >&5
configure:22936: $? = 0
configure:22939: test -z 			 || test ! -s conftest.err
configure:22942: $? = 0
configure:22945: test -s conftest.o
configure:22948: $? = 0
configure:22959: result: yes
configure:22962: checking size of long long
configure:23274: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:23277: $? = 0
configure:23279: ./conftest
configure:23282: $? = 0
configure:23305: result: 8
configure:23313: checking for an ANSI C-conforming const
configure:23380: cc -c  -DNDEBUG conftest.c >&5
"conftest.c", line 44.17: 1506-359 (I) Automatic variable x contains a const member and is not initialized.  It will be initialized to zero.
configure:23386: $? = 0
configure:23389: test -z 			 || test ! -s conftest.err
configure:23392: $? = 0
configure:23395: test -s conftest.o
configure:23398: $? = 0
configure:23409: result: yes
configure:23420: checking for __inline
configure:23445: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:23448: $? = 0
configure:23450: ./conftest
configure:23453: $? = 0
configure:23471: result: yes
configure:23479: checking for __inline__
configure:23504: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:23507: $? = 0
configure:23509: ./conftest
configure:23512: $? = 0
configure:23530: result: yes
configure:23538: checking for inline
configure:23563: cc -o conftest  -DNDEBUG  conftest.c  >&5
configure:23566: $? = 0
configure:23568: ./conftest
configure:23571: $? = 0
configure:23589: result: yes
configure:23598: checking whether byte ordering is bigendian
configure:23625: cc -c  -DNDEBUG conftest.c >&5
configure:23631: $? = 0
configure:23634: test -z 			 || test ! -s conftest.err
configure:23637: $? = 0
configure:23640: test -s conftest.o
configure:23643: $? = 0
configure:23667: cc -c  -DNDEBUG conftest.c >&5
configure:23673: $? = 0
configure:23676: test -z 			 || test ! -s conftest.err
configure:23679: $? = 0
configure:23682: test -s conftest.o
configure:23685: $? = 0
configure:23806: result: yes
configure:23840: checking float.h usability
configure:23852: cc -c  -DNDEBUG conftest.c >&5
configure:23858: $? = 0
configure:23861: test -z 			 || test ! -s conftest.err
configure:23864: $? = 0
configure:23867: test -s conftest.o
configure:23870: $? = 0
configure:23880: result: yes
configure:23884: checking float.h presence
configure:23894: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:23900: $? = 0
configure:23920: result: yes
configure:23955: checking for float.h
configure:23962: result: yes
configure:23992: checking limits.h usability
configure:24004: cc -c  -DNDEBUG conftest.c >&5
configure:24010: $? = 0
configure:24013: test -z 			 || test ! -s conftest.err
configure:24016: $? = 0
configure:24019: test -s conftest.o
configure:24022: $? = 0
configure:24032: result: yes
configure:24036: checking limits.h presence
configure:24046: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:24052: $? = 0
configure:24072: result: yes
configure:24107: checking for limits.h
configure:24114: result: yes
configure:24144: checking pwd.h usability
configure:24156: cc -c  -DNDEBUG conftest.c >&5
configure:24162: $? = 0
configure:24165: test -z 			 || test ! -s conftest.err
configure:24168: $? = 0
configure:24171: test -s conftest.o
configure:24174: $? = 0
configure:24184: result: yes
configure:24188: checking pwd.h presence
configure:24198: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:24204: $? = 0
configure:24224: result: yes
configure:24259: checking for pwd.h
configure:24266: result: yes
configure:24296: checking sys/param.h usability
configure:24308: cc -c  -DNDEBUG conftest.c >&5
configure:24314: $? = 0
configure:24317: test -z 			 || test ! -s conftest.err
configure:24320: $? = 0
configure:24323: test -s conftest.o
configure:24326: $? = 0
configure:24336: result: yes
configure:24340: checking sys/param.h presence
configure:24350: cc -E -DNDEBUG conftest.c
1506-173 (W) Option lm is not valid. Enter xlc for list of valid options.
configure:24356: $? = 0
configure:24376: result: yes
configure:24411: checking for sys/param.h
configure:24418: result: yes
configure:24448: checking sys/poll.h usability
configure:24460: cc -c  -DNDEBUG conftest.c >&5
