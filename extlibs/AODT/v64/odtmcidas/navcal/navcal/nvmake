#!/bin/sh
#
#---------------------------------------------------------------
#
#	this script will generate the file 'nvprep.c'
#	given a list of input modules
#
#	Usage: nvmake <list of navigation modules> -o <filename>
#
#---------------------------------------------------------------

#set -x

#-------
#  process the command line
#-------

case $# in
0)	cat >&2 << !

Usage: $0 <file(s)>

file(s)		is a list of files that will be filtered according to nvx*.dlm

		example: '$0 *.dlm -o nvprep.for' would use
		all of the nav modules in the current
		directory to build nvprep.for.

		NOTES:
		
		Duplicate module names are not allowed.
		The module does not have to exist for $0 to function properly.

!
	err=1
	exit $err
	;;
*)
	;;
esac

sfile=$$
trap "trap 0 1 2 3 15; rm -f $sfile; if [ \$err -ne 0 -a -f \"$outfile\" ]; then rm -f \"$outfile\"; fi; exit \$err" 0 1 2 3 15

#-------
# shell function to build the main section of file
#-------

build_main()	# output_file type
{

	numslots="$1";	shift
	num="$#"

	echo "
/*
             !!! THIS IS A GENERATED FILE !!!
             !!!  DO NOT ATTEMPT TO EDIT !!!

 int nvprep(int islot, int *iparms)

 Setup and initialize nav module.
  = 0 OK
  =-1 Invalid or missing nav parameters
  =-2 Bad slot or navigation type

 islot = (I) Logical slot number
 iparms = (I) Array of nav parameters

*/

#include <strings.h>
#define NUMNAV ${num}  
#define NUMOPTIN 3
#define NUMOPTOUT 3

	">>$outfile


	i=1
	while [ $i -le $numslots ]; do
		echo "int nv${i}ini(int , int *);">>$outfile
		echo "int nv${i}eas(double,double,double,double*,double*,double*);">>$outfile
		echo "int nv${i}sae(double,double,double,double*,double*,double*);">>$outfile
		echo "int nv${i}opt(int , double *, double *);">>$outfile
	        for t in $* 
                do
		   echo "int nv${i}ini${t}_(int *, int *);">>$outfile
		   echo "int nv${i}eas${t}_(float*,float*,float*,float*,float*,float*);">>$outfile
		   echo "int nv${i}sae${t}_(float*,float*,float*,float*,float*,float*);">>$outfile
		   echo "int nv${i}opt${t}_(int *, float *, float *);">>$outfile
                done
		i=`expr $i + 1`
	done


echo "

int nvprep(int, int *);
int navhandles[${numslots}];

int nvprep(int islot, int *iparms)
{

        ">>$outfile

	echo "

      int i;
      int rc;
      static const char *cll = \"LL  \";

      static const char *csubs[NUMNAV] = { ">>$outfile

	#-------
	# loop through nav types and build data statement
	#-------

	last=`expr "$num" - 1`

	# start at -1 because we'll immediately increment this

	count=-1

	for t in $*
	do
		count=`expr "$count" + 1`

		#-------
		# pad type to four characters
		#-------

                #-------
                # capitalize the nav type 
                #-------

		upname=`echo "$t" | tr '[a-z]' '[A-Z]'`

		case "$upname" in
			????)	;;
			???)	upname="$upname "	;;
			??)	upname="$upname  "	;;
			?)	upname="$upname   "	;;
		esac

		tag="$count"

		#-------
		# check to see if line needs to be continued
		#-------

		cont=`expr "$count" % 8`

		if [ "$count" -gt 0 ]
		then	if [ "$cont" -eq 0 ]
			then	if [ "$count" -eq "$last" ]
				then	tag='cend'
				else	tag='cont'
				fi
			fi
		fi

		case ${tag} in

			0)	buf="  \"${upname}\","
				;;

			$last)	buf="$buf\"${upname}\"};"
				break
				;;

			'cont')	buf="$buf
       \"${upname}\","
				;;

			'cend')	buf="$buf
       \"${upname}\"};"
				;;

			*)	buf="$buf\"${upname}\","
				;;
		esac
	done

	#-------
	# handle case of only one valid nav type
	#-------

	if [ $num -eq 1 ]
	then	buf="  \"${upname}\"};"
	fi

	echo "     ${buf}
">>$outfile

	#-------
	# build the remainder of main
	#-------

	echo "
      if(islot < 1 || islot > ${numslots}) return(-2);
      rc = 0;

      for (i=0; i < NUMNAV; ++i)
      {
         if(!strncmp(csubs[i], (char*)&iparms[0], 4))
         {
            navhandles[islot-1] = i+1;
            switch(islot) 
            {
 ">>$outfile
	i=1
	indent="            "
	while [ $i -le $numslots ]; do
		echo "${indent}case ${i}:">>$outfile
		echo "${indent}   rc=nv${i}ini(1, iparms);">>$outfile
		echo "${indent}   rc=nv${i}ini(2, (int*)cll);">>$outfile
		echo "${indent}   break;">>$outfile
		i=`expr $i + 1`
	done
	echo "${indent}default:
              rc = -2;
              break;
            }
            return(rc);
         }
    }   
    return(-2);
}

">>$outfile
}

build_ini()	# slot output_file type
{

	slot="$1";	shift
	numslots="$1";	shift
	num="$#"

	#-------
	# build header for the function
	#-------

	echo "
int nv${slot}ini(int i1, int *i2)
{
   int rc = 0; 

">>$outfile

	#-------
	# build calling sequence for the function
	#-------

	echo "   switch(navhandles[`expr "$slot" - 1`])" >>$outfile
	echo "   {" >>$outfile
        

	count=0
	for t in $*
	do
		count=`expr "$count" + 1`

		#-------
		# assume we won't have more than 9999 modules
		#-------

		space="     "

		echo "        case ${count}:">>$outfile
		echo "           rc = nv${slot}ini${t}_(&i1, i2);">>$outfile
		echo "           break;">>$outfile
	done

	echo "	default:
	   rc = -2;
	   break;
   }
   return(rc);
}">>$outfile
}


build_eas()	# slot output_file type
{

	slot="$1";	shift
	numslots="$1";	shift
	num="$#"


	#-------
	# build header for the function
	#-------

	echo "
int nv${slot}eas(double d1, double d2, double d3, 
           double *d4, double *d5, double *d6)
{
   float x1, x2, x3, x4, x5, x6; 
   int rc = 0;

   x1 = (float) d1;
   x2 = (float) d2;
   x3 = (float) d3;

">>$outfile

	#-------
	# build calling sequence for the function
	#-------

	echo "   switch(navhandles[`expr "$slot" - 1`])" >>$outfile
	echo "   {" >>$outfile
        

	count=0
	for t in $*
	do
		count=`expr "$count" + 1`

		#-------
		# assume we won't have more than 9999 modules
		#-------

		space="     "

		echo "        case ${count}:">>$outfile
		echo "           rc = nv${slot}eas${t}_(&x1, &x2, &x3, &x4, &x5, &x6);">>$outfile
		echo "           break;">>$outfile
	done

	echo "	default:
	   rc = -2;
	   break;
   }
   *d4 = (double) x4;
   *d5 = (double) x5;
   return(rc);
}">>$outfile
}


build_sae()	# slot output_file type
{

	slot="$1";	shift
	numslots="$1";	shift
	num="$#"
      

	#-------
	# build header for the function
	#-------

	echo "
int nv${slot}sae(double d1, double d2, double d3, 
           double *d4, double *d5, double *d6)
{
   float x1, x2, x3, x4, x5, x6; 
   int rc = 0;

   x1 = (float) d1;
   x2 = (float) d2;
   x3 = (float) d3;

">>$outfile

	#-------
	# build calling sequence for the function
	#-------

	echo "   switch(navhandles[`expr "$slot" - 1`])" >>$outfile
	echo "   {" >>$outfile
        

	count=0
	for t in $*
	do
		count=`expr "$count" + 1`

		#-------
		# assume we won't have more than 9999 modules
		#-------

		space="     "

		echo "        case ${count}:">>$outfile
		echo "           rc = nv${slot}sae${t}_(&x1, &x2, &x3, &x4, &x5, &x6);">>$outfile
		echo "           break;">>$outfile
	done

	echo "	default:
	   rc = -2;
	   break;
   }

   if( rc == 0) 
   {
      *d4 = (double) x4;
      *d5 = (double) x5;
   }

   return(rc);
}">>$outfile
}


build_opt()	# slot output_file type
{

	slot="$1";	shift
	numslots="$1";	shift
	num="$#"


	#-------
	# build header for the function
	#-------

	echo "
int nv${slot}opt(int i1, double *d2, double *d3)
{ 
   float x2[NUMOPTIN];
   float x3[NUMOPTOUT];
   int i;
   int rc = 0;
  
   for(i=0;i<NUMOPTOUT;++i)
   {
      x3[i] = 0.0;
   } 

   for(i=0;i<NUMOPTIN;++i)
   {
      x2[i] = (float) d2[i];
   }

">>$outfile

	#-------
	# build calling sequence for the function
	#-------

	echo "   switch(navhandles[`expr "$slot" - 1`])" >>$outfile
	echo "   {" >>$outfile
        

	count=0
	for t in $*
	do
		count=`expr "$count" + 1`

		#-------
		# assume we won't have more than 9999 modules
		#-------

		space="     "

		echo "        case ${count}:">>$outfile
		echo "           rc = nv${slot}opt${t}_(&i1, x2, x3);">>$outfile
		echo "           break;">>$outfile
	done

	echo "	default:
	   rc = -2;
	   break;
   }
   for(i=0;i<NUMOPTOUT;++i)
   {
      d3[i] = (double) x3[i];
   }

   return(rc);
}">>$outfile
}

###############################################################################

#-------
# parse the command line and build an ini, eas, sae, and opt file for each type
#-------

err=0
num=0
numslots=3
type=
outfile=

while [ $# -gt 0 ]; do

	#-------
	# grab first argument
	#-------

	f="$1"
	shift

	case "$f" in
	*nvx*.dlm)

		#-------
		# strip the 'nvx' prefix and the '.dlm' suffix
		#-------

		tmp="`expr "$f" : '.*nvx\(.*\).dlm'`"

		#-------
		# check the nav type uniqueness
		#-------

		case "$type" in
		*" $tmp "*)
			>&2 echo "$f" is a DUPLICATE navigation module
			err=1
			continue
			;;
		esac

		type="$type $tmp "
		num=`expr "$num" + 1`
		;;
	-n)

		#-------
		# save number of slots to build
		#-------

		if [ "$#" -ge 1 ]; then
			if [ "$1" -ge 1 -a "$1" -le 9 ]; then
				numslots=$1
			else
				echo "Bad number of slots \"$1\"" >&2
			fi
			shift
		else
			echo "Missing number of slots after '-n'" >&2
			err=1
		fi
		;;
	-o)

		#-------
		# save output file name
		#-------

		if [ "$#" -ge 1 ]; then
			if [ -z "$outfile" ]; then
				outfile="$1"
			else
				echo "Please specify only one output file" >&2
				err=1
			fi
			shift
		else
			echo "Missing output file after '-o'" >&2
			err=1
		fi
		;;
	-*)
		echo "Bad option '$f'" >&2
		echo "Usage: $0 [-n slots] -o outfile dlm-file ..." >&2
		err=1
		;;
	*)
		# >&2 echo "$f" is not a valid navigation module
		;;
	esac
done

#-------
# check to see if there were duplicates in the list
#-------

if [ $err -ne 0 ]; then
	exit $err
fi

#-------
# check to see if the list is empty
#-------

case $num in
0)	>&2 echo "No valid navigation modules were found"
	err=1
	exit $err
	;;
esac

#-------
# if no output file was specified, whine and die
#-------

if [ -z "$outfile" ]; then
	echo "No output file specified" >&2
	err=1
	exit $err
fi

#-------
# make sure output file exists and is empty
#-------

rm -f $outfile
touch $outfile

#-------
# sort the list of modules
#-------

/bin/rm -f $sfile 2>/dev/null

for s in $type
do
	echo $s >> $sfile
done

type=`sort $sfile`

>&2 echo NAV TYPES: $type


#-------
# build the main file
#-------

build_main $numslots $type

for func in ini eas sae opt; do
	>&2 echo working on $func

	slot=1
	while [ $slot -le $numslots ]; do
		#-------
		# build the funcs
		#-------

		build_$func $slot $numslots $type
		slot=`expr $slot + 1`
	done
done
