#!/bin/sh
#
#---------------------------------------------------------------
#
#       this script will generate the file 'kbprep.c'
#       given a list of input modules
#
#       Usage: kbmake <list of calibration modules> -o <filename>
#
#---------------------------------------------------------------

#set -x

#-------
#  process the command line
#-------

case $# in
0)      cat >&2 << !

Usage: $0 <file(s)>

file(s)         is a list of files that will be filtered according to kbx*.dlm

                example: '$0 ~mcidas/src/*.dlm *.dlm -o kbprep.c' would use
                all of the cal modules in ~mcidas/src and the current
                directory to build kbprep.c.

                NOTES:

                Duplicate module names are not allowed.
                The module does not have to exist for $0 to function properly.

!
        err=1
        exit $err
        ;;
*)
        ;;
esac

sfile=$$
trap "trap 0 1 2 3 15; rm -f $sfile; if [ \$err -ne 0 -a -f \"$outfile\" ];
then rm -f \"$outfile\"; fi; exit \$err" 0 1 2 3 15

build_main()    # output_file type
{

        numslots="$1";  shift
        num="$#"

        echo "
/*
             !!! THIS IS A GENERATED FILE !!!
             !!!  DO NOT ATTEMPT TO EDIT !!!

 int kbprep(int islot, struct ARACOM *aracom)

 Setup and initialize cal module.
  = 0 OK
  =-1 Invalid or missing cal parameters
  =-2 Bad slot or calibration type

 islot = (I) Logical slot number
 aracom = (struct ARACOM *) structure for area parameters

*/

#include <strings.h>
#include \"aracom.h\"
#define NUMCAL ${num}
#define NUMOPTIN 3
#define NUMOPTOUT 3
        ">>$outfile

        i=1
        while [ $i -le $numslots ]; do
                echo "int kb${i}ini(int, struct ARACOM *);">>$outfile
                echo "int kb${i}cal(long *, long *, int, int, long *);">>$outfile
                echo "int kb${i}opt(long, long *, long *);">>$outfile
                for t in $*
                do
                   echo "int kb${i}ini${t}_(char *, char *, int *, int, int);">>$outfile
                   echo "int kb${i}cal${t}_(int *, int *, int *, int *, int *);">>$outfile
                   echo "int kb${i}opt${t}_(char *, int *, int *, int);">>$outfile
                done
                i=`expr $i + 1`
        done


echo "

int kbprep(int, struct ARACOM *);
int calhandles[${numslots}];

int kbprep(int islot, struct ARACOM *aracom)
{ ">>$outfile

echo "      int i;
      int rc;

      static const char *csubs[NUMCAL] = { ">>$outfile

        #-------
        # loop through cal types and build data statement
        #-------

        last=`expr "$num" - 1`

        # start at -1 because we'll immediately increment this

        count=-1

        for t in $*
        do
                count=`expr "$count" + 1`

                #-------
                # pad type to four characters
                #-------
                #-------
                # capitalize the nav type
                #-------

                upname=`echo "$t" | tr '[a-z]' '[A-Z]'`

                case "$upname" in
                        ????)   ;;
                        ???)    upname="$upname "       ;;
                        ??)     upname="$upname  "      ;;
                        ?)      upname="$upname   "     ;;
                esac

                tag="$count"

                #-------
                # check to see if line needs to be continued
                #-------

                cont=`expr "$count" % 8`

                if [ "$count" -gt 0 ]
                then    if [ "$cont" -eq 0 ]
                        then    if [ "$count" -eq "$last" ]
                                then    tag='cend'
                                else    tag='cont'
                                fi
                        fi
                fi

                case ${tag} in

                        0)      buf="  \"${upname}\","
                                ;;

                        $last)  buf="$buf\"${upname}\"};"
                                break
                                ;;

                        'cont') buf="$buf\"${upname}\","
                                ;;
			
			'cend') buf="$buf\"${upname}\"};"
                                ;;

                        *)      buf="$buf\"${upname}\","
                                ;;
                esac
        done

        #-------
        # handle case of only one valid cal type
        #-------

        if [ $num -eq 1 ]
        then    buf="  \"${upname}\"};"
        fi

        echo "     ${buf} ">>$outfile

        #-------
        # build the remainder of main
        #-------

	echo " 
      if(islot < 1 || islot > ${numslots}) return(-2);
      if (aracom->dir[52]==aracom->options[2]) return(0);
      rc = 0;

      for (i=0; i < NUMCAL; ++i)
      {
         if(!strncmp(csubs[i], (char*)&aracom->dir[51], 4))
         {
            calhandles[islot - 1] = i+1;
            aracom->slot = islot;
            switch(islot)
            { ">>$outfile
        i=1
        indent="            "
        while [ $i -le $numslots ]; do
                echo "${indent}case ${i}:">>$outfile
                echo "${indent}   rc=kb${i}ini(1, aracom);">>$outfile
                echo "${indent}   break;">>$outfile
                i=`expr $i + 1`
        done
        echo "${indent}default:
              rc = -2;
              break;
            }
            return(rc);
         }
    } 
    return(-2);
}
">>$outfile
}


build_ini()     # slot output_file type
{

        slot="$1";      shift
        numslots="$1";  shift
        num="$#"

        #-------
        # build header for the function
        #-------

        echo "
int kb${slot}ini(int i1, struct ARACOM *aracom)
{
   int rc = 0;

   aracom->cin = aracom->dir[52];
   aracom->cout = aracom->options[2];
">>$outfile

        #-------
        # build calling sequence for the function
        #-------

        echo "   switch(calhandles[`expr "$slot" - 1`])" >>$outfile
        echo "   {" >>$outfile


        count=0
        for t in $*
        do
                count=`expr "$count" + 1`

                #-------
                # assume we won't have more than 9999 modules
                #-------

                echo "        case ${count}:">>$outfile
                echo "           rc = kb${slot}ini${t}_((char *)&aracom->cin, (char *)&aracom->cout, (int *)aracom->options, 4, 4);">>$outfile
                echo "           break;">>$outfile
        done

        echo "        default:
           rc = -2;
           break;
   }
   return(rc);
}">>$outfile
}

build_cal()     # slot output_file type
{

        slot="$1";      shift
        numslots="$1";  shift
        num="$#"

        #-------
        # build header for the function
        #-------

        echo "
int kb${slot}cal(long *pfx, long *dir, int nval, int band, long *buf)
{
   int rc = 0;
">>$outfile

        #-------
        # build calling sequence for the function
        #-------

        echo "   switch(calhandles[`expr "$slot" - 1`])" >>$outfile
        echo "   {" >>$outfile


        count=0
        for t in $*
        do
                count=`expr "$count" + 1`

                #-------
                # assume we won't have more than 9999 modules
                #-------

                echo "        case ${count}:">>$outfile
                echo "           rc = kb${slot}cal${t}_((int *)pfx, (int *)dir, &nval, &band, (int *)buf);">>$outfile
                echo "           break;">>$outfile
        done

        echo "        default:
           rc = -2;
           break;
   }
   return(rc);
}">>$outfile
}

build_opt()     # slot output_file type
{

        slot="$1";      shift
        numslots="$1";  shift
        num="$#"


        #-------
        # build header for the function
        #-------

        echo "
int kb${slot}opt(long c1, long *i1, long *i2)
{
   int rc = 0;
">>$outfile

        #-------
        # build calling sequence for the function
        #-------

        echo "   switch(calhandles[`expr "$slot" - 1`])" >>$outfile
        echo "   {" >>$outfile


        count=0
        for t in $*
        do
                count=`expr "$count" + 1`

                #-------
                # assume we won't have more than 9999 modules
                #-------

                echo "        case ${count}:">>$outfile
                echo "           rc = kb${slot}opt${t}_((char *)&c1, (int *)i1, (int *)i2, 4);">>$outfile
                echo "           break;">>$outfile
        done

        echo "        default:
           rc = -2;
           break;
   }

   return(rc);
}">>$outfile
}

###############################################################################

#-------
# parse the command line and build an ini, cal and opt file for each type
#-------

err=0
num=0
numslots=3
type=
outfile=

while [ $# -gt 0 ]; do

        #-------
        # grab first argument
        #-------

        f="$1"
        shift

        case "$f" in
        *kbx*.dlm)

                #-------
                # strip the 'kbx' prefix and the '.dlm' suffix
                #-------

                tmp="`expr "$f" : '.*kbx\(.*\).dlm'`"

                #-------
                # check the cal type uniqueness
                #-------

                case "$type" in
                *" $tmp "*)
                        >&2 echo "$f" is a DUPLICATE calibration module
                        err=1
                        continue
                        ;;
                esac

                type="$type $tmp "
                num=`expr "$num" + 1`
                ;;
        -n)

                #-------
                # save number of slots to build
                #-------

                if [ "$#" -ge 1 ]; then
                        if [ "$1" -ge 1 -a "$1" -le 9 ]; then
                                numslots=$1
                        else
                                echo "Bad number of slots \"$1\"" >&2
                        fi
                        shift
                else
                        echo "Missing number of slots after '-n'" >&2
                        err=1
                fi
                ;;
        -o)

                #-------
                # save output file name
                #-------

                if [ "$#" -ge 1 ]; then
                        if [ -z "$outfile" ]; then
                                outfile="$1"
                        else
                                echo "Please specify only one output file" >&2
                                err=1
                        fi
                        shift
                else
                        echo "Missing output file after '-o'" >&2
                        err=1
                fi
                ;;
        -*)
                echo "Bad option '$f'" >&2
                echo "Usage: $0 [-n slots] -o outfile dlm-file ..." >&2
                err=1
                ;;
         *)
                # >&2 echo "$f" is not a valid calibration module
                ;;
        esac
done

#-------
# check to see if there were duplicates in the list
#-------

if [ $err -ne 0 ]; then
        exit $err
fi

#-------
# check to see if the list is empty
#-------

case $num in
0)      >&2 echo "No valid calibration modules were found"
        err=1
        exit $err
        ;;
esac

#-------
# if no output file was specified, whine and die
#-------

if [ -z "$outfile" ]; then
        echo "No output file specified" >&2
        err=1
        exit $err
fi

#-------
# make sure output file exists and is empty
#-------

rm -f $outfile
touch $outfile

#-------
# sort the list of modules
#-------

/bin/rm -f $sfile 2>/dev/null

for s in $type
do
        echo $s >> $sfile
done

type=`sort $sfile`

>&2 echo CAL TYPES: $type


#-------
# build the main file
#-------

build_main $numslots $type

for func in ini cal opt; do
        >&2 echo working on $func

        slot=1
        while [ $slot -le $numslots ]; do
                #-------
                # build the funcs
                #-------

                build_$func $slot $numslots $type
                slot=`expr $slot + 1`
        done
done


