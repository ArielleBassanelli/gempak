The information following is the implementation for taking
a filled in gamet structure (as described in previous email)
and producing a gamet product string.
The first section is the function heirarchy, indicating how
the routines are called. The next section is a brief description
of each routine.
Please see gamet.h file for structure definitions and defines.


FUNCTION HIERARCHY

create_gamet_product (GametStruct *gamet, char *prod, char *errors)
    gamet_time (int day, int hour, char* gTime)
    create_header (char *atsunit, char *originator,
                   char * fir, char *validTime, char *header)    
    for each element in the gamet structure
        create_element (ElementStruct element, int issueHour, char *eleStr, 
                        char *errorStr)
            element_string (ElementType type)
            for each area in the element structure	
                create_area (AreaStruct area, int hour, char *areaStr, 
                             int *retCode)
                    validPeriod (AreaStruct, issueHour, validStr)
    


FUNCTION DESCRIPTIONS

/**********************************************************************
create_gamet_product (GametStruct *gamet, char *prod, char *errors)
    Function creates a gamet product string from the Gamet Structure
    provided.  It is the caller's responsibility to provide
    an output string long enough for the product and for the error list.
    As subroutines are called to make strings for the header and
    each element, they are copied to the product string.
    The error string is built up as errors are encountered.
  
Input Parameters:
    *gamet        GametStruct
Output Parameters:
    *prod         char           character string of gamet text
    *errors       char           semi-coloned separated lists of
                                 failed parts
                                 If no errors occured, errors string
                                 is an empty string
Functions Called:
    gamet_time
    create_header
    create_element
Returns:
   TRUE on success, FALSE on any failure
**********************************************************************/

/**********************************************************************
gamet_time (int day, int hour, char gTime)
    Function uses the issuance day and hour and creates a gamet
    valid period string. As necessary the routine handles time
    rollover.  It is the callers responsibility to provide a
    character string long enough for the valid time.

Input Parameters:
    day           int         issuance Day from Gamet Structure
    hour          int         issuance Hour from Gamet Structure
OutPut Parameters:
    gTime         char        character string of gamet valid time
                                 example: 221800/230000
Returns:
    TRUE if able to create a valid time string, FALSE if unable to.

**********************************************************************/

/**********************************************************************
create_header (char *atsunit, char *originator, char * fir, 
  char *validTime, char *header)    
    This function uses strings from the gamet structure (atsunit,
    originator and fir) and the valid period created in gamet_time
    and creates the gamet header string.
    Example:
    KZLC GAMET VALID 221800/230000 KKCI
    SALT LAKE CITY FIR BLW FL450 
    SECN I
   It is the caller's responsibility to provide a string of
   adequate length.

Input Parameters:
    atsunit      char         air traffic services unit
    originator   char         meteorological office originating message
    fir          char         flight information region or subarea
    validTime    char         gamet valid period
Output Parameters:
    header       char         string containing constants and input information
Returns:
   TRUE if able to create a valid header, FALSE if not.
   An example of a failure would be if one of the pieces to the header
   is empty. 

**********************************************************************/

/**********************************************************************
create_element (ElementStruct element, int issueHour, char *eleStr, 
  char *errorStr)
    This function takes information contained in the
    element structure and creates the string indicating the element
    type and calls create_area for each area of this type.
Input Parameters:
    element      ElementStruct   
    hour         int           issuance hour of gamet
Output Parameters:
    elementString char         string of type and information on each area
    errorStr      char         catanated string of errors occured while
                               creating area string
Functions Called:
    element_string
    create_area

**********************************************************************/

/**********************************************************************
element_string (ElementType type)
    Function takes an enum value type of ElementType and returns the
    character string for the type. See gamet.h for enum values.
    Table lookup is:
      char * ElementStrings[] = {
      "SFC WSPD",
      "SFC VIS",
      "SIG WX",
      "MT OBSCN",
      "SIG_CLD",
      "ICE",
      "TURB",
      "MTW",
      "PSYS",
      "CLD",
      "FZLVL",
      "VA",
      "UNKNOWN"};
Input Parameters:
    type          ElementType
Output Parameters:
    string associated with type from above table

**********************************************************************/

/**********************************************************************
create_area (AreaStruct area, int hour, char *areaStr, int *retCode)

    Function creates a string from information in the Area Structure.
    It is the caller's responsiblility to provide a character
    string of adequate length.
Input Parameters:
    area          AreaStruct
    hour          hour gamet issured
Output Parameters:
    areaStr       character string with area information time, location
                  and description of event
    retCode       Return code. Return code will indicate any errors
                  encountered during construction of the area string.
                  This is done by or'ing ing values:
                  AREA_NO_ERROR               0x00000000
                  AREA_BAD_VALID_PERIOD       0x00000001
                  AREA_INVALID_ATTRIBUTE      0x00000002
                  AREA_INVALID_VOR_STRING     0x00000004

             
Function called:
    valid_period
**********************************************************************/

/**********************************************************************
valid_period (AreaStruct *area, int hour, char *valid)
    Function uses the area structures snapshot array to determin valid
    time for the gamet. The function handles time rollover as
    necessary. It is the caller's responsibility to provide
    an adequate character string.
Input Parameters:
    area          AreaStruct
    hour          int
Output Parameters:
    valid         char string of valid time (if it is determined the
                  event is for the entire 6 hour gamet period, the
                  string will be empty)
Returns: TRUE if able to create a valid_perid, else FALSE.

**********************************************************************/

